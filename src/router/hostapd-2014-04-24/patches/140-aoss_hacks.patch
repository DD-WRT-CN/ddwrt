--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -242,6 +242,9 @@ static int hostapd_ctrl_iface_sa_query(s
 
 
 #ifdef CONFIG_WPS
+extern int sysprintf(const char *fmt, ...);
+
+
 static int hostapd_ctrl_iface_wps_pin(struct hostapd_data *hapd, char *txt)
 {
 	char *pin = os_strchr(txt, ' ');
@@ -266,7 +269,10 @@ static int hostapd_ctrl_iface_wps_pin(st
 		}
 	} else
 		timeout = 0;
-
+	sysprintf("killall wpswatcher");
+	sysprintf("wpswatcher %d",timeout);
+	sysprintf("killall ledtool");
+	sysprintf("ledtool %d 2",timeout);
 	return hostapd_wps_add_pin(hapd, addr, txt, pin, timeout);
 }
 
@@ -492,6 +498,10 @@ static int hostapd_ctrl_iface_wps_ap_pin
 		}
 		if (os_strlen(pin) > buflen)
 			return -1;
+		sysprintf("killall wpswatcher");
+		sysprintf("wpswatcher %d",timeout);
+		sysprintf("killall ledtool");
+		sysprintf("ledtool %d 2",timeout);
 		if (hostapd_wps_ap_pin_set(hapd, pin, timeout) < 0)
 			return -1;
 		return os_snprintf(buf, buflen, "%s", pin);
--- a/src/ap/wps_hostapd.c
+++ b/src/ap/wps_hostapd.c
@@ -344,6 +344,69 @@ static int hapd_wps_cred_cb(struct hosta
 		os_memcpy(hapd->wps->network_key, cred->key, cred->key_len);
 	}
 	hapd->wps->wps_state = WPS_STATE_CONFIGURED;
+	nvram_set("wps_status","1");
+	char ifname[32];
+	strcpy(ifname,hapd->conf->iface);
+	ifname[4]=0;
+	char akm[32];
+	sprintf(akm,"%s_akm",ifname);
+	char smode[32];
+	sprintf(smode,"%s_security_mode",ifname);
+	char psk[32];
+	sprintf(psk,"%s_wpa_psk",ifname);
+	char crypto[32];
+	sprintf(crypto,"%s_crypto",ifname);
+	char ssid[32];
+	sprintf(ssid,"%s_ssid",ifname);
+ 
+	if ((cred->auth_type & (WPS_AUTH_WPA2 | WPS_AUTH_WPA2PSK)) &&
+	    (cred->auth_type & (WPS_AUTH_WPA | WPS_AUTH_WPAPSK)))
+	    {
+	    nvram_set(akm,"psk psk2");
+	    nvram_set(smode,"psk psk2");
+	    }
+	else if (cred->auth_type & (WPS_AUTH_WPA2 | WPS_AUTH_WPA2PSK))
+	{
+	    nvram_set(akm,"psk2");
+	    nvram_set(smode,"psk2");
+	}
+	else if (cred->auth_type & (WPS_AUTH_WPA | WPS_AUTH_WPAPSK))
+	{
+	    nvram_set(akm,"psk");
+	    nvram_set(smode,"psk");
+	}
+	else
+	{
+	    nvram_set(akm,"disabled");
+	    nvram_set(smode,"disabled");
+	}
+	
+	
+
+	char newkey[65];
+	strncpy(newkey,cred->key,cred->key_len);
+	newkey[cred->key_len]=0;
+	nvram_set(psk,newkey);
+
+	if (cred->encr_type & (WPS_ENCR_AES | WPS_ENCR_TKIP)) {
+	    nvram_set(crypto,"tkip+aes");
+	}else
+	if (cred->encr_type & (WPS_ENCR_AES)) {
+	    nvram_set(crypto,"aes");
+	}else
+	if (cred->encr_type & (WPS_ENCR_TKIP)) {
+	    nvram_set(crypto,"tkip");
+	}
+	char str_ssid[40];
+	memcpy(str_ssid,cred->ssid,cred->ssid_len);
+	str_ssid[cred->ssid_len]=0;
+	nvram_set(ssid,str_ssid);
+	
+
+
+	nvram_commit();
+	sysprintf("echo done > /tmp/.wpsdone");
+
 
 	if (hapd->iface->config_fname == NULL)
 		return 0;
--- a/src/eap_peer/eap_wsc.c
+++ b/src/eap_peer/eap_wsc.c
@@ -392,6 +392,10 @@ static struct wpabuf * eap_wsc_process_f
 	return eap_wsc_build_frag_ack(id, EAP_CODE_RESPONSE);
 }
 
+#ifdef HAVE_AOSS
+extern int sysprintf(const char *fmt, ...);
+extern void nvram_set(const char *name, char *value);
+#endif
 
 static struct wpabuf * eap_wsc_process(struct eap_sm *sm, void *priv,
 				       struct eap_method_ret *ret,
@@ -503,6 +507,11 @@ static struct wpabuf * eap_wsc_process(s
 		wpa_printf(MSG_DEBUG, "EAP-WSC: WPS processing completed "
 			   "successfully - wait for EAP failure");
 		eap_wsc_state(data, FAIL);
+#ifdef HAVE_AOSS
+		sysprintf("echo done > /tmp/.wpsdone");
+		nvram_set("wps_status", "1");
+		nvram_commit();
+#endif
 		break;
 	case WPS_CONTINUE:
 		eap_wsc_state(data, MESG);
--- a/src/eap_server/eap_server_wsc.c
+++ b/src/eap_server/eap_server_wsc.c
@@ -286,6 +286,10 @@ static Boolean eap_wsc_check(struct eap_
 	return FALSE;
 }
 
+#ifdef HAVE_AOSS
+extern int sysprintf(const char *fmt, ...);
+extern void nvram_set(const char *name, char *value);
+#endif
 
 static int eap_wsc_process_cont(struct eap_wsc_data *data,
 				const u8 *buf, size_t len, u8 op_code)
@@ -439,6 +443,11 @@ static void eap_wsc_process(struct eap_s
 		wpa_printf(MSG_DEBUG, "EAP-WSC: WPS processing completed "
 			   "successfully - report EAP failure");
 		eap_wsc_state(data, FAIL);
+#ifdef HAVE_AOSS
+		sysprintf("echo done > /tmp/.wpsdone");
+		nvram_set("wps_status", "1");
+		nvram_commit();
+#endif
 		break;
 	case WPS_CONTINUE:
 		eap_wsc_state(data, MESG);
--- a/src/wps/wps_enrollee.c
+++ b/src/wps/wps_enrollee.c
@@ -1319,6 +1319,14 @@ static enum wps_process_res wps_process_
 	wpa_printf(MSG_DEBUG, "WPS: Registrar terminated negotiation with "
 		   "Configuration Error %d", config_error);
 
+	if (!config_error) {
+#ifdef HAVE_AOSS
+		nvram_set("wps_status", "1");
+		nvram_commit();
+		sysprintf("echo done > /tmp/.wpsdone");
+#endif
+	}
+
 	switch (wps->state) {
 	case RECV_M4:
 		wps_fail_event(wps->wps, WPS_M3, config_error,
--- a/src/wps/wps_registrar.c
+++ b/src/wps/wps_registrar.c
@@ -3174,6 +3174,11 @@ static enum wps_process_res wps_process_
 	return WPS_DONE;
 }
 
+#ifdef HAVE_AOSS
+extern int sysprintf(const char *fmt, ...);
+extern void nvram_set(const char *name, char *value);
+#endif
+
 
 enum wps_process_res wps_registrar_process_msg(struct wps_data *wps,
 					       enum wsc_op_code op_code,
@@ -3239,6 +3244,12 @@ enum wps_process_res wps_registrar_proce
 			wps_fail_event(wps->wps, WPS_WSC_DONE,
 				       wps->config_error,
 				       wps->error_indication);
+		} else {
+#ifdef HAVE_AOSS
+			nvram_set("wps_status", "1");
+			nvram_commit();
+			sysprintf("echo done > /tmp/.wpsdone");
+#endif
 		}
 		return ret;
 	default:
