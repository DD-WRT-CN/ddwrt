--- a/src/ap/ieee802_1x.c
+++ b/src/ap/ieee802_1x.c
@@ -1334,6 +1334,46 @@ ieee802_1x_search_radius_identifier(stru
 	return id_search.sm;
 }
 
+#ifdef HAVE_AQOS
+extern void add_usermac( char *mac, int idx, char *upstream,
+			 char *downstream, char *lanstream );
+extern char *nvram_safe_get(const char *name);
+
+int addrule(char *mac, char *upstream, char *downstream)
+{
+	char *qos_mac = nvram_safe_get( "svqos_macs" );
+	char *newqos;
+	int ret = 0;
+	int len = strlen(qos_mac);
+
+	newqos = malloc(len + 128);
+	memset(newqos, 0, len + 128);
+
+	char level[32], level2[32], level3[32], data[32], type[32], prio[32];
+	strcpy(level3, "0");
+	if (len > 0) {
+		do {
+			if(sscanf( qos_mac, "%31s %31s %31s %31s %31s %31s |", data, level, level2, type, level3, prio) < 6)
+				break;
+			if (!strcasecmp(data,mac)) {
+				sprintf(newqos,"%s %s %s %s %s %s %s |",newqos,data,upstream,downstream,"hostapd",level3,prio);
+				if (!strcmp(level,upstream) && !strcmp(level2,downstream))
+					ret = 1;
+				else
+					ret = 2;
+			} else
+				sprintf(newqos,"%s %s %s %s %s %s %s |",newqos,data,level,level2,type,level3,prio);
+		} while( ( qos_mac = strpbrk( ++qos_mac, "|" ) ) && qos_mac++ );
+	}
+
+	if (!ret)
+		sprintf(newqos,"%s %s %s %s %s %s %s |",newqos,mac,upstream,downstream,"hostapd",level3,prio);
+
+	nvram_set("svqos_macs",newqos);
+	free(newqos);
+}
+
+#endif
 
 /**
  * ieee802_1x_receive_auth - Process RADIUS frames from Authentication Server
@@ -1356,6 +1396,7 @@ ieee802_1x_receive_auth(struct radius_ms
 	struct eapol_state_machine *sm;
 	int override_eapReq = 0;
 	struct radius_hdr *hdr = radius_msg_get_hdr(msg);
+	static int qosidx=3910;
 
 	sm = ieee802_1x_search_radius_identifier(hapd, hdr->identifier);
 	if (sm == NULL) {
@@ -1420,6 +1461,50 @@ ieee802_1x_receive_auth(struct radius_ms
 
 	switch (hdr->code) {
 	case RADIUS_CODE_ACCESS_ACCEPT:
+#ifdef HAVE_AQOS
+		wpa_printf(MSG_DEBUG, "check user bandwith shaping\n");
+		u32 *down,*up;
+		size_t len;
+		if ((down=(u32*)radius_msg_get_vendor_attr(msg,RADIUS_VENDOR_ID_WISPR, RADIUS_ATTR_WISPR_BANDWIDTH_MAX_DOWN ,&len)) == NULL) {
+		    wpa_printf(MSG_DEBUG, "no downstream level found\n");
+		}else
+		{
+		if ((up=(u32*)radius_msg_get_vendor_attr(msg,RADIUS_VENDOR_ID_WISPR, RADIUS_ATTR_WISPR_BANDWIDTH_MAX_UP ,&len)) == NULL) {
+		    wpa_printf(MSG_DEBUG, "no up level found\n");
+		    os_free(down);
+		    }else{
+		    *down=ntohl(*down);
+		    *up=ntohl(*up);
+		    wpa_printf(MSG_DEBUG, "downstream %d kbits, upstream %d kbits level found\n",*down,*up);
+		    char mac[64];
+		    sprintf(mac, MACSTR, MAC2STR(sta->addr));
+		    char uplevel[64];
+		    char downlevel[64];
+		    sprintf(uplevel,"%d",*up/1000);
+		    sprintf(downlevel,"%d",*down/1000);
+		    int ret = addrule(mac,uplevel,downlevel);
+		    //case 0 = does not exists, should just be added, no restart
+		    //case 1 = no change required, already added
+		    //case 2 = change required, exists, but new settings
+		    //case 3 = change required, exists, new setting 
+		    if (!ret)
+			{
+			qosidx+=10;
+			if (qosidx>6400)
+			    qosidx=0;
+			wpa_printf(MSG_DEBUG, "bandwidth rule is new, no flush required!\n");			
+			add_usermac(mac, qosidx, uplevel,downlevel,"0");
+			}else if (ret>1)
+			{
+			wpa_printf(MSG_DEBUG, "bandwidth rule change detected, flush table and reset it to new values! (status %d)\n",ret);			
+			system("startstop_f wshaper");
+			}	    
+		    os_free(up);
+		    os_free(down);
+		    }
+		
+		}
+#endif
 		if (sta->ssid->dynamic_vlan == DYNAMIC_VLAN_DISABLED)
 			sta->vlan_id = 0;
 #ifndef CONFIG_NO_VLAN
--- a/src/radius/radius.c
+++ b/src/radius/radius.c
@@ -882,7 +882,7 @@ void radius_msg_make_authenticator(struc
  * The returned payload is allocated with os_malloc() and caller must free it
  * by calling os_free().
  */
-static u8 *radius_msg_get_vendor_attr(struct radius_msg *msg, u32 vendor,
+u8 *radius_msg_get_vendor_attr(struct radius_msg *msg, u32 vendor,
 				      u8 subtype, size_t *alen)
 {
 	u8 *data, *pos;
--- a/src/radius/radius.h
+++ b/src/radius/radius.h
@@ -163,6 +163,15 @@ enum { RADIUS_VENDOR_ATTR_MS_MPPE_SEND_K
        RADIUS_VENDOR_ATTR_MS_MPPE_RECV_KEY = 17
 };
 
+#define RADIUS_VENDOR_ID_WISPR 14122
+
+enum {
+       RADIUS_ATTR_WISPR_BANDWIDTH_MIN_UP = 5,     
+       RADIUS_ATTR_WISPR_BANDWIDTH_MIN_DOWN = 6,
+       RADIUS_ATTR_WISPR_BANDWIDTH_MAX_UP = 7,     
+       RADIUS_ATTR_WISPR_BANDWIDTH_MAX_DOWN = 8,
+};
+
 #ifdef _MSC_VER
 #pragma pack(pop)
 #endif /* _MSC_VER */
@@ -243,6 +252,7 @@ int radius_msg_get_vlanid(struct radius_
 char * radius_msg_get_tunnel_password(struct radius_msg *msg, int *keylen,
 				      const u8 *secret, size_t secret_len,
 				      struct radius_msg *sent_msg);
+u8 *radius_msg_get_vendor_attr(struct radius_msg *msg, u32 vendor,u8 subtype, size_t *alen);
 
 static inline int radius_msg_add_attr_int32(struct radius_msg *msg, u8 type,
 					    u32 value)
