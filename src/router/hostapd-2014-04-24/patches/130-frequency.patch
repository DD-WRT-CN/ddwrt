--- a/hostapd/config_file.c
+++ b/hostapd/config_file.c
@@ -2343,6 +2343,8 @@ static int hostapd_config_fill(struct ho
 			}
 		} else if (os_strcmp(buf, "channel") == 0) {
 			conf->channel = atoi(pos);
+		} else if (os_strcmp(buf, "frequency") == 0) {
+			conf->frequency = atoi(pos);
 		} else if (os_strcmp(buf, "beacon_int") == 0) {
 			int val = atoi(pos);
 			/* MIB defines range as 1..65535, but very small values
--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -186,6 +186,8 @@ static struct hostapd_config *hostapd_ct
 
 		if ((val = get_option(opt, "channel=")))
 			conf->channel = atoi(val);
+		else if ((val = get_option(opt, "frequency=")))
+			conf->frequency = atoi(val);
 		else if ((val = get_option(opt, "ht_capab=")))
 			conf->ht_capab = atoi(val);
 		else if ((val = get_option(opt, "ht_capab_mask=")))
--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -463,6 +463,7 @@ struct hostapd_config {
 	int fragm_threshold;
 	u8 send_probe_response;
 	u8 channel;
+	u16 frequency;
 	enum hostapd_hw_mode hw_mode; /* HOSTAPD_MODE_IEEE80211A, .. */
 	enum {
 		LONG_PREAMBLE = 0,
--- a/src/ap/hw_features.c
+++ b/src/ap/hw_features.c
@@ -248,9 +248,11 @@ static void ieee80211n_switch_pri_sec(st
 {
 	if (iface->conf->secondary_channel > 0) {
 		iface->conf->channel += 4;
+		iface->conf->frequency += 20;
 		iface->conf->secondary_channel = -1;
 	} else {
 		iface->conf->channel -= 4;
+		iface->conf->frequency -= 20;
 		iface->conf->secondary_channel = 1;
 	}
 }
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -4940,14 +4940,7 @@ static int phy_info_handler(struct nl_ms
 				mode_is_set = 1;
 			}
 
-			/* crude heuristic */
-			if (mode->channels[idx].freq < 4000)
-				if (mode->channels[idx].freq == 2484)
-					mode->channels[idx].chan = 14;
-				else
-					mode->channels[idx].chan = (mode->channels[idx].freq - 2407) / 5;
-			else
-				mode->channels[idx].chan = mode->channels[idx].freq/5 - 1000;
+			mode->channels[idx].chan = ieee80211_frequency_to_channel(mode->channels[idx].freq);
 
 			if (tb_freq[NL80211_FREQUENCY_ATTR_DISABLED])
 				mode->channels[idx].flag |=
--- a/src/utils/common.c
+++ b/src/utils/common.c
@@ -610,3 +610,24 @@ size_t merge_byte_arrays(u8 *res, size_t
 
 	return len;
 }
+
+int ieee80211_frequency_to_channel(int freq)
+{
+	/* see 802.11 17.3.8.3.2 and Annex J */
+	if (freq == 2484)
+		return 14;
+	if (freq == 2407)
+		return 0;
+	else if (freq < 2412)
+		return (freq - 2407) / 5 + 256;
+	else if (freq < 2484)
+		return (freq - 2407) / 5;
+	else if (freq > 2484 && freq < 4000 )
+		return (freq - 2414) / 5;
+	else if (freq < 4990 && freq > 4940)
+		return ((freq * 10) + (((freq % 5) == 2) ? 5 : 0) - 49400) / 5;
+	else if (freq >= 4800 && freq < 5005)
+		return (freq - 4000) / 5;
+	else
+		return (freq - 5000) / 5;
+}
--- a/src/utils/common.h
+++ b/src/utils/common.h
@@ -451,6 +451,7 @@ int is_hex(const u8 *data, size_t len);
 size_t merge_byte_arrays(u8 *res, size_t res_len,
 			 const u8 *src1, size_t src1_len,
 			 const u8 *src2, size_t src2_len);
+int ieee80211_frequency_to_channel(int freq);
 
 static inline int is_zero_ether_addr(const u8 *a)
 {
--- a/wpa_supplicant/wpa_supplicant.c
+++ b/wpa_supplicant/wpa_supplicant.c
@@ -132,16 +132,15 @@ static int hostapd_reload(struct wpa_sup
 	if (!bss)
 		return;
 
-	if (bss->freq < 4000) {
+	if (bss->freq < 4000)
 		hw_mode = HOSTAPD_MODE_IEEE80211G;
-		channel = (bss->freq - 2407) / 5;
-	} else {
+	else
 		hw_mode = HOSTAPD_MODE_IEEE80211A;
-		channel = (bss->freq - 5000) / 5;
-	}
 
-	if (asprintf(&cmd, "UPDATE channel=%d sec_chan=0 hw_mode=%d ieee80211n=%d",
-		     channel, hw_mode, !!bss->ht_capab) < 0) {
+	channel = ieee80211_frequency_to_channel(bss->freq);
+
+	if (asprintf(&cmd, "UPDATE channel=%d frequency=%d sec_chan=0 hw_mode=%d ieee80211n=%d",
+		     channel, bss->freq, hw_mode, !!bss->ht_capab) < 0) {
 		return -1;
 	}
 
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -896,7 +896,10 @@ int hostapd_setup_interface_complete(str
 
 	wpa_printf(MSG_DEBUG, "Completing interface initialization");
 	if (hapd->iconf->channel) {
-		iface->freq = hostapd_hw_get_freq(hapd, hapd->iconf->channel);
+		if (hapd->iconf->frequency)
+			iface->freq = hapd->iconf->frequency;
+		else
+			iface->freq = hostapd_hw_get_freq(hapd, hapd->iconf->channel);
 		wpa_printf(MSG_DEBUG, "Mode: %s  Channel: %d  "
 			   "Frequency: %d MHz",
 			   hostapd_hw_mode_txt(hapd->iconf->hw_mode),
