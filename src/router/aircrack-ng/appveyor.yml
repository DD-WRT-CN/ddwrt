version: 1.0.{build}

pull_requests:
  do_not_increment_build_number: true

# Do not build feature branch with open Pull Requests
skip_branch_with_pr: true

image: Visual Studio 2017

configuration: Release

platform: x64

clone_depth: 500

environment:
  global:
    # APPVEYOR_SAVE_CACHE_ON_ERROR: true
    AIRCRACK_CI_CACHE: C:\aircrack_ci_cache
    CYG_CACHE: '%AIRCRACK_CI_CACHE%\cygwin'
    MSYS2_CACHE: '%AIRCRACK_CI_CACHE%\msys2'
    CHERE_INVOKING: 1
    MSYSTEM: MSYS

  matrix:
  - TARGET: cygwin
    COMPILER: gcc
  - TARGET: cygwin64
    COMPILER: gcc
  - TARGET: cygwin
    COMPILER: clang
  - TARGET: cygwin64
    COMPILER: clang
  - TARGET: msys64
  - TARGET: pkg

matrix:
  fast_finish: true
  allow_failures:
    - TARGET: cygwin
      COMPILER: clang
    - TARGET: cygwin64
      COMPILER: clang

# cache:
# - '%AIRCRACK_CI_CACHE%'

# Uncomment to enable debugging on AppVeyor equipment
#
init:
- git config --global core.autocrlf input
- git config --global core.eol lf
#- ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

install:
- ps: |
    function Exec-External {
      param(
        [Parameter(Position=0,Mandatory=1)][scriptblock] $command
      )
      & $command 2>&1 | %{ "$_" }
      if ($LASTEXITCODE -ne 0) {
        throw ("Command returned non-zero error-code ${LASTEXITCODE}: $command")
      }
    }

- ps: |
    function downloadIfOlderThanDays($url, $path, $days) {
      if ( !(Test-Path $path -NewerThan (Get-Date).AddDays(-$days)) ) {
        Write-Host "$path does not exist or is older than $days days, downloading from $url"
        Invoke-WebRequest $url -OutFile $path
      }
    }

- ps: |
    function updateCygwin($cygwinexe, $installFolder, $cacheFolder) {
      Write-Host "Update Cygwin: $cygwinexe"
      Exec-External {& cmd /c $cygwinexe -gqnNdO -R $installFolder -s http://mirrors.kernel.org/sourceware/cygwin/ -l $cacheFolder -P autoconf -P automake -P bison -P clang -P gcc-core -P gcc-g++ -P mingw-runtime -P mingw-binutils -P mingw-gcc-core -P mingw-gcc-g++ -P mingw-pthreads -P mingw-w32api -P libtool -P make -P python -P gettext-devel -P gettext -P intltool -P libiconv -P libiconv-devel -P pkg-config -P git -P wget -P curl -P libcurl4 -P libpcre-devel -P libssl-devel -P libsqlite3-devel -P zlib-devel -P cmocka -P unzip -P zip -P rsync -P expect -P libhwloc-devel}
      Write-Host "Update Cygwin: $cygwinexe " -NoNewLine
      Write-Host "[ OK ]" -ForegroundColor Green
    }

- ps: |
    if ($env:TARGET -eq "cygwin" -or $env:TARGET -eq "pkg") {
      New-Item -Force -Type Directory $env:CYG_CACHE

      downloadIfOlderThanDays "https://cygwin.com/setup-x86.exe" "${env:AIRCRACK_CI_CACHE}\setup-x86.exe" 7
      
      updateCygwin "${env:AIRCRACK_CI_CACHE}\setup-x86.exe" C:/cygwin $env:CYG_CACHE
    }

- ps: |
    if ($env:TARGET -eq "cygwin64" -or $env:TARGET -eq "pkg") {
      New-Item -Force -Type Directory $env:CYG_CACHE

      downloadIfOlderThanDays "https://cygwin.com/setup-x86_64.exe" "${env:AIRCRACK_CI_CACHE}\setup-x86_64.exe" 7
      
      updateCygwin "${env:AIRCRACK_CI_CACHE}\setup-x86_64.exe" C:/cygwin64 $env:CYG_CACHE
    }

- ps: |
    if ($env:TARGET -eq "msys64") {
      function bash($bash_command) {
        Write-Host "MSYS2-Bash: $bash_command"
        Exec-External {& C:\msys64\usr\bin\bash.exe --login -e -c $bash_command }
        Write-Host "MSYS2-Bash $bash_command " -NoNewLine
        Write-Host "[ OK ]" -ForegroundColor Green
      }
      New-Item -Force -Type Directory $env:MSYS2_CACHE
      $unix_msys2_cache = (Exec-External {& C:\msys64\usr\bin\bash.exe --login -e -c "cygpath '${env:MSYS2_CACHE}'"})
      # install latest pacman
      bash "pacman -Sy --noconfirm --cache `"$unix_msys2_cache`" pacman pacman-mirrors"
      # update core packages
      bash "pacman -Syu --noconfirm --cache `"$unix_msys2_cache`""
      # install Aircrack-ng build dependencies
      bash "pacman --sync --noconfirm --cache `"$unix_msys2_cache`" autoconf automake1.15 libtool msys2-w32api-headers msys2-w32api-runtime pkg-config git python openssl-devel openssl libopenssl msys2-runtime-devel binutils make pcre-devel libsqlite-devel zlib-devel"
    }

build_script:
- cmd: |
    C:\cygwin\bin\bash -e -l -c "curl -RLO https://dl.aircrack-ng.org/AirPcap_Devpack_4_1_1_1838.zip"
- ps: |
    $hashFromFile = Get-FileHash -Path "AirPcap_Devpack_4_1_1_1838.zip" -Algorithm SHA256
    if ($hashFromFile.Hash -ne "86dcde46603cd1229245263499ef9cb4e43ee66cd7219605d30095562888da14") {
      Write-Host "AirPcap failed digest check." -ForegroundColor Red
      $hashFromFile | Format-List
      Break
    }
- cmd: |
    C:\cygwin\bin\bash -e -l -c "7z -y x AirPcap_Devpack_4_1_1_1838.zip"
- ps: |
    if ($env:TARGET -eq "cygwin") {
      Exec-External {& C:\cygwin\bin\bash -e -l -c "cp -vfp Airpcap_Devpack/bin/x86/airpcap.dll /cygdrive/c/Windows/System32"}
      Exec-External {& C:\cygwin\bin\bash -e -l -c "dlltool -D Airpcap_Devpack/bin/x86/airpcap.dll -d build/airpcap.dll.def -l Airpcap_Devpack/bin/x86/libairpcap.dll.a"}
      if ($env:COMPILER -eq "gcc") {
        Exec-External {& C:\cygwin\bin\bash -e -l -c "./build/cygwin.sh gcc --with-experimental --with-airpcap=/cygdrive/c/projects/aircrack-ng"}
        Exec-External {& C:\cygwin\bin\bash -e -l -c "./build/cygwin.sh gcc --with-experimental"}
      } else {
        Exec-External {& C:\cygwin\bin\bash -e -l -c "./build/cygwin.sh clang --with-experimental --with-airpcap=/cygdrive/c/projects/aircrack-ng"}
      }
    }
- ps: |
    if ($env:TARGET -eq "cygwin64") {
      Exec-External {& C:\cygwin64\bin\bash -e -l -c "cp -vfp Airpcap_Devpack/bin/x64/airpcap.dll /cygdrive/c/Windows/System"}
      Exec-External {& C:\cygwin64\bin\bash -e -l -c "dlltool -D Airpcap_Devpack/bin/x64/airpcap.dll -d build/airpcap.dll.def -l Airpcap_Devpack/bin/x64/libairpcap.dll.a"}
      if ($env:COMPILER -eq "gcc") {
        Exec-External {& C:\cygwin64\bin\bash -e -l -c "./build/cygwin.sh gcc --with-experimental --with-airpcap=/cygdrive/c/projects/aircrack-ng"}
        Exec-External {& C:\cygwin64\bin\bash -e -l -c "./build/cygwin.sh gcc --with-experimental"}
      } else {
        Exec-External {& C:\cygwin64\bin\bash -e -l -c "./build/cygwin.sh clang --with-experimental --with-airpcap=/cygdrive/c/projects/aircrack-ng"}
      }
    }
- ps: |
    if ($env:TARGET -eq "msys64") {
      Exec-External {& C:\msys64\usr\bin\bash -e -l -c "cp -vfp Airpcap_Devpack/bin/x64/airpcap.dll /c/Windows/System"}
      Exec-External {& C:\msys64\usr\bin\bash -e -l -c "dlltool -D Airpcap_Devpack/bin/x64/airpcap.dll -d build/airpcap.dll.def -l Airpcap_Devpack/bin/x64/libairpcap.dll.a"}
      Exec-External {& C:\msys64\usr\bin\bash -e -l -c "./build/cygwin.sh gcc --with-experimental --with-airpcap=/c/projects/aircrack-ng"}
      Exec-External {& C:\msys64\usr\bin\bash -e -l -c "./build/cygwin.sh gcc --with-experimental"}
    }
- ps: |
    if ($env:TARGET -eq "pkg") {
      Exec-External {& C:\msys64\usr\bin\bash -e -l -c "cp -vfp Airpcap_Devpack/bin/x64/airpcap.dll /c/Windows/System"}
      Exec-External {& C:\msys64\usr\bin\bash -e -l -c "cp -vfp Airpcap_Devpack/bin/x86/airpcap.dll /c/Windows/System32"}
      Exec-External {& C:\msys64\usr\bin\bash -e -l -c "dlltool -D Airpcap_Devpack/bin/x64/airpcap.dll -d build/airpcap.dll.def -l Airpcap_Devpack/bin/x64/libairpcap.dll.a"}
      Exec-External {& C:\cygwin\bin\bash -e -l -c "dlltool -D Airpcap_Devpack/bin/x86/airpcap.dll -d build/airpcap.dll.def -l Airpcap_Devpack/bin/x86/libairpcap.dll.a"}
      .\build\package-win32.ps1 2>&1 | %{ "$_" }
    }
    
artifacts:
  - path: 'aircrack-ng-*.zip'

deploy:
  - provider: FTP
    host: secure.thrallingpenguin.com
    protocol: ftps
    username: appveyor
    password:
      secure: TMwjjDnIFGZclF9TbbgBprDa1kRweHrh6Gw4vnDW/QegdmR4CT/LUiDf9L+OdNVZ
    folder: artifacts/aircrack-ng/development/$(APPVEYOR_REPO_COMMIT)/win
    artifact: /aircrack-ng-.*\.zip/
    beta: true
    debug: true
    on:
      branch: master
