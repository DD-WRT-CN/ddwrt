/* Generated by ./xlat/gen.sh from ./xlat/keyctl_pkey_ops.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(KEYCTL_SUPPORTS_ENCRYPT) || (defined(HAVE_DECL_KEYCTL_SUPPORTS_ENCRYPT) && HAVE_DECL_KEYCTL_SUPPORTS_ENCRYPT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEYCTL_SUPPORTS_ENCRYPT) == (0x01), "KEYCTL_SUPPORTS_ENCRYPT != 0x01");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEYCTL_SUPPORTS_ENCRYPT 0x01
#endif
#if defined(KEYCTL_SUPPORTS_DECRYPT) || (defined(HAVE_DECL_KEYCTL_SUPPORTS_DECRYPT) && HAVE_DECL_KEYCTL_SUPPORTS_DECRYPT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEYCTL_SUPPORTS_DECRYPT) == (0x02), "KEYCTL_SUPPORTS_DECRYPT != 0x02");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEYCTL_SUPPORTS_DECRYPT 0x02
#endif
#if defined(KEYCTL_SUPPORTS_SIGN) || (defined(HAVE_DECL_KEYCTL_SUPPORTS_SIGN) && HAVE_DECL_KEYCTL_SUPPORTS_SIGN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEYCTL_SUPPORTS_SIGN) == (0x04), "KEYCTL_SUPPORTS_SIGN != 0x04");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEYCTL_SUPPORTS_SIGN 0x04
#endif
#if defined(KEYCTL_SUPPORTS_VERIFY) || (defined(HAVE_DECL_KEYCTL_SUPPORTS_VERIFY) && HAVE_DECL_KEYCTL_SUPPORTS_VERIFY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEYCTL_SUPPORTS_VERIFY) == (0x08), "KEYCTL_SUPPORTS_VERIFY != 0x08");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEYCTL_SUPPORTS_VERIFY 0x08
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat keyctl_pkey_ops in mpers mode

# else

static const struct xlat_data keyctl_pkey_ops_xdata[] = {
 XLAT(KEYCTL_SUPPORTS_ENCRYPT),
 XLAT(KEYCTL_SUPPORTS_DECRYPT),
 XLAT(KEYCTL_SUPPORTS_SIGN),
 XLAT(KEYCTL_SUPPORTS_VERIFY),
};
static
const struct xlat keyctl_pkey_ops[1] = { {
 .data = keyctl_pkey_ops_xdata,
 .size = ARRAY_SIZE(keyctl_pkey_ops_xdata),
 .type = XT_NORMAL,
} };

# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
