/* Generated by ./xlat/gen.sh from ./xlat/keyctl_caps0.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(KEYCTL_CAPS0_CAPABILITIES) || (defined(HAVE_DECL_KEYCTL_CAPS0_CAPABILITIES) && HAVE_DECL_KEYCTL_CAPS0_CAPABILITIES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEYCTL_CAPS0_CAPABILITIES) == (0x01), "KEYCTL_CAPS0_CAPABILITIES != 0x01");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEYCTL_CAPS0_CAPABILITIES 0x01
#endif
#if defined(KEYCTL_CAPS0_PERSISTENT_KEYRINGS) || (defined(HAVE_DECL_KEYCTL_CAPS0_PERSISTENT_KEYRINGS) && HAVE_DECL_KEYCTL_CAPS0_PERSISTENT_KEYRINGS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEYCTL_CAPS0_PERSISTENT_KEYRINGS) == (0x02), "KEYCTL_CAPS0_PERSISTENT_KEYRINGS != 0x02");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEYCTL_CAPS0_PERSISTENT_KEYRINGS 0x02
#endif
#if defined(KEYCTL_CAPS0_DIFFIE_HELLMAN) || (defined(HAVE_DECL_KEYCTL_CAPS0_DIFFIE_HELLMAN) && HAVE_DECL_KEYCTL_CAPS0_DIFFIE_HELLMAN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEYCTL_CAPS0_DIFFIE_HELLMAN) == (0x04), "KEYCTL_CAPS0_DIFFIE_HELLMAN != 0x04");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEYCTL_CAPS0_DIFFIE_HELLMAN 0x04
#endif
#if defined(KEYCTL_CAPS0_PUBLIC_KEY) || (defined(HAVE_DECL_KEYCTL_CAPS0_PUBLIC_KEY) && HAVE_DECL_KEYCTL_CAPS0_PUBLIC_KEY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEYCTL_CAPS0_PUBLIC_KEY) == (0x08), "KEYCTL_CAPS0_PUBLIC_KEY != 0x08");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEYCTL_CAPS0_PUBLIC_KEY 0x08
#endif
#if defined(KEYCTL_CAPS0_BIG_KEY) || (defined(HAVE_DECL_KEYCTL_CAPS0_BIG_KEY) && HAVE_DECL_KEYCTL_CAPS0_BIG_KEY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEYCTL_CAPS0_BIG_KEY) == (0x10), "KEYCTL_CAPS0_BIG_KEY != 0x10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEYCTL_CAPS0_BIG_KEY 0x10
#endif
#if defined(KEYCTL_CAPS0_INVALIDATE) || (defined(HAVE_DECL_KEYCTL_CAPS0_INVALIDATE) && HAVE_DECL_KEYCTL_CAPS0_INVALIDATE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEYCTL_CAPS0_INVALIDATE) == (0x20), "KEYCTL_CAPS0_INVALIDATE != 0x20");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEYCTL_CAPS0_INVALIDATE 0x20
#endif
#if defined(KEYCTL_CAPS0_RESTRICT_KEYRING) || (defined(HAVE_DECL_KEYCTL_CAPS0_RESTRICT_KEYRING) && HAVE_DECL_KEYCTL_CAPS0_RESTRICT_KEYRING)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEYCTL_CAPS0_RESTRICT_KEYRING) == (0x40), "KEYCTL_CAPS0_RESTRICT_KEYRING != 0x40");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEYCTL_CAPS0_RESTRICT_KEYRING 0x40
#endif
#if defined(KEYCTL_CAPS0_MOVE) || (defined(HAVE_DECL_KEYCTL_CAPS0_MOVE) && HAVE_DECL_KEYCTL_CAPS0_MOVE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KEYCTL_CAPS0_MOVE) == (0x80), "KEYCTL_CAPS0_MOVE != 0x80");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KEYCTL_CAPS0_MOVE 0x80
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat keyctl_caps0 in mpers mode

# else

static const struct xlat_data keyctl_caps0_xdata[] = {
 XLAT(KEYCTL_CAPS0_CAPABILITIES),
 XLAT(KEYCTL_CAPS0_PERSISTENT_KEYRINGS),
 XLAT(KEYCTL_CAPS0_DIFFIE_HELLMAN),
 XLAT(KEYCTL_CAPS0_PUBLIC_KEY),
 XLAT(KEYCTL_CAPS0_BIG_KEY),
 XLAT(KEYCTL_CAPS0_INVALIDATE),
 XLAT(KEYCTL_CAPS0_RESTRICT_KEYRING),
 XLAT(KEYCTL_CAPS0_MOVE),
};
static
const struct xlat keyctl_caps0[1] = { {
 .data = keyctl_caps0_xdata,
 .size = ARRAY_SIZE(keyctl_caps0_xdata),
 .type = XT_NORMAL,
} };

# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
