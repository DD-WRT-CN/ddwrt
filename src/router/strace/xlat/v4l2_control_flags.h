/* Generated by ./xlat/gen.sh from ./xlat/v4l2_control_flags.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(V4L2_CTRL_FLAG_DISABLED) || (defined(HAVE_DECL_V4L2_CTRL_FLAG_DISABLED) && HAVE_DECL_V4L2_CTRL_FLAG_DISABLED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_CTRL_FLAG_DISABLED) == (0x0001), "V4L2_CTRL_FLAG_DISABLED != 0x0001");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define V4L2_CTRL_FLAG_DISABLED 0x0001
#endif
#if defined(V4L2_CTRL_FLAG_GRABBED) || (defined(HAVE_DECL_V4L2_CTRL_FLAG_GRABBED) && HAVE_DECL_V4L2_CTRL_FLAG_GRABBED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_CTRL_FLAG_GRABBED) == (0x0002), "V4L2_CTRL_FLAG_GRABBED != 0x0002");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define V4L2_CTRL_FLAG_GRABBED 0x0002
#endif
#if defined(V4L2_CTRL_FLAG_READ_ONLY) || (defined(HAVE_DECL_V4L2_CTRL_FLAG_READ_ONLY) && HAVE_DECL_V4L2_CTRL_FLAG_READ_ONLY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_CTRL_FLAG_READ_ONLY) == (0x0004), "V4L2_CTRL_FLAG_READ_ONLY != 0x0004");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define V4L2_CTRL_FLAG_READ_ONLY 0x0004
#endif
#if defined(V4L2_CTRL_FLAG_UPDATE) || (defined(HAVE_DECL_V4L2_CTRL_FLAG_UPDATE) && HAVE_DECL_V4L2_CTRL_FLAG_UPDATE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_CTRL_FLAG_UPDATE) == (0x0008), "V4L2_CTRL_FLAG_UPDATE != 0x0008");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define V4L2_CTRL_FLAG_UPDATE 0x0008
#endif
#if defined(V4L2_CTRL_FLAG_INACTIVE) || (defined(HAVE_DECL_V4L2_CTRL_FLAG_INACTIVE) && HAVE_DECL_V4L2_CTRL_FLAG_INACTIVE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_CTRL_FLAG_INACTIVE) == (0x0010), "V4L2_CTRL_FLAG_INACTIVE != 0x0010");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define V4L2_CTRL_FLAG_INACTIVE 0x0010
#endif
#if defined(V4L2_CTRL_FLAG_SLIDER) || (defined(HAVE_DECL_V4L2_CTRL_FLAG_SLIDER) && HAVE_DECL_V4L2_CTRL_FLAG_SLIDER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_CTRL_FLAG_SLIDER) == (0x0020), "V4L2_CTRL_FLAG_SLIDER != 0x0020");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define V4L2_CTRL_FLAG_SLIDER 0x0020
#endif
#if defined(V4L2_CTRL_FLAG_WRITE_ONLY) || (defined(HAVE_DECL_V4L2_CTRL_FLAG_WRITE_ONLY) && HAVE_DECL_V4L2_CTRL_FLAG_WRITE_ONLY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_CTRL_FLAG_WRITE_ONLY) == (0x0040), "V4L2_CTRL_FLAG_WRITE_ONLY != 0x0040");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define V4L2_CTRL_FLAG_WRITE_ONLY 0x0040
#endif
#if defined(V4L2_CTRL_FLAG_VOLATILE) || (defined(HAVE_DECL_V4L2_CTRL_FLAG_VOLATILE) && HAVE_DECL_V4L2_CTRL_FLAG_VOLATILE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_CTRL_FLAG_VOLATILE) == (0x0080), "V4L2_CTRL_FLAG_VOLATILE != 0x0080");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define V4L2_CTRL_FLAG_VOLATILE 0x0080
#endif
#if defined(V4L2_CTRL_FLAG_HAS_PAYLOAD) || (defined(HAVE_DECL_V4L2_CTRL_FLAG_HAS_PAYLOAD) && HAVE_DECL_V4L2_CTRL_FLAG_HAS_PAYLOAD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_CTRL_FLAG_HAS_PAYLOAD) == (0x0100), "V4L2_CTRL_FLAG_HAS_PAYLOAD != 0x0100");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define V4L2_CTRL_FLAG_HAS_PAYLOAD 0x0100
#endif
#if defined(V4L2_CTRL_FLAG_EXECUTE_ON_WRITE) || (defined(HAVE_DECL_V4L2_CTRL_FLAG_EXECUTE_ON_WRITE) && HAVE_DECL_V4L2_CTRL_FLAG_EXECUTE_ON_WRITE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_CTRL_FLAG_EXECUTE_ON_WRITE) == (0x0200), "V4L2_CTRL_FLAG_EXECUTE_ON_WRITE != 0x0200");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define V4L2_CTRL_FLAG_EXECUTE_ON_WRITE 0x0200
#endif
#if defined(V4L2_CTRL_FLAG_MODIFY_LAYOUT) || (defined(HAVE_DECL_V4L2_CTRL_FLAG_MODIFY_LAYOUT) && HAVE_DECL_V4L2_CTRL_FLAG_MODIFY_LAYOUT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_CTRL_FLAG_MODIFY_LAYOUT) == (0x0400), "V4L2_CTRL_FLAG_MODIFY_LAYOUT != 0x0400");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define V4L2_CTRL_FLAG_MODIFY_LAYOUT 0x0400
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

extern const struct xlat v4l2_control_flags[];

# else

static const struct xlat_data v4l2_control_flags_xdata[] = {
 XLAT(V4L2_CTRL_FLAG_DISABLED),
 XLAT(V4L2_CTRL_FLAG_GRABBED),
 XLAT(V4L2_CTRL_FLAG_READ_ONLY),
 XLAT(V4L2_CTRL_FLAG_UPDATE),
 XLAT(V4L2_CTRL_FLAG_INACTIVE),
 XLAT(V4L2_CTRL_FLAG_SLIDER),
 XLAT(V4L2_CTRL_FLAG_WRITE_ONLY),
 XLAT(V4L2_CTRL_FLAG_VOLATILE),
 XLAT(V4L2_CTRL_FLAG_HAS_PAYLOAD),
 XLAT(V4L2_CTRL_FLAG_EXECUTE_ON_WRITE),
 XLAT(V4L2_CTRL_FLAG_MODIFY_LAYOUT),
};
#  if !(defined HAVE_M32_MPERS || defined HAVE_MX32_MPERS)
static
#  endif
const struct xlat v4l2_control_flags[1] = { {
 .data = v4l2_control_flags_xdata,
 .size = ARRAY_SIZE(v4l2_control_flags_xdata),
 .type = XT_NORMAL,
} };

# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
