/* Generated by ./xlat/gen.sh from ./xlat/ptp_extts_flags.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(PTP_ENABLE_FEATURE) || (defined(HAVE_DECL_PTP_ENABLE_FEATURE) && HAVE_DECL_PTP_ENABLE_FEATURE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PTP_ENABLE_FEATURE) == ((1<<0)), "PTP_ENABLE_FEATURE != (1<<0)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PTP_ENABLE_FEATURE (1<<0)
#endif
#if defined(PTP_RISING_EDGE) || (defined(HAVE_DECL_PTP_RISING_EDGE) && HAVE_DECL_PTP_RISING_EDGE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PTP_RISING_EDGE) == ((1<<1)), "PTP_RISING_EDGE != (1<<1)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PTP_RISING_EDGE (1<<1)
#endif
#if defined(PTP_FALLING_EDGE) || (defined(HAVE_DECL_PTP_FALLING_EDGE) && HAVE_DECL_PTP_FALLING_EDGE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PTP_FALLING_EDGE) == ((1<<2)), "PTP_FALLING_EDGE != (1<<2)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PTP_FALLING_EDGE (1<<2)
#endif
#if defined(PTP_STRICT_FLAGS) || (defined(HAVE_DECL_PTP_STRICT_FLAGS) && HAVE_DECL_PTP_STRICT_FLAGS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PTP_STRICT_FLAGS) == ((1<<3)), "PTP_STRICT_FLAGS != (1<<3)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PTP_STRICT_FLAGS (1<<3)
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat ptp_extts_flags in mpers mode

# else

static const struct xlat_data ptp_extts_flags_xdata[] = {
 XLAT(PTP_ENABLE_FEATURE),
 XLAT(PTP_RISING_EDGE),
 XLAT(PTP_FALLING_EDGE),
 XLAT(PTP_STRICT_FLAGS),
};
static
const struct xlat ptp_extts_flags[1] = { {
 .data = ptp_extts_flags_xdata,
 .size = ARRAY_SIZE(ptp_extts_flags_xdata),
 .type = XT_NORMAL,
} };

# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
