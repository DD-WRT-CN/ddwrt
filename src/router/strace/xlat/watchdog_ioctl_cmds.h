/* Generated by ./xlat/gen.sh from ./xlat/watchdog_ioctl_cmds.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(WDIOC_GETSTATUS) || (defined(HAVE_DECL_WDIOC_GETSTATUS) && HAVE_DECL_WDIOC_GETSTATUS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((WDIOC_GETSTATUS) == (_IOR('W', 1, int)), "WDIOC_GETSTATUS != _IOR('W', 1, int)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define WDIOC_GETSTATUS _IOR('W', 1, int)
#endif
#if defined(WDIOC_GETBOOTSTATUS) || (defined(HAVE_DECL_WDIOC_GETBOOTSTATUS) && HAVE_DECL_WDIOC_GETBOOTSTATUS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((WDIOC_GETBOOTSTATUS) == (_IOR('W', 2, int)), "WDIOC_GETBOOTSTATUS != _IOR('W', 2, int)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define WDIOC_GETBOOTSTATUS _IOR('W', 2, int)
#endif
#if defined(WDIOC_GETTEMP) || (defined(HAVE_DECL_WDIOC_GETTEMP) && HAVE_DECL_WDIOC_GETTEMP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((WDIOC_GETTEMP) == (_IOR('W', 3, int)), "WDIOC_GETTEMP != _IOR('W', 3, int)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define WDIOC_GETTEMP _IOR('W', 3, int)
#endif
#if defined(WDIOC_GETTIMEOUT) || (defined(HAVE_DECL_WDIOC_GETTIMEOUT) && HAVE_DECL_WDIOC_GETTIMEOUT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((WDIOC_GETTIMEOUT) == (_IOR('W', 7, int)), "WDIOC_GETTIMEOUT != _IOR('W', 7, int)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define WDIOC_GETTIMEOUT _IOR('W', 7, int)
#endif
#if defined(WDIOC_GETPRETIMEOUT) || (defined(HAVE_DECL_WDIOC_GETPRETIMEOUT) && HAVE_DECL_WDIOC_GETPRETIMEOUT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((WDIOC_GETPRETIMEOUT) == (_IOR('W', 9, int)), "WDIOC_GETPRETIMEOUT != _IOR('W', 9, int)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define WDIOC_GETPRETIMEOUT _IOR('W', 9, int)
#endif
#if defined(WDIOC_GETTIMELEFT) || (defined(HAVE_DECL_WDIOC_GETTIMELEFT) && HAVE_DECL_WDIOC_GETTIMELEFT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((WDIOC_GETTIMELEFT) == (_IOR('W', 10, int)), "WDIOC_GETTIMELEFT != _IOR('W', 10, int)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define WDIOC_GETTIMELEFT _IOR('W', 10, int)
#endif
#if defined(WDIOC_SETOPTIONS) || (defined(HAVE_DECL_WDIOC_SETOPTIONS) && HAVE_DECL_WDIOC_SETOPTIONS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((WDIOC_SETOPTIONS) == (_IOR('W', 4, int)), "WDIOC_SETOPTIONS != _IOR('W', 4, int)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define WDIOC_SETOPTIONS _IOR('W', 4, int)
#endif
#if defined(WDIOC_KEEPALIVE) || (defined(HAVE_DECL_WDIOC_KEEPALIVE) && HAVE_DECL_WDIOC_KEEPALIVE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((WDIOC_KEEPALIVE) == (_IOR('W', 5, int)), "WDIOC_KEEPALIVE != _IOR('W', 5, int)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define WDIOC_KEEPALIVE _IOR('W', 5, int)
#endif
#if defined(WDIOC_SETTIMEOUT) || (defined(HAVE_DECL_WDIOC_SETTIMEOUT) && HAVE_DECL_WDIOC_SETTIMEOUT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((WDIOC_SETTIMEOUT) == (_IOWR('W', 6, int)), "WDIOC_SETTIMEOUT != _IOWR('W', 6, int)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define WDIOC_SETTIMEOUT _IOWR('W', 6, int)
#endif
#if defined(WDIOC_SETPRETIMEOUT) || (defined(HAVE_DECL_WDIOC_SETPRETIMEOUT) && HAVE_DECL_WDIOC_SETPRETIMEOUT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((WDIOC_SETPRETIMEOUT) == (_IOWR('W', 8, int)), "WDIOC_SETPRETIMEOUT != _IOWR('W', 8, int)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define WDIOC_SETPRETIMEOUT _IOWR('W', 8, int)
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat watchdog_ioctl_cmds in mpers mode

# else

static const struct xlat_data watchdog_ioctl_cmds_xdata[] = {
 XLAT(WDIOC_GETSTATUS),
 XLAT(WDIOC_GETBOOTSTATUS),
 XLAT(WDIOC_GETTEMP),
 XLAT(WDIOC_GETTIMEOUT),
 XLAT(WDIOC_GETPRETIMEOUT),
 XLAT(WDIOC_GETTIMELEFT),
 XLAT(WDIOC_SETOPTIONS),
 XLAT(WDIOC_KEEPALIVE),
 XLAT(WDIOC_SETTIMEOUT),
 XLAT(WDIOC_SETPRETIMEOUT),
};
static
const struct xlat watchdog_ioctl_cmds[1] = { {
 .data = watchdog_ioctl_cmds_xdata,
 .size = ARRAY_SIZE(watchdog_ioctl_cmds_xdata),
 .type = XT_NORMAL,
} };

# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
