/* Generated by ./xlat/gen.sh from ./xlat/evdev_ioctl_cmds.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(EVIOCGVERSION) || (defined(HAVE_DECL_EVIOCGVERSION) && HAVE_DECL_EVIOCGVERSION)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EVIOCGVERSION) == (_IOR('E', 0x01, int)), "EVIOCGVERSION != _IOR('E', 0x01, int)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EVIOCGVERSION _IOR('E', 0x01, int)
#endif
#if defined(EVIOCGID) || (defined(HAVE_DECL_EVIOCGID) && HAVE_DECL_EVIOCGID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EVIOCGID) == (_IOR('E', 0x02, struct input_id)), "EVIOCGID != _IOR('E', 0x02, struct input_id)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EVIOCGID _IOR('E', 0x02, struct input_id)
#endif
#if defined(EVIOCGREP) || (defined(HAVE_DECL_EVIOCGREP) && HAVE_DECL_EVIOCGREP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EVIOCGREP) == (_IOR('E', 0x03, unsigned int[2])), "EVIOCGREP != _IOR('E', 0x03, unsigned int[2])");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EVIOCGREP _IOR('E', 0x03, unsigned int[2])
#endif
#if defined(EVIOCSREP) || (defined(HAVE_DECL_EVIOCSREP) && HAVE_DECL_EVIOCSREP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EVIOCSREP) == (_IOW('E', 0x03, unsigned int[2])), "EVIOCSREP != _IOW('E', 0x03, unsigned int[2])");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EVIOCSREP _IOW('E', 0x03, unsigned int[2])
#endif
#if defined(EVIOCGKEYCODE) || (defined(HAVE_DECL_EVIOCGKEYCODE) && HAVE_DECL_EVIOCGKEYCODE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EVIOCGKEYCODE) == (_IOR('E', 0x04, unsigned int[2])), "EVIOCGKEYCODE != _IOR('E', 0x04, unsigned int[2])");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EVIOCGKEYCODE _IOR('E', 0x04, unsigned int[2])
#endif
#if defined(EVIOCGKEYCODE_V2) || (defined(HAVE_DECL_EVIOCGKEYCODE_V2) && HAVE_DECL_EVIOCGKEYCODE_V2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EVIOCGKEYCODE_V2) == (_IOR('E', 0x04, struct_input_keymap_entry)), "EVIOCGKEYCODE_V2 != _IOR('E', 0x04, struct_input_keymap_entry)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EVIOCGKEYCODE_V2 _IOR('E', 0x04, struct_input_keymap_entry)
#endif
#if defined(EVIOCSKEYCODE) || (defined(HAVE_DECL_EVIOCSKEYCODE) && HAVE_DECL_EVIOCSKEYCODE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EVIOCSKEYCODE) == (_IOW('E', 0x04, unsigned int[2])), "EVIOCSKEYCODE != _IOW('E', 0x04, unsigned int[2])");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EVIOCSKEYCODE _IOW('E', 0x04, unsigned int[2])
#endif
#if defined(EVIOCSKEYCODE_V2) || (defined(HAVE_DECL_EVIOCSKEYCODE_V2) && HAVE_DECL_EVIOCSKEYCODE_V2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EVIOCSKEYCODE_V2) == (_IOW('E', 0x04, struct_input_keymap_entry)), "EVIOCSKEYCODE_V2 != _IOW('E', 0x04, struct_input_keymap_entry)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EVIOCSKEYCODE_V2 _IOW('E', 0x04, struct_input_keymap_entry)
#endif
#if defined(EVIOCRMFF) || (defined(HAVE_DECL_EVIOCRMFF) && HAVE_DECL_EVIOCRMFF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EVIOCRMFF) == (_IOW('E', 0x81, int)), "EVIOCRMFF != _IOW('E', 0x81, int)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EVIOCRMFF _IOW('E', 0x81, int)
#endif
#if defined(EVIOCGEFFECTS) || (defined(HAVE_DECL_EVIOCGEFFECTS) && HAVE_DECL_EVIOCGEFFECTS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EVIOCGEFFECTS) == (_IOR('E', 0x84, int)), "EVIOCGEFFECTS != _IOR('E', 0x84, int)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EVIOCGEFFECTS _IOR('E', 0x84, int)
#endif
#if defined(EVIOCGRAB) || (defined(HAVE_DECL_EVIOCGRAB) && HAVE_DECL_EVIOCGRAB)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EVIOCGRAB) == (_IOW('E', 0x90, int)), "EVIOCGRAB != _IOW('E', 0x90, int)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EVIOCGRAB _IOW('E', 0x90, int)
#endif
#if defined(EVIOCREVOKE) || (defined(HAVE_DECL_EVIOCREVOKE) && HAVE_DECL_EVIOCREVOKE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EVIOCREVOKE) == (_IOW('E', 0x91, int)), "EVIOCREVOKE != _IOW('E', 0x91, int)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EVIOCREVOKE _IOW('E', 0x91, int)
#endif
#if defined(EVIOCGMASK) || (defined(HAVE_DECL_EVIOCGMASK) && HAVE_DECL_EVIOCGMASK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EVIOCGMASK) == (_IOR('E', 0x92, struct_input_mask)), "EVIOCGMASK != _IOR('E', 0x92, struct_input_mask)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EVIOCGMASK _IOR('E', 0x92, struct_input_mask)
#endif
#if defined(EVIOCSMASK) || (defined(HAVE_DECL_EVIOCSMASK) && HAVE_DECL_EVIOCSMASK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EVIOCSMASK) == (_IOW('E', 0x93, struct_input_mask)), "EVIOCSMASK != _IOW('E', 0x93, struct_input_mask)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EVIOCSMASK _IOW('E', 0x93, struct_input_mask)
#endif
#if defined(EVIOCSCLOCKID) || (defined(HAVE_DECL_EVIOCSCLOCKID) && HAVE_DECL_EVIOCSCLOCKID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EVIOCSCLOCKID) == (_IOW('E', 0xa0, int)), "EVIOCSCLOCKID != _IOW('E', 0xa0, int)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EVIOCSCLOCKID _IOW('E', 0xa0, int)
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat evdev_ioctl_cmds in mpers mode

# else

static const struct xlat_data evdev_ioctl_cmds_xdata[] = {
 XLAT(EVIOCGVERSION),
 XLAT(EVIOCGID),
 XLAT(EVIOCGREP),
 XLAT(EVIOCSREP),
 XLAT(EVIOCGKEYCODE),
 XLAT(EVIOCGKEYCODE_V2),
 XLAT(EVIOCSKEYCODE),
 XLAT(EVIOCSKEYCODE_V2),


 XLAT(EVIOCRMFF),
 XLAT(EVIOCGEFFECTS),
 XLAT(EVIOCGRAB),
 XLAT(EVIOCREVOKE),
 XLAT(EVIOCGMASK),
 XLAT(EVIOCSMASK),
 XLAT(EVIOCSCLOCKID),
};
static
const struct xlat evdev_ioctl_cmds[1] = { {
 .data = evdev_ioctl_cmds_xdata,
 .size = ARRAY_SIZE(evdev_ioctl_cmds_xdata),
 .type = XT_NORMAL,
} };

# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
