/* Generated by ./xlat/gen.sh from ./xlat/elf_em.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(EM_NONE) || (defined(HAVE_DECL_EM_NONE) && HAVE_DECL_EM_NONE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_NONE) == (0), "EM_NONE != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_NONE 0
#endif
#if defined(EM_M32) || (defined(HAVE_DECL_EM_M32) && HAVE_DECL_EM_M32)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_M32) == (1), "EM_M32 != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_M32 1
#endif
#if defined(EM_SPARC) || (defined(HAVE_DECL_EM_SPARC) && HAVE_DECL_EM_SPARC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_SPARC) == (2), "EM_SPARC != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_SPARC 2
#endif
#if defined(EM_386) || (defined(HAVE_DECL_EM_386) && HAVE_DECL_EM_386)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_386) == (3), "EM_386 != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_386 3
#endif
#if defined(EM_68K) || (defined(HAVE_DECL_EM_68K) && HAVE_DECL_EM_68K)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_68K) == (4), "EM_68K != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_68K 4
#endif
#if defined(EM_88K) || (defined(HAVE_DECL_EM_88K) && HAVE_DECL_EM_88K)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_88K) == (5), "EM_88K != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_88K 5
#endif
#if defined(EM_486) || (defined(HAVE_DECL_EM_486) && HAVE_DECL_EM_486)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_486) == (6), "EM_486 != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_486 6
#endif
#if defined(EM_860) || (defined(HAVE_DECL_EM_860) && HAVE_DECL_EM_860)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_860) == (7), "EM_860 != 7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_860 7
#endif
#if defined(EM_MIPS) || (defined(HAVE_DECL_EM_MIPS) && HAVE_DECL_EM_MIPS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_MIPS) == (8), "EM_MIPS != 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_MIPS 8
#endif
#if defined(EM_S370) || (defined(HAVE_DECL_EM_S370) && HAVE_DECL_EM_S370)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_S370) == (9), "EM_S370 != 9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_S370 9
#endif
#if defined(EM_MIPS_RS3_LE) || (defined(HAVE_DECL_EM_MIPS_RS3_LE) && HAVE_DECL_EM_MIPS_RS3_LE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_MIPS_RS3_LE) == (10), "EM_MIPS_RS3_LE != 10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_MIPS_RS3_LE 10
#endif
#if defined(EM_PARISC) || (defined(HAVE_DECL_EM_PARISC) && HAVE_DECL_EM_PARISC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_PARISC) == (15), "EM_PARISC != 15");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_PARISC 15
#endif
#if defined(EM_VPP500) || (defined(HAVE_DECL_EM_VPP500) && HAVE_DECL_EM_VPP500)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_VPP500) == (17), "EM_VPP500 != 17");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_VPP500 17
#endif
#if defined(EM_SPARC32PLUS) || (defined(HAVE_DECL_EM_SPARC32PLUS) && HAVE_DECL_EM_SPARC32PLUS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_SPARC32PLUS) == (18), "EM_SPARC32PLUS != 18");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_SPARC32PLUS 18
#endif
#if defined(EM_960) || (defined(HAVE_DECL_EM_960) && HAVE_DECL_EM_960)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_960) == (19), "EM_960 != 19");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_960 19
#endif
#if defined(EM_PPC) || (defined(HAVE_DECL_EM_PPC) && HAVE_DECL_EM_PPC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_PPC) == (20), "EM_PPC != 20");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_PPC 20
#endif
#if defined(EM_PPC64) || (defined(HAVE_DECL_EM_PPC64) && HAVE_DECL_EM_PPC64)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_PPC64) == (21), "EM_PPC64 != 21");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_PPC64 21
#endif
#if defined(EM_S390) || (defined(HAVE_DECL_EM_S390) && HAVE_DECL_EM_S390)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_S390) == (22), "EM_S390 != 22");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_S390 22
#endif
#if defined(EM_SPU) || (defined(HAVE_DECL_EM_SPU) && HAVE_DECL_EM_SPU)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_SPU) == (23), "EM_SPU != 23");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_SPU 23
#endif
#if defined(EM_V800) || (defined(HAVE_DECL_EM_V800) && HAVE_DECL_EM_V800)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_V800) == (36), "EM_V800 != 36");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_V800 36
#endif
#if defined(EM_FR20) || (defined(HAVE_DECL_EM_FR20) && HAVE_DECL_EM_FR20)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_FR20) == (37), "EM_FR20 != 37");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_FR20 37
#endif
#if defined(EM_RH32) || (defined(HAVE_DECL_EM_RH32) && HAVE_DECL_EM_RH32)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_RH32) == (38), "EM_RH32 != 38");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_RH32 38
#endif
#if defined(EM_RCE) || (defined(HAVE_DECL_EM_RCE) && HAVE_DECL_EM_RCE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_RCE) == (39), "EM_RCE != 39");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_RCE 39
#endif
#if defined(EM_ARM) || (defined(HAVE_DECL_EM_ARM) && HAVE_DECL_EM_ARM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_ARM) == (40), "EM_ARM != 40");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_ARM 40
#endif
#if defined(EM_SH) || (defined(HAVE_DECL_EM_SH) && HAVE_DECL_EM_SH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_SH) == (42), "EM_SH != 42");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_SH 42
#endif
#if defined(EM_SPARCV9) || (defined(HAVE_DECL_EM_SPARCV9) && HAVE_DECL_EM_SPARCV9)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_SPARCV9) == (43), "EM_SPARCV9 != 43");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_SPARCV9 43
#endif
#if defined(EM_TRICORE) || (defined(HAVE_DECL_EM_TRICORE) && HAVE_DECL_EM_TRICORE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_TRICORE) == (44), "EM_TRICORE != 44");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_TRICORE 44
#endif
#if defined(EM_ARC) || (defined(HAVE_DECL_EM_ARC) && HAVE_DECL_EM_ARC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_ARC) == (45), "EM_ARC != 45");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_ARC 45
#endif
#if defined(EM_H8_300) || (defined(HAVE_DECL_EM_H8_300) && HAVE_DECL_EM_H8_300)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_H8_300) == (46), "EM_H8_300 != 46");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_H8_300 46
#endif
#if defined(EM_H8_300H) || (defined(HAVE_DECL_EM_H8_300H) && HAVE_DECL_EM_H8_300H)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_H8_300H) == (47), "EM_H8_300H != 47");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_H8_300H 47
#endif
#if defined(EM_H8S) || (defined(HAVE_DECL_EM_H8S) && HAVE_DECL_EM_H8S)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_H8S) == (48), "EM_H8S != 48");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_H8S 48
#endif
#if defined(EM_H8_500) || (defined(HAVE_DECL_EM_H8_500) && HAVE_DECL_EM_H8_500)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_H8_500) == (49), "EM_H8_500 != 49");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_H8_500 49
#endif
#if defined(EM_IA_64) || (defined(HAVE_DECL_EM_IA_64) && HAVE_DECL_EM_IA_64)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_IA_64) == (50), "EM_IA_64 != 50");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_IA_64 50
#endif
#if defined(EM_MIPS_X) || (defined(HAVE_DECL_EM_MIPS_X) && HAVE_DECL_EM_MIPS_X)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_MIPS_X) == (51), "EM_MIPS_X != 51");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_MIPS_X 51
#endif
#if defined(EM_COLDFIRE) || (defined(HAVE_DECL_EM_COLDFIRE) && HAVE_DECL_EM_COLDFIRE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_COLDFIRE) == (52), "EM_COLDFIRE != 52");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_COLDFIRE 52
#endif
#if defined(EM_68HC12) || (defined(HAVE_DECL_EM_68HC12) && HAVE_DECL_EM_68HC12)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_68HC12) == (53), "EM_68HC12 != 53");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_68HC12 53
#endif
#if defined(EM_MMA) || (defined(HAVE_DECL_EM_MMA) && HAVE_DECL_EM_MMA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_MMA) == (54), "EM_MMA != 54");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_MMA 54
#endif
#if defined(EM_PCP) || (defined(HAVE_DECL_EM_PCP) && HAVE_DECL_EM_PCP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_PCP) == (55), "EM_PCP != 55");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_PCP 55
#endif
#if defined(EM_NCPU) || (defined(HAVE_DECL_EM_NCPU) && HAVE_DECL_EM_NCPU)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_NCPU) == (56), "EM_NCPU != 56");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_NCPU 56
#endif
#if defined(EM_NDR1) || (defined(HAVE_DECL_EM_NDR1) && HAVE_DECL_EM_NDR1)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_NDR1) == (57), "EM_NDR1 != 57");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_NDR1 57
#endif
#if defined(EM_STARCORE) || (defined(HAVE_DECL_EM_STARCORE) && HAVE_DECL_EM_STARCORE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_STARCORE) == (58), "EM_STARCORE != 58");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_STARCORE 58
#endif
#if defined(EM_ME16) || (defined(HAVE_DECL_EM_ME16) && HAVE_DECL_EM_ME16)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_ME16) == (59), "EM_ME16 != 59");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_ME16 59
#endif
#if defined(EM_ST100) || (defined(HAVE_DECL_EM_ST100) && HAVE_DECL_EM_ST100)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_ST100) == (60), "EM_ST100 != 60");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_ST100 60
#endif
#if defined(EM_TINYJ) || (defined(HAVE_DECL_EM_TINYJ) && HAVE_DECL_EM_TINYJ)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_TINYJ) == (61), "EM_TINYJ != 61");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_TINYJ 61
#endif
#if defined(EM_X86_64) || (defined(HAVE_DECL_EM_X86_64) && HAVE_DECL_EM_X86_64)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_X86_64) == (62), "EM_X86_64 != 62");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_X86_64 62
#endif
#if defined(EM_PDSP) || (defined(HAVE_DECL_EM_PDSP) && HAVE_DECL_EM_PDSP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_PDSP) == (63), "EM_PDSP != 63");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_PDSP 63
#endif
#if defined(EM_PDP10) || (defined(HAVE_DECL_EM_PDP10) && HAVE_DECL_EM_PDP10)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_PDP10) == (64), "EM_PDP10 != 64");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_PDP10 64
#endif
#if defined(EM_PDP11) || (defined(HAVE_DECL_EM_PDP11) && HAVE_DECL_EM_PDP11)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_PDP11) == (65), "EM_PDP11 != 65");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_PDP11 65
#endif
#if defined(EM_FX66) || (defined(HAVE_DECL_EM_FX66) && HAVE_DECL_EM_FX66)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_FX66) == (66), "EM_FX66 != 66");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_FX66 66
#endif
#if defined(EM_ST9PLUS) || (defined(HAVE_DECL_EM_ST9PLUS) && HAVE_DECL_EM_ST9PLUS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_ST9PLUS) == (67), "EM_ST9PLUS != 67");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_ST9PLUS 67
#endif
#if defined(EM_ST7) || (defined(HAVE_DECL_EM_ST7) && HAVE_DECL_EM_ST7)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_ST7) == (68), "EM_ST7 != 68");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_ST7 68
#endif
#if defined(EM_68HC16) || (defined(HAVE_DECL_EM_68HC16) && HAVE_DECL_EM_68HC16)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_68HC16) == (69), "EM_68HC16 != 69");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_68HC16 69
#endif
#if defined(EM_68HC11) || (defined(HAVE_DECL_EM_68HC11) && HAVE_DECL_EM_68HC11)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_68HC11) == (70), "EM_68HC11 != 70");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_68HC11 70
#endif
#if defined(EM_68HC08) || (defined(HAVE_DECL_EM_68HC08) && HAVE_DECL_EM_68HC08)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_68HC08) == (71), "EM_68HC08 != 71");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_68HC08 71
#endif
#if defined(EM_68HC05) || (defined(HAVE_DECL_EM_68HC05) && HAVE_DECL_EM_68HC05)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_68HC05) == (72), "EM_68HC05 != 72");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_68HC05 72
#endif
#if defined(EM_SVX) || (defined(HAVE_DECL_EM_SVX) && HAVE_DECL_EM_SVX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_SVX) == (73), "EM_SVX != 73");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_SVX 73
#endif
#if defined(EM_ST19) || (defined(HAVE_DECL_EM_ST19) && HAVE_DECL_EM_ST19)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_ST19) == (74), "EM_ST19 != 74");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_ST19 74
#endif
#if defined(EM_VAX) || (defined(HAVE_DECL_EM_VAX) && HAVE_DECL_EM_VAX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_VAX) == (75), "EM_VAX != 75");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_VAX 75
#endif
#if defined(EM_CRIS) || (defined(HAVE_DECL_EM_CRIS) && HAVE_DECL_EM_CRIS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_CRIS) == (76), "EM_CRIS != 76");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_CRIS 76
#endif
#if defined(EM_JAVELIN) || (defined(HAVE_DECL_EM_JAVELIN) && HAVE_DECL_EM_JAVELIN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_JAVELIN) == (77), "EM_JAVELIN != 77");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_JAVELIN 77
#endif
#if defined(EM_FIREPATH) || (defined(HAVE_DECL_EM_FIREPATH) && HAVE_DECL_EM_FIREPATH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_FIREPATH) == (78), "EM_FIREPATH != 78");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_FIREPATH 78
#endif
#if defined(EM_ZSP) || (defined(HAVE_DECL_EM_ZSP) && HAVE_DECL_EM_ZSP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_ZSP) == (79), "EM_ZSP != 79");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_ZSP 79
#endif
#if defined(EM_MMIX) || (defined(HAVE_DECL_EM_MMIX) && HAVE_DECL_EM_MMIX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_MMIX) == (80), "EM_MMIX != 80");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_MMIX 80
#endif
#if defined(EM_HUANY) || (defined(HAVE_DECL_EM_HUANY) && HAVE_DECL_EM_HUANY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_HUANY) == (81), "EM_HUANY != 81");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_HUANY 81
#endif
#if defined(EM_PRISM) || (defined(HAVE_DECL_EM_PRISM) && HAVE_DECL_EM_PRISM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_PRISM) == (82), "EM_PRISM != 82");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_PRISM 82
#endif
#if defined(EM_AVR) || (defined(HAVE_DECL_EM_AVR) && HAVE_DECL_EM_AVR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_AVR) == (83), "EM_AVR != 83");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_AVR 83
#endif
#if defined(EM_FR30) || (defined(HAVE_DECL_EM_FR30) && HAVE_DECL_EM_FR30)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_FR30) == (84), "EM_FR30 != 84");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_FR30 84
#endif
#if defined(EM_D10V) || (defined(HAVE_DECL_EM_D10V) && HAVE_DECL_EM_D10V)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_D10V) == (85), "EM_D10V != 85");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_D10V 85
#endif
#if defined(EM_D30V) || (defined(HAVE_DECL_EM_D30V) && HAVE_DECL_EM_D30V)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_D30V) == (86), "EM_D30V != 86");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_D30V 86
#endif
#if defined(EM_V850) || (defined(HAVE_DECL_EM_V850) && HAVE_DECL_EM_V850)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_V850) == (87), "EM_V850 != 87");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_V850 87
#endif
#if defined(EM_M32R) || (defined(HAVE_DECL_EM_M32R) && HAVE_DECL_EM_M32R)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_M32R) == (88), "EM_M32R != 88");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_M32R 88
#endif
#if defined(EM_MN10300) || (defined(HAVE_DECL_EM_MN10300) && HAVE_DECL_EM_MN10300)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_MN10300) == (89), "EM_MN10300 != 89");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_MN10300 89
#endif
#if defined(EM_MN10200) || (defined(HAVE_DECL_EM_MN10200) && HAVE_DECL_EM_MN10200)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_MN10200) == (90), "EM_MN10200 != 90");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_MN10200 90
#endif
#if defined(EM_PJ) || (defined(HAVE_DECL_EM_PJ) && HAVE_DECL_EM_PJ)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_PJ) == (91), "EM_PJ != 91");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_PJ 91
#endif
#if defined(EM_OPENRISC) || (defined(HAVE_DECL_EM_OPENRISC) && HAVE_DECL_EM_OPENRISC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_OPENRISC) == (92), "EM_OPENRISC != 92");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_OPENRISC 92
#endif
#if defined(EM_ARCOMPACT) || (defined(HAVE_DECL_EM_ARCOMPACT) && HAVE_DECL_EM_ARCOMPACT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_ARCOMPACT) == (93), "EM_ARCOMPACT != 93");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_ARCOMPACT 93
#endif
#if defined(EM_XTENSA) || (defined(HAVE_DECL_EM_XTENSA) && HAVE_DECL_EM_XTENSA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_XTENSA) == (94), "EM_XTENSA != 94");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_XTENSA 94
#endif
#if defined(EM_VIDEOCORE) || (defined(HAVE_DECL_EM_VIDEOCORE) && HAVE_DECL_EM_VIDEOCORE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_VIDEOCORE) == (95), "EM_VIDEOCORE != 95");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_VIDEOCORE 95
#endif
#if defined(EM_TMM_GPP) || (defined(HAVE_DECL_EM_TMM_GPP) && HAVE_DECL_EM_TMM_GPP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_TMM_GPP) == (96), "EM_TMM_GPP != 96");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_TMM_GPP 96
#endif
#if defined(EM_NS32K) || (defined(HAVE_DECL_EM_NS32K) && HAVE_DECL_EM_NS32K)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_NS32K) == (97), "EM_NS32K != 97");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_NS32K 97
#endif
#if defined(EM_TPC) || (defined(HAVE_DECL_EM_TPC) && HAVE_DECL_EM_TPC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_TPC) == (98), "EM_TPC != 98");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_TPC 98
#endif
#if defined(EM_SNP1K) || (defined(HAVE_DECL_EM_SNP1K) && HAVE_DECL_EM_SNP1K)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_SNP1K) == (99), "EM_SNP1K != 99");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_SNP1K 99
#endif
#if defined(EM_ST200) || (defined(HAVE_DECL_EM_ST200) && HAVE_DECL_EM_ST200)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_ST200) == (100), "EM_ST200 != 100");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_ST200 100
#endif
#if defined(EM_IP2K) || (defined(HAVE_DECL_EM_IP2K) && HAVE_DECL_EM_IP2K)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_IP2K) == (101), "EM_IP2K != 101");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_IP2K 101
#endif
#if defined(EM_MAX) || (defined(HAVE_DECL_EM_MAX) && HAVE_DECL_EM_MAX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_MAX) == (102), "EM_MAX != 102");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_MAX 102
#endif
#if defined(EM_CR) || (defined(HAVE_DECL_EM_CR) && HAVE_DECL_EM_CR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_CR) == (103), "EM_CR != 103");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_CR 103
#endif
#if defined(EM_F2MC16) || (defined(HAVE_DECL_EM_F2MC16) && HAVE_DECL_EM_F2MC16)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_F2MC16) == (104), "EM_F2MC16 != 104");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_F2MC16 104
#endif
#if defined(EM_MSP430) || (defined(HAVE_DECL_EM_MSP430) && HAVE_DECL_EM_MSP430)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_MSP430) == (105), "EM_MSP430 != 105");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_MSP430 105
#endif
#if defined(EM_BLACKFIN) || (defined(HAVE_DECL_EM_BLACKFIN) && HAVE_DECL_EM_BLACKFIN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_BLACKFIN) == (106), "EM_BLACKFIN != 106");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_BLACKFIN 106
#endif
#if defined(EM_SE_C33) || (defined(HAVE_DECL_EM_SE_C33) && HAVE_DECL_EM_SE_C33)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_SE_C33) == (107), "EM_SE_C33 != 107");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_SE_C33 107
#endif
#if defined(EM_SEP) || (defined(HAVE_DECL_EM_SEP) && HAVE_DECL_EM_SEP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_SEP) == (108), "EM_SEP != 108");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_SEP 108
#endif
#if defined(EM_ARCA) || (defined(HAVE_DECL_EM_ARCA) && HAVE_DECL_EM_ARCA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_ARCA) == (109), "EM_ARCA != 109");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_ARCA 109
#endif
#if defined(EM_UNICORE) || (defined(HAVE_DECL_EM_UNICORE) && HAVE_DECL_EM_UNICORE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_UNICORE) == (110), "EM_UNICORE != 110");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_UNICORE 110
#endif
#if defined(EM_EXCESS) || (defined(HAVE_DECL_EM_EXCESS) && HAVE_DECL_EM_EXCESS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_EXCESS) == (111), "EM_EXCESS != 111");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_EXCESS 111
#endif
#if defined(EM_DXP) || (defined(HAVE_DECL_EM_DXP) && HAVE_DECL_EM_DXP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_DXP) == (112), "EM_DXP != 112");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_DXP 112
#endif
#if defined(EM_ALTERA_NIOS2) || (defined(HAVE_DECL_EM_ALTERA_NIOS2) && HAVE_DECL_EM_ALTERA_NIOS2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_ALTERA_NIOS2) == (113), "EM_ALTERA_NIOS2 != 113");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_ALTERA_NIOS2 113
#endif
#if defined(EM_CRX) || (defined(HAVE_DECL_EM_CRX) && HAVE_DECL_EM_CRX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_CRX) == (114), "EM_CRX != 114");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_CRX 114
#endif
#if defined(EM_XGATE) || (defined(HAVE_DECL_EM_XGATE) && HAVE_DECL_EM_XGATE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_XGATE) == (115), "EM_XGATE != 115");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_XGATE 115
#endif
#if defined(EM_C166) || (defined(HAVE_DECL_EM_C166) && HAVE_DECL_EM_C166)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_C166) == (116), "EM_C166 != 116");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_C166 116
#endif
#if defined(EM_M16C) || (defined(HAVE_DECL_EM_M16C) && HAVE_DECL_EM_M16C)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_M16C) == (117), "EM_M16C != 117");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_M16C 117
#endif
#if defined(EM_DSPIC30F) || (defined(HAVE_DECL_EM_DSPIC30F) && HAVE_DECL_EM_DSPIC30F)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_DSPIC30F) == (118), "EM_DSPIC30F != 118");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_DSPIC30F 118
#endif
#if defined(EM_CE) || (defined(HAVE_DECL_EM_CE) && HAVE_DECL_EM_CE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_CE) == (119), "EM_CE != 119");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_CE 119
#endif
#if defined(EM_M32C) || (defined(HAVE_DECL_EM_M32C) && HAVE_DECL_EM_M32C)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_M32C) == (120), "EM_M32C != 120");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_M32C 120
#endif
#if defined(EM_TSK3000) || (defined(HAVE_DECL_EM_TSK3000) && HAVE_DECL_EM_TSK3000)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_TSK3000) == (131), "EM_TSK3000 != 131");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_TSK3000 131
#endif
#if defined(EM_RS08) || (defined(HAVE_DECL_EM_RS08) && HAVE_DECL_EM_RS08)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_RS08) == (132), "EM_RS08 != 132");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_RS08 132
#endif
#if defined(EM_SHARC) || (defined(HAVE_DECL_EM_SHARC) && HAVE_DECL_EM_SHARC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_SHARC) == (133), "EM_SHARC != 133");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_SHARC 133
#endif
#if defined(EM_ECOG2) || (defined(HAVE_DECL_EM_ECOG2) && HAVE_DECL_EM_ECOG2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_ECOG2) == (134), "EM_ECOG2 != 134");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_ECOG2 134
#endif
#if defined(EM_SCORE7) || (defined(HAVE_DECL_EM_SCORE7) && HAVE_DECL_EM_SCORE7)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_SCORE7) == (135), "EM_SCORE7 != 135");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_SCORE7 135
#endif
#if defined(EM_DSP24) || (defined(HAVE_DECL_EM_DSP24) && HAVE_DECL_EM_DSP24)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_DSP24) == (136), "EM_DSP24 != 136");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_DSP24 136
#endif
#if defined(EM_VIDEOCORE3) || (defined(HAVE_DECL_EM_VIDEOCORE3) && HAVE_DECL_EM_VIDEOCORE3)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_VIDEOCORE3) == (137), "EM_VIDEOCORE3 != 137");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_VIDEOCORE3 137
#endif
#if defined(EM_LATTICEMICO32) || (defined(HAVE_DECL_EM_LATTICEMICO32) && HAVE_DECL_EM_LATTICEMICO32)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_LATTICEMICO32) == (138), "EM_LATTICEMICO32 != 138");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_LATTICEMICO32 138
#endif
#if defined(EM_SE_C17) || (defined(HAVE_DECL_EM_SE_C17) && HAVE_DECL_EM_SE_C17)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_SE_C17) == (139), "EM_SE_C17 != 139");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_SE_C17 139
#endif
#if defined(EM_TI_C6000) || (defined(HAVE_DECL_EM_TI_C6000) && HAVE_DECL_EM_TI_C6000)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_TI_C6000) == (140), "EM_TI_C6000 != 140");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_TI_C6000 140
#endif
#if defined(EM_TI_C2000) || (defined(HAVE_DECL_EM_TI_C2000) && HAVE_DECL_EM_TI_C2000)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_TI_C2000) == (141), "EM_TI_C2000 != 141");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_TI_C2000 141
#endif
#if defined(EM_TI_C5500) || (defined(HAVE_DECL_EM_TI_C5500) && HAVE_DECL_EM_TI_C5500)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_TI_C5500) == (142), "EM_TI_C5500 != 142");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_TI_C5500 142
#endif
#if defined(EM_TI_ARP32) || (defined(HAVE_DECL_EM_TI_ARP32) && HAVE_DECL_EM_TI_ARP32)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_TI_ARP32) == (143), "EM_TI_ARP32 != 143");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_TI_ARP32 143
#endif
#if defined(EM_TI_PRU) || (defined(HAVE_DECL_EM_TI_PRU) && HAVE_DECL_EM_TI_PRU)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_TI_PRU) == (144), "EM_TI_PRU != 144");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_TI_PRU 144
#endif
#if defined(EM_MMDSP_PLUS) || (defined(HAVE_DECL_EM_MMDSP_PLUS) && HAVE_DECL_EM_MMDSP_PLUS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_MMDSP_PLUS) == (160), "EM_MMDSP_PLUS != 160");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_MMDSP_PLUS 160
#endif
#if defined(EM_CYPRESS_M8C) || (defined(HAVE_DECL_EM_CYPRESS_M8C) && HAVE_DECL_EM_CYPRESS_M8C)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_CYPRESS_M8C) == (161), "EM_CYPRESS_M8C != 161");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_CYPRESS_M8C 161
#endif
#if defined(EM_R32C) || (defined(HAVE_DECL_EM_R32C) && HAVE_DECL_EM_R32C)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_R32C) == (162), "EM_R32C != 162");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_R32C 162
#endif
#if defined(EM_TRIMEDIA) || (defined(HAVE_DECL_EM_TRIMEDIA) && HAVE_DECL_EM_TRIMEDIA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_TRIMEDIA) == (163), "EM_TRIMEDIA != 163");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_TRIMEDIA 163
#endif
#if defined(EM_HEXAGON) || (defined(HAVE_DECL_EM_HEXAGON) && HAVE_DECL_EM_HEXAGON)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_HEXAGON) == (164), "EM_HEXAGON != 164");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_HEXAGON 164
#endif
#if defined(EM_8051) || (defined(HAVE_DECL_EM_8051) && HAVE_DECL_EM_8051)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_8051) == (165), "EM_8051 != 165");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_8051 165
#endif
#if defined(EM_STXP7X) || (defined(HAVE_DECL_EM_STXP7X) && HAVE_DECL_EM_STXP7X)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_STXP7X) == (166), "EM_STXP7X != 166");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_STXP7X 166
#endif
#if defined(EM_NDS32) || (defined(HAVE_DECL_EM_NDS32) && HAVE_DECL_EM_NDS32)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_NDS32) == (167), "EM_NDS32 != 167");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_NDS32 167
#endif
#if defined(EM_ECOG1X) || (defined(HAVE_DECL_EM_ECOG1X) && HAVE_DECL_EM_ECOG1X)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_ECOG1X) == (168), "EM_ECOG1X != 168");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_ECOG1X 168
#endif
#if defined(EM_MAXQ30) || (defined(HAVE_DECL_EM_MAXQ30) && HAVE_DECL_EM_MAXQ30)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_MAXQ30) == (169), "EM_MAXQ30 != 169");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_MAXQ30 169
#endif
#if defined(EM_XIMO16) || (defined(HAVE_DECL_EM_XIMO16) && HAVE_DECL_EM_XIMO16)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_XIMO16) == (170), "EM_XIMO16 != 170");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_XIMO16 170
#endif
#if defined(EM_MANIK) || (defined(HAVE_DECL_EM_MANIK) && HAVE_DECL_EM_MANIK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_MANIK) == (171), "EM_MANIK != 171");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_MANIK 171
#endif
#if defined(EM_CRAYNV2) || (defined(HAVE_DECL_EM_CRAYNV2) && HAVE_DECL_EM_CRAYNV2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_CRAYNV2) == (172), "EM_CRAYNV2 != 172");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_CRAYNV2 172
#endif
#if defined(EM_RX) || (defined(HAVE_DECL_EM_RX) && HAVE_DECL_EM_RX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_RX) == (173), "EM_RX != 173");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_RX 173
#endif
#if defined(EM_METAG) || (defined(HAVE_DECL_EM_METAG) && HAVE_DECL_EM_METAG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_METAG) == (174), "EM_METAG != 174");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_METAG 174
#endif
#if defined(EM_MCST_ELBRUS) || (defined(HAVE_DECL_EM_MCST_ELBRUS) && HAVE_DECL_EM_MCST_ELBRUS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_MCST_ELBRUS) == (175), "EM_MCST_ELBRUS != 175");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_MCST_ELBRUS 175
#endif
#if defined(EM_ECOG16) || (defined(HAVE_DECL_EM_ECOG16) && HAVE_DECL_EM_ECOG16)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_ECOG16) == (176), "EM_ECOG16 != 176");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_ECOG16 176
#endif
#if defined(EM_CR16) || (defined(HAVE_DECL_EM_CR16) && HAVE_DECL_EM_CR16)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_CR16) == (177), "EM_CR16 != 177");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_CR16 177
#endif
#if defined(EM_ETPU) || (defined(HAVE_DECL_EM_ETPU) && HAVE_DECL_EM_ETPU)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_ETPU) == (178), "EM_ETPU != 178");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_ETPU 178
#endif
#if defined(EM_SLE9X) || (defined(HAVE_DECL_EM_SLE9X) && HAVE_DECL_EM_SLE9X)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_SLE9X) == (179), "EM_SLE9X != 179");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_SLE9X 179
#endif
#if defined(EM_L10M) || (defined(HAVE_DECL_EM_L10M) && HAVE_DECL_EM_L10M)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_L10M) == (180), "EM_L10M != 180");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_L10M 180
#endif
#if defined(EM_K10M) || (defined(HAVE_DECL_EM_K10M) && HAVE_DECL_EM_K10M)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_K10M) == (181), "EM_K10M != 181");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_K10M 181
#endif
#if defined(EM_AARCH64) || (defined(HAVE_DECL_EM_AARCH64) && HAVE_DECL_EM_AARCH64)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_AARCH64) == (183), "EM_AARCH64 != 183");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_AARCH64 183
#endif
#if defined(EM_STM8) || (defined(HAVE_DECL_EM_STM8) && HAVE_DECL_EM_STM8)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_STM8) == (186), "EM_STM8 != 186");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_STM8 186
#endif
#if defined(EM_TILE64) || (defined(HAVE_DECL_EM_TILE64) && HAVE_DECL_EM_TILE64)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_TILE64) == (187), "EM_TILE64 != 187");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_TILE64 187
#endif
#if defined(EM_TILEPRO) || (defined(HAVE_DECL_EM_TILEPRO) && HAVE_DECL_EM_TILEPRO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_TILEPRO) == (188), "EM_TILEPRO != 188");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_TILEPRO 188
#endif
#if defined(EM_MICROBLAZE) || (defined(HAVE_DECL_EM_MICROBLAZE) && HAVE_DECL_EM_MICROBLAZE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_MICROBLAZE) == (189), "EM_MICROBLAZE != 189");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_MICROBLAZE 189
#endif
#if defined(EM_CUDA) || (defined(HAVE_DECL_EM_CUDA) && HAVE_DECL_EM_CUDA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_CUDA) == (190), "EM_CUDA != 190");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_CUDA 190
#endif
#if defined(EM_TILEGX) || (defined(HAVE_DECL_EM_TILEGX) && HAVE_DECL_EM_TILEGX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_TILEGX) == (191), "EM_TILEGX != 191");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_TILEGX 191
#endif
#if defined(EM_CLOUDSHIELD) || (defined(HAVE_DECL_EM_CLOUDSHIELD) && HAVE_DECL_EM_CLOUDSHIELD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_CLOUDSHIELD) == (192), "EM_CLOUDSHIELD != 192");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_CLOUDSHIELD 192
#endif
#if defined(EM_COREA_1ST) || (defined(HAVE_DECL_EM_COREA_1ST) && HAVE_DECL_EM_COREA_1ST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_COREA_1ST) == (193), "EM_COREA_1ST != 193");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_COREA_1ST 193
#endif
#if defined(EM_COREA_2ND) || (defined(HAVE_DECL_EM_COREA_2ND) && HAVE_DECL_EM_COREA_2ND)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_COREA_2ND) == (194), "EM_COREA_2ND != 194");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_COREA_2ND 194
#endif
#if defined(EM_ARCV2) || (defined(HAVE_DECL_EM_ARCV2) && HAVE_DECL_EM_ARCV2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_ARCV2) == (195), "EM_ARCV2 != 195");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_ARCV2 195
#endif
#if defined(EM_OPEN8) || (defined(HAVE_DECL_EM_OPEN8) && HAVE_DECL_EM_OPEN8)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_OPEN8) == (196), "EM_OPEN8 != 196");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_OPEN8 196
#endif
#if defined(EM_RL78) || (defined(HAVE_DECL_EM_RL78) && HAVE_DECL_EM_RL78)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_RL78) == (197), "EM_RL78 != 197");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_RL78 197
#endif
#if defined(EM_VIDEOCORE5) || (defined(HAVE_DECL_EM_VIDEOCORE5) && HAVE_DECL_EM_VIDEOCORE5)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_VIDEOCORE5) == (198), "EM_VIDEOCORE5 != 198");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_VIDEOCORE5 198
#endif
#if defined(EM_78KOR) || (defined(HAVE_DECL_EM_78KOR) && HAVE_DECL_EM_78KOR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_78KOR) == (199), "EM_78KOR != 199");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_78KOR 199
#endif
#if defined(EM_56800EX) || (defined(HAVE_DECL_EM_56800EX) && HAVE_DECL_EM_56800EX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_56800EX) == (200), "EM_56800EX != 200");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_56800EX 200
#endif
#if defined(EM_BA1) || (defined(HAVE_DECL_EM_BA1) && HAVE_DECL_EM_BA1)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_BA1) == (201), "EM_BA1 != 201");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_BA1 201
#endif
#if defined(EM_BA2) || (defined(HAVE_DECL_EM_BA2) && HAVE_DECL_EM_BA2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_BA2) == (202), "EM_BA2 != 202");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_BA2 202
#endif
#if defined(EM_XCORE) || (defined(HAVE_DECL_EM_XCORE) && HAVE_DECL_EM_XCORE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_XCORE) == (203), "EM_XCORE != 203");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_XCORE 203
#endif
#if defined(EM_MCHP_PIC) || (defined(HAVE_DECL_EM_MCHP_PIC) && HAVE_DECL_EM_MCHP_PIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_MCHP_PIC) == (204), "EM_MCHP_PIC != 204");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_MCHP_PIC 204
#endif
#if defined(EM_KM32) || (defined(HAVE_DECL_EM_KM32) && HAVE_DECL_EM_KM32)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_KM32) == (210), "EM_KM32 != 210");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_KM32 210
#endif
#if defined(EM_KMX32) || (defined(HAVE_DECL_EM_KMX32) && HAVE_DECL_EM_KMX32)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_KMX32) == (211), "EM_KMX32 != 211");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_KMX32 211
#endif
#if defined(EM_KMX16) || (defined(HAVE_DECL_EM_KMX16) && HAVE_DECL_EM_KMX16)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_KMX16) == (212), "EM_KMX16 != 212");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_KMX16 212
#endif
#if defined(EM_KMX8) || (defined(HAVE_DECL_EM_KMX8) && HAVE_DECL_EM_KMX8)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_KMX8) == (213), "EM_KMX8 != 213");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_KMX8 213
#endif
#if defined(EM_KVARC) || (defined(HAVE_DECL_EM_KVARC) && HAVE_DECL_EM_KVARC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_KVARC) == (214), "EM_KVARC != 214");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_KVARC 214
#endif
#if defined(EM_CDP) || (defined(HAVE_DECL_EM_CDP) && HAVE_DECL_EM_CDP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_CDP) == (215), "EM_CDP != 215");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_CDP 215
#endif
#if defined(EM_COGE) || (defined(HAVE_DECL_EM_COGE) && HAVE_DECL_EM_COGE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_COGE) == (216), "EM_COGE != 216");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_COGE 216
#endif
#if defined(EM_COOL) || (defined(HAVE_DECL_EM_COOL) && HAVE_DECL_EM_COOL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_COOL) == (217), "EM_COOL != 217");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_COOL 217
#endif
#if defined(EM_NORC) || (defined(HAVE_DECL_EM_NORC) && HAVE_DECL_EM_NORC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_NORC) == (218), "EM_NORC != 218");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_NORC 218
#endif
#if defined(EM_CSR_KALIMBA) || (defined(HAVE_DECL_EM_CSR_KALIMBA) && HAVE_DECL_EM_CSR_KALIMBA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_CSR_KALIMBA) == (219), "EM_CSR_KALIMBA != 219");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_CSR_KALIMBA 219
#endif
#if defined(EM_Z80) || (defined(HAVE_DECL_EM_Z80) && HAVE_DECL_EM_Z80)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_Z80) == (220), "EM_Z80 != 220");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_Z80 220
#endif
#if defined(EM_VISIUM) || (defined(HAVE_DECL_EM_VISIUM) && HAVE_DECL_EM_VISIUM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_VISIUM) == (221), "EM_VISIUM != 221");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_VISIUM 221
#endif
#if defined(EM_FT32) || (defined(HAVE_DECL_EM_FT32) && HAVE_DECL_EM_FT32)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_FT32) == (222), "EM_FT32 != 222");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_FT32 222
#endif
#if defined(EM_MOXIE) || (defined(HAVE_DECL_EM_MOXIE) && HAVE_DECL_EM_MOXIE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_MOXIE) == (223), "EM_MOXIE != 223");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_MOXIE 223
#endif
#if defined(EM_AMDGPU) || (defined(HAVE_DECL_EM_AMDGPU) && HAVE_DECL_EM_AMDGPU)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_AMDGPU) == (224), "EM_AMDGPU != 224");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_AMDGPU 224
#endif
#if defined(EM_RISCV) || (defined(HAVE_DECL_EM_RISCV) && HAVE_DECL_EM_RISCV)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_RISCV) == (243), "EM_RISCV != 243");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_RISCV 243
#endif
#if defined(EM_BPF) || (defined(HAVE_DECL_EM_BPF) && HAVE_DECL_EM_BPF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_BPF) == (247), "EM_BPF != 247");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_BPF 247
#endif
#if defined(EM_CSKY) || (defined(HAVE_DECL_EM_CSKY) && HAVE_DECL_EM_CSKY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_CSKY) == (252), "EM_CSKY != 252");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_CSKY 252
#endif
#if defined(EM_AVR32) || (defined(HAVE_DECL_EM_AVR32) && HAVE_DECL_EM_AVR32)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_AVR32) == (0x18ad), "EM_AVR32 != 0x18ad");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_AVR32 0x18ad
#endif
#if defined(EM_FRV) || (defined(HAVE_DECL_EM_FRV) && HAVE_DECL_EM_FRV)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_FRV) == (0x5441), "EM_FRV != 0x5441");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_FRV 0x5441
#endif
#if defined(EM_OR32) || (defined(HAVE_DECL_EM_OR32) && HAVE_DECL_EM_OR32)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_OR32) == (0x8472), "EM_OR32 != 0x8472");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_OR32 0x8472
#endif
#if defined(EM_ALPHA) || (defined(HAVE_DECL_EM_ALPHA) && HAVE_DECL_EM_ALPHA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_ALPHA) == (0x9026), "EM_ALPHA != 0x9026");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_ALPHA 0x9026
#endif
#if defined(EM_CYGNUS_V850) || (defined(HAVE_DECL_EM_CYGNUS_V850) && HAVE_DECL_EM_CYGNUS_V850)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_CYGNUS_V850) == (0x9080), "EM_CYGNUS_V850 != 0x9080");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_CYGNUS_V850 0x9080
#endif
#if defined(EM_CYGNUS_M32R) || (defined(HAVE_DECL_EM_CYGNUS_M32R) && HAVE_DECL_EM_CYGNUS_M32R)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_CYGNUS_M32R) == (0x9041), "EM_CYGNUS_M32R != 0x9041");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_CYGNUS_M32R 0x9041
#endif
#if defined(EM_S390_OLD) || (defined(HAVE_DECL_EM_S390_OLD) && HAVE_DECL_EM_S390_OLD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_S390_OLD) == (0xa390), "EM_S390_OLD != 0xa390");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_S390_OLD 0xa390
#endif
#if defined(EM_XTENSA_OLD) || (defined(HAVE_DECL_EM_XTENSA_OLD) && HAVE_DECL_EM_XTENSA_OLD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_XTENSA_OLD) == (0xabc7), "EM_XTENSA_OLD != 0xabc7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_XTENSA_OLD 0xabc7
#endif
#if defined(EM_MICROBLAZE_OLD) || (defined(HAVE_DECL_EM_MICROBLAZE_OLD) && HAVE_DECL_EM_MICROBLAZE_OLD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_MICROBLAZE_OLD) == (0xbaab), "EM_MICROBLAZE_OLD != 0xbaab");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_MICROBLAZE_OLD 0xbaab
#endif
#if defined(EM_CYGNUS_MN10300) || (defined(HAVE_DECL_EM_CYGNUS_MN10300) && HAVE_DECL_EM_CYGNUS_MN10300)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_CYGNUS_MN10300) == (0xbeef), "EM_CYGNUS_MN10300 != 0xbeef");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_CYGNUS_MN10300 0xbeef
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

extern const struct xlat elf_em[];

# else

static const struct xlat_data elf_em_xdata[] = {


 XLAT(EM_NONE),
 XLAT(EM_M32),
 XLAT(EM_SPARC),
 XLAT(EM_386),
 XLAT(EM_68K),
 XLAT(EM_88K),
 XLAT(EM_486),

 XLAT(EM_860),
 XLAT(EM_MIPS),
 XLAT(EM_S370),
 XLAT(EM_MIPS_RS3_LE),


 XLAT(EM_PARISC),

 XLAT(EM_VPP500),
 XLAT(EM_SPARC32PLUS),
 XLAT(EM_960),
 XLAT(EM_PPC),
 XLAT(EM_PPC64),
 XLAT(EM_S390),
 XLAT(EM_SPU),

 XLAT(EM_V800),
 XLAT(EM_FR20),
 XLAT(EM_RH32),
 XLAT(EM_RCE),
 XLAT(EM_ARM),

 XLAT(EM_SH),
 XLAT(EM_SPARCV9),
 XLAT(EM_TRICORE),
 XLAT(EM_ARC),
 XLAT(EM_H8_300),
 XLAT(EM_H8_300H),
 XLAT(EM_H8S),
 XLAT(EM_H8_500),
 XLAT(EM_IA_64),
 XLAT(EM_MIPS_X),
 XLAT(EM_COLDFIRE),
 XLAT(EM_68HC12),
 XLAT(EM_MMA),
 XLAT(EM_PCP),
 XLAT(EM_NCPU),
 XLAT(EM_NDR1),
 XLAT(EM_STARCORE),
 XLAT(EM_ME16),
 XLAT(EM_ST100),
 XLAT(EM_TINYJ),
 XLAT(EM_X86_64),
 XLAT(EM_PDSP),
 XLAT(EM_PDP10),
 XLAT(EM_PDP11),
 XLAT(EM_FX66),
 XLAT(EM_ST9PLUS),
 XLAT(EM_ST7),
 XLAT(EM_68HC16),
 XLAT(EM_68HC11),
 XLAT(EM_68HC08),
 XLAT(EM_68HC05),
 XLAT(EM_SVX),
 XLAT(EM_ST19),
 XLAT(EM_VAX),
 XLAT(EM_CRIS),
 XLAT(EM_JAVELIN),
 XLAT(EM_FIREPATH),
 XLAT(EM_ZSP),
 XLAT(EM_MMIX),
 XLAT(EM_HUANY),
 XLAT(EM_PRISM),
 XLAT(EM_AVR),
 XLAT(EM_FR30),
 XLAT(EM_D10V),
 XLAT(EM_D30V),
 XLAT(EM_V850),
 XLAT(EM_M32R),
 XLAT(EM_MN10300),
 XLAT(EM_MN10200),
 XLAT(EM_PJ),
 XLAT(EM_OPENRISC),
 XLAT(EM_ARCOMPACT),
 XLAT(EM_XTENSA),
 XLAT(EM_VIDEOCORE),
 XLAT(EM_TMM_GPP),
 XLAT(EM_NS32K),
 XLAT(EM_TPC),
 XLAT(EM_SNP1K),
 XLAT(EM_ST200),
 XLAT(EM_IP2K),
 XLAT(EM_MAX),
 XLAT(EM_CR),
 XLAT(EM_F2MC16),
 XLAT(EM_MSP430),
 XLAT(EM_BLACKFIN),
 XLAT(EM_SE_C33),
 XLAT(EM_SEP),
 XLAT(EM_ARCA),
 XLAT(EM_UNICORE),
 XLAT(EM_EXCESS),
 XLAT(EM_DXP),
 XLAT(EM_ALTERA_NIOS2),
 XLAT(EM_CRX),
 XLAT(EM_XGATE),
 XLAT(EM_C166),
 XLAT(EM_M16C),
 XLAT(EM_DSPIC30F),
 XLAT(EM_CE),
 XLAT(EM_M32C),

 XLAT(EM_TSK3000),
 XLAT(EM_RS08),
 XLAT(EM_SHARC),
 XLAT(EM_ECOG2),
 XLAT(EM_SCORE7),
 XLAT(EM_DSP24),
 XLAT(EM_VIDEOCORE3),
 XLAT(EM_LATTICEMICO32),
 XLAT(EM_SE_C17),
 XLAT(EM_TI_C6000),
 XLAT(EM_TI_C2000),
 XLAT(EM_TI_C5500),
 XLAT(EM_TI_ARP32),
 XLAT(EM_TI_PRU),

 XLAT(EM_MMDSP_PLUS),
 XLAT(EM_CYPRESS_M8C),
 XLAT(EM_R32C),
 XLAT(EM_TRIMEDIA),
 XLAT(EM_HEXAGON),
 XLAT(EM_8051),
 XLAT(EM_STXP7X),
 XLAT(EM_NDS32),
 XLAT(EM_ECOG1X),
 XLAT(EM_MAXQ30),
 XLAT(EM_XIMO16),
 XLAT(EM_MANIK),
 XLAT(EM_CRAYNV2),
 XLAT(EM_RX),
 XLAT(EM_METAG),
 XLAT(EM_MCST_ELBRUS),
 XLAT(EM_ECOG16),
 XLAT(EM_CR16),
 XLAT(EM_ETPU),
 XLAT(EM_SLE9X),
 XLAT(EM_L10M),
 XLAT(EM_K10M),

 XLAT(EM_AARCH64),


 XLAT(EM_STM8),
 XLAT(EM_TILE64),
 XLAT(EM_TILEPRO),
 XLAT(EM_MICROBLAZE),
 XLAT(EM_CUDA),
 XLAT(EM_TILEGX),
 XLAT(EM_CLOUDSHIELD),
 XLAT(EM_COREA_1ST),
 XLAT(EM_COREA_2ND),
 XLAT(EM_ARCV2),
 XLAT(EM_OPEN8),
 XLAT(EM_RL78),
 XLAT(EM_VIDEOCORE5),
 XLAT(EM_78KOR),
 XLAT(EM_56800EX),
 XLAT(EM_BA1),
 XLAT(EM_BA2),
 XLAT(EM_XCORE),
 XLAT(EM_MCHP_PIC),

 XLAT(EM_KM32),
 XLAT(EM_KMX32),
 XLAT(EM_KMX16),
 XLAT(EM_KMX8),
 XLAT(EM_KVARC),
 XLAT(EM_CDP),
 XLAT(EM_COGE),
 XLAT(EM_COOL),
 XLAT(EM_NORC),
 XLAT(EM_CSR_KALIMBA),
 XLAT(EM_Z80),
 XLAT(EM_VISIUM),
 XLAT(EM_FT32),
 XLAT(EM_MOXIE),
 XLAT(EM_AMDGPU),
 XLAT(EM_RISCV),
 XLAT(EM_BPF),
 XLAT(EM_CSKY),
 XLAT(EM_AVR32),
 XLAT(EM_FRV),
 XLAT(EM_OR32),
 XLAT(EM_ALPHA),
 XLAT(EM_CYGNUS_V850),
 XLAT(EM_CYGNUS_M32R),
 XLAT(EM_S390_OLD),
 XLAT(EM_XTENSA_OLD),
 XLAT(EM_MICROBLAZE_OLD),
 XLAT(EM_CYGNUS_MN10300),
};
#  if !(defined HAVE_M32_MPERS || defined HAVE_MX32_MPERS)
static
#  endif
const struct xlat elf_em[1] = { {
 .data = elf_em_xdata,
 .size = ARRAY_SIZE(elf_em_xdata),
 .type = XT_SORTED,
} };

# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
