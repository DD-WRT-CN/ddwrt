#
# Broadcom Linux Router Makefile
#
# Copyright 2001-2003, Broadcom Corporation
# All Rights Reserved.
#
# THIS SOFTWARE IS OFFERED "AS IS", AND BROADCOM GRANTS NO WARRANTIES OF ANY
# KIND, EXPRESS OR IMPLIED, BY STATUTE, COMMUNICATION OR OTHERWISE. BROADCOM
# SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A SPECIFIC PURPOSE OR NONINFRINGEMENT CONCERNING THIS SOFTWARE.
#
# $Id: Makefile,v 1.2 2005/09/26 11:06:58 seg Exp $
#

include .config
ifneq ($(wildcard ../cy_conf.mak),)
  include ../cy_conf.mak
endif

#
# Paths
#
OPENSER_MODULES := sl tm rr maxfwd usrloc registrar dbtext textops exec auth auth_db nathelper
OPENSER_MODULE_FILES := $(foreach module,$(OPENSER_MODULES),openser/modules/$(module)/$(module).so)
OPENSSL_NO_CIPHERS:= no-idea no-md2 no-mdc2 no-rc5 no-sha0 no-rmd160 no-aes192
OPENSSL_OPTIONS:= shared no-ec no-err no-fips no-hw no-krb5 no-threads zlib-dynamic
CONFIG_MUSL=y

# Source bases

export PLATFORM LINUXDIR LIBDIR USRLIBDIR
export TOP := $(shell pwd)
export SRCBASE := $(shell (cd $(TOP)/.. && pwd -P))


# Set the HAL directory if you have the HAL sources

# Set the Atheros Rate Control directory if you have the proprietary rate control
export ATH_RATE=ath_rate/sample

#
# Cross-compile environment variables
#

# Build platform
export BUILD := i386-pc-linux-gnu
export HOSTCC := gcc

# uClibc wrapper
export ARCH:=$(PLATFORM)
ifeq ($(CONFIG_UCLIBC),y)
export PLATFORM := $(PLATFORM)-uclibc
endif

#export LINUXDIR := $(SRCBASE)/linux/linux.v24
ifeq ($(ARCH),mips)
export LINUXDIR := $(SRCBASE)/linux/brcm63xx/linux-2.6.17
endif
#ifeq ($(ARCH),armeb)
#export LINUXDIR := $(SRCBASE)/linux/xscale/linux-2.6.23
#endif
ifeq ($(ARCH),mipsel)
export LINUXDIR := $(SRCBASE)/kernel/rb500/linux-2.6.17-rc5
endif
ifeq ($(ARCH),i386)
export LINUXDIR := $(SRCBASE)/kernel/wrap/linux-2.6.16.7
endif

export KERNELRELEASE = $(shell cat $(LINUXDIR)/include/config/kernel.release 2> /dev/null)

#export KERNELRELEASE = $(shell cat $(LINUXDIR)/.kernelrelease 2> /dev/null)

#ifeq ($(PLATFORM),mipsel)
#export CROSS_COMPILE := mipsel-linux-
#export CONFIGURE := ./configure mipsel-linux --build=$(BUILD)
#export TOOLCHAIN := $(shell cd $(dir $(shell which $(CROSS_COMPILE)gcc))/../mipsel-linux && pwd -P)
#endif

#ifeq ($(PLATFORM),mipsel-uclibc)
export CROSS_COMPILE := $(ARCH)-linux-uclibc-
export CONFIGURE := ./configure $(ARCH)-linux --build=$(BUILD)
export TOOLCHAIN := $(shell cd $(dir $(shell which $(CROSS_COMPILE)gcc))/.. && pwd -P)
#endif

#ifeq ($(CONFIG_BCMWPA2),y)
#export CFLAGS += -DBCMWPA2 
#endif

export BASEOPT:=-O2
#export ARCH:= mipsel

ifeq ($(ARCH),mipsel)
export COPTS:=$(BASEOPT) -pipe -mips32 -mtune=mips32 -funit-at-a-time 
endif
ifeq ($(ARCH),arm)
export COPTS:=$(BASEOPT) -march=armv4 -pipe -funit-at-a-time -msoft-float -mtune=arm9tdmi -fno-caller-saves -fno-plt -D_FILE_OFFSET_BITS=64 
endif
ifeq ($(ARCH),mips)
export COPTS:=$(BASEOPT) -pipe -mips32 -mtune=mips32 -funit-at-a-time 
endif
ifeq ($(ARCH),i386)
export COPTS:=$(BASEOPT) -pipe -march=i486 -funit-at-a-time 
endif

export CC := $(CROSS_COMPILE)gcc
export CXX := $(CROSS_COMPILE)g++
export AR := $(CROSS_COMPILE)ar
export AS := $(CROSS_COMPILE)as
export LD := $(CROSS_COMPILE)ld
export NM := $(CROSS_COMPILE)nm
export RANLIB := $(CROSS_COMPILE)ranlib
export STRIP := $(CROSS_COMPILE)strip
export SIZE := $(CROSS_COMPILE)size

export CFLAGS := $(COPTS)

#
# Install and target directories
#

export PLATFORMDIR := $(TOP)/$(PLATFORM)
export INSTALLDIR := $(PLATFORMDIR)/install
export TARGETDIR := $(PLATFORMDIR)/target

ifeq ($(PLATFORM),mipsel)
obj-y += libcrypto
endif
#
# Configuration
#
CONFIG_IPTABLES=y

include rules/configs.mk

obj-clean := $(foreach obj,$(obj-y) $(obj-n),$(obj)-clean)
obj-install := $(foreach obj,$(obj-y),$(obj)-install)
obj-distclean := $(foreach obj,$(obj-y) $(obj-n),$(obj)-distclean)

all: install_headers build_date clean_target $(obj-y) $(LINUXDIR)/.config kernel

build_date:
	echo "#define BUILD_DATE \"$(shell date +%D)\"" > ../../opt/build.h 
	echo "CONFIG_MUSL=y" >> .config 

include kernel-features.mk

kernel:
	# Also build kernel
	cp $(LINUXDIR)/.config_openrisc $(LINUXDIR)/.config
	$(kernelfeatures)
	$(MAKE) -C $(LINUXDIR) oldconfig ARCH=arm 	

	if ! grep -q "CONFIG_EMBEDDED_RAMDISK=y" $(LINUXDIR)/.config ; then \
	    $(MAKE) -j 4 -C $(LINUXDIR) vmlinux zImage ARCH=arm CROSS_COMPILE="ccache $(ARCH)-linux-uclibc-" ; \
	fi
	if grep -q "CONFIG_MODULES=y" $(LINUXDIR)/.config ; then \
	    $(MAKE) -j 4 -C $(LINUXDIR) modules  ARCH=arm CROSS_COMPILE="ccache $(ARCH)-linux-uclibc-" ; \
	fi
	$(MAKE) -C $(LINUXDIR) modules_install DEPMOD=/bin/true INSTALL_MOD_PATH=$(TARGETDIR)
	-$(MAKE) -f Makefile.openrisc ath9k
	-$(MAKE) -f Makefile.openrisc ath9k-install
	-$(MAKE) -f Makefile.openrisc libutils
	-$(MAKE) -f Makefile.openrisc madwifi
	-$(MAKE) -f Makefile.openrisc madwifi-install
	-$(MAKE) -f Makefile.openrisc batman-adv
	-$(MAKE) -f Makefile.openrisc batman-adv-install
	-$(MAKE) -f Makefile.openrisc ndpi-netfilter
	-$(MAKE) -f Makefile.openrisc ndpi-netfilter-install
ifeq ($(CONFIG_SMBD),y)
	-$(MAKE) -f Makefile.openrisc smbd
	-$(MAKE) -f Makefile.openrisc smbd-install
endif
ifeq ($(CONFIG_WIREGUARD),y)
	-$(MAKE) -f Makefile.openrisc wireguard
	-$(MAKE) -f Makefile.openrisc wireguard-install
endif
	-$(MAKE) -f Makefile.openrisc uniwip-gpio
	-$(MAKE) -f Makefile.openrisc uniwip-gpio-install
	rm -f $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/build
	rm -f $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/source
ifneq ($(CONFIG_SAMBA),y)
	rm -rf $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/kernel/fs/cifs
endif

	find $(ARCH)-uclibc/install $(ARCH)-uclibc/target  -name \*.ko | \
		xargs $(ARCH)-linux-nm | \
		awk '$$1 == "U" { print $$2 } ' | \
		sort -u > $(LINUXDIR)/mod_symtab.txt
	$(ARCH)-linux-nm -n $(LINUXDIR)/vmlinux.o | grep ' r __ksymtab' | sed -e 's,........ r __ksymtab_,,' > $(LINUXDIR)/kernel_symtab.txt
	grep -f $(LINUXDIR)/mod_symtab.txt $(LINUXDIR)/kernel_symtab.txt -F > $(LINUXDIR)/sym_include.txt
	grep -vf $(LINUXDIR)/mod_symtab.txt $(LINUXDIR)/kernel_symtab.txt -F > $(LINUXDIR)/sym_exclude.txt
	( \
		echo '#define SYMTAB_KEEP \'; \
		cat $(LINUXDIR)/sym_include.txt | \
			awk '{print "KEEP(*(___ksymtab+" $$$$1 ")) \\" }'; \
		echo; \
		echo '#define SYMTAB_KEEP_GPL \'; \
		cat $(LINUXDIR)/sym_include.txt | \
			awk '{print "KEEP(*(___ksymtab_gpl+" $$$$1 ")) \\" }'; \
		echo; \
		echo '#define SYMTAB_DISCARD \'; \
		cat $(LINUXDIR)/sym_exclude.txt | \
			awk '{print "*(___ksymtab+" $$$$1 ") \\" }'; \
		echo; \
		echo '#define SYMTAB_DISCARD_GPL \'; \
		cat $(LINUXDIR)/sym_exclude.txt | \
			awk '{print "*(___ksymtab_gpl+" $$$$1 ") \\" }'; \
		echo; \
	) > $(LINUXDIR)/symtab.h


	if ! grep -q "CONFIG_EMBEDDED_RAMDISK=y" $(LINUXDIR)/.config ; then \
	    $(MAKE) -j 4 -C $(LINUXDIR) vmlinux zImage ARCH=arm EXTRA_LDSFLAGS="-I$(LINUXDIR) -include symtab.h"  CROSS_COMPILE="ccache $(ARCH)-linux-uclibc-" ; \
	fi

include common.mk



install package: clean_target $(filter-out lib.$(ARCH)-install,$(obj-install)) $(LINUXDIR)/.config
        # Install binaries into target directory
	install -d $(TARGETDIR)
	for dir in $(wildcard $(patsubst %,$(INSTALLDIR)/%,$(obj-y))) ; do \
	    (cd $${dir} && tar cpf - .) | (cd $(TARGETDIR) && tar xpf -) \
	done
	mkdir -p $(ARCH)-uclibc/target/etc/config
	mkdir -p $(ARCH)-uclibc/target/etc/kaid
	mkdir -p $(ARCH)-uclibc/target/etc/langpack
	cp ./opt/bin/ipkg $(ARCH)-uclibc/target/bin
	cd  $(ARCH)-uclibc/target/lib
	cp ./opt/etc/preinit $(ARCH)-uclibc/target/etc
	cp ./opt/etc/postinit $(ARCH)-uclibc/target/etc
	cp ./opt/etc/ipkg.conf $(ARCH)-uclibc/target/etc
	cp ./opt/etc/config/* $(ARCH)-uclibc/target/etc/config
	cp ./opt/usr/lib/smb.conf $(ARCH)-uclibc/target/usr/lib
	ln -sf ../tmp/smbshare $(ARCH)-uclibc/target/www/smb
	# optimize the crypto library by removing unneeded symbols
	# Install (and possibly optimize) C library
	#$(MAKE) -f Makefile.openrisc lib.$(ARCH)-install
	# optimize the others library by removing unneeded symbols
	$(MAKE) -f Makefile.openrisc optimize-lib
	# Install modules into filesystem
	if grep -q "CONFIG_MODULES=y" $(LINUXDIR)/.config ; then \
	    $(MAKE) -C $(LINUXDIR) modules_install DEPMOD=/bin/true INSTALL_MOD_PATH=$(TARGETDIR) ; \
	fi
ifeq ($(CONFIG_MADWIFI),y)
	rm -rf $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/kernel/drivers/net/wl
endif
ifeq ($(CONFIG_WAVESAT),y)
	make -f Makefile.openrisc wavesat-install
endif
#	cp lib.$(ARCH)/libgcc_s.so.1 $(TARGETDIR)/lib
	find $(TARGETDIR) -name "wl_*.o"  | xargs rm -rf
ifneq ($(CONFIG_SAMBA),y)
	rm -rf $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/kernel/fs/cifs
endif
	rm -f $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/build
	rm -f $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/source
        # Prepare filesystem
        # Make sure mksquashfs-2.0 is used
	cd $(TARGETDIR)  &&  find . -iname "CVS" | xargs rm -rf
	cd $(TARGETDIR)  &&  find . -iname ".svn" | xargs rm -rf
	find $(TARGETDIR)/lib -name *.ko -exec arm-linux-strip --strip-unneeded --remove-section=.comment {} +		
	#e2fsck -y -f $(ARCH)-uclibc/root.fs
	find $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/kernel -name *.ko -exec mv {} $(TARGETDIR)/lib/modules/$(KERNELRELEASE) \;
	-find $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/net -name *.ko -exec mv {} $(TARGETDIR)/lib/modules/$(KERNELRELEASE) \;
	-find $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/extra -name *.ko -exec mv {} $(TARGETDIR)/lib/modules/$(KERNELRELEASE) \;
	rm -rf $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/kernel
	rm -rf $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/net
	rm -rf $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/extra
	#e2fsck -y -f $(ARCH)-uclibc/root.fs
	./busybox/examples/depmod.pl -F $(LINUXDIR)/System.map -b $(ARCH)-uclibc/target/lib/modules
ifneq ($(CONFIG_ERC),y)
#	tar --directory=$(TARGETDIR) --remove-files -cvvjf $(TARGETDIR)/etc/local.tar.bz2 usr/local
	rm -rf $(TARGETDIR)/usr/local
	mkdir $(TARGETDIR)/usr/local
endif
ifeq ($(CONFIG_KAID),y)
	cp kaid/kaid $(TARGETDIR)/usr/sbin
endif
#	mv $(TARGETDIR)/usr/lib/services.so $(TARGETDIR)/lib
	export STRIP_KMOD="$(LINUXDIR)/scripts/strip-kmod.sh" && \
	export STRIP="sstrip" && \
	$(LINUXDIR)/scripts/rstrip.sh $(TARGETDIR)
#	cp lib.$(ARCH)/libgcc_s.so.1 $(TARGETDIR)/lib
	cd $(TARGETDIR) && $(TOP)/misc/rootprep.sh
	$(TOP)/../../tools/removewhitespace.sh $(TOP)/../../tools $(TARGETDIR)/etc/config

	mkdir -p $(ARCH)-uclibc/target/boot
	echo "mem=59M root=/dev/hda" > $(ARCH)-uclibc/target/boot/kparam
	cp $(LINUXDIR)/arch/arm/boot/zImage $(ARCH)-uclibc/target/boot
	./tools/ext2/genext2fs -d $(ARCH)-uclibc/target -b 220000 -i 65536 -N 65536 -q $(ARCH)-uclibc/disc.img
	echo "mem=59M root=/dev/sda" > $(ARCH)-uclibc/target/boot/kparam
	echo "this file just prevents reinstallation" > $(ARCH)-uclibc/target/boot/.installed
	./tools/ext2/genext2fs -d $(ARCH)-uclibc/target -b 220000 -i 65536 -N 65536 -q $(ARCH)-uclibc/disc_sd.img
	
#	$(LINUXDIR)/scripts/squashfs/mksquashfs-lzma $(ARCH)-uclibc/target $(ARCH)-uclibc/root.fs -noappend -root-owned -le
#	mkfs.jffs2 --pad --big-endian --squash -e 0x20000 -o $(ARCH)-uclibc/dd-wrt.jffs2 -d $(ARCH)-uclibc/target
#	echo -ne '\xde\xad\xc0\xde' >> $(ARCH)-uclibc/dd-wrt.jffs2
#	dd if=$(LINUXDIR)/arch/arm/boot/zImage of=$(ARCH)-uclibc/zImage bs=1048576 conv=sync
#	tools/wili/src/mkfwimage -v WILI-S.WILIBOARD.v5.00.SL3512.wili-core.00000.000000.0000 -o $(ARCH)-uclibc/fwupdate.bin -i tools/wili/wb111-ddwrt.txt
#	cat $(ARCH)-uclibc/root.fs >> $(ARCH)-uclibc/zImage
#	./tools/trx_n -m 30000000 -o $(ARCH)-uclibc/wb111-webflash.bin $(ARCH)-uclibc/zImage



include rules/all.mk

.PHONY: all clean distclean mrproper install package
.PHONY: conf mconf oldconf kconf kmconf config menuconfig oldconfig
.PHONY: dummy fixkc libnet libpcap



