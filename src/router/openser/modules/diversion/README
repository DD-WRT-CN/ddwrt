
Diversion Module

Jan Janak

   FhG FOKUS

Edited by

Jan Janak

   Copyright © 2004 FhG FOKUS
     _________________________________________________________

   Table of Contents
   1. User's Guide

        1.1. Overview
        1.2. Dependencies

              1.2.1. OpenSER Modules
              1.2.2. External Libraries or Applications

        1.3. Exported Parameters

              1.3.1. suffix (string)

        1.4. Exported Functions

              1.4.1. add_diversion(reason)
              1.4.2. Diversion Example

   2. Developer's Guide
   3. Frequently Asked Questions

   List of Examples
   1-1. suffix usage
   1-2. add_diversion usage
     _________________________________________________________

Chapter 1. User's Guide

1.1. Overview

   The module implements the Diversion extensions as per
   draft-levy-sip-diversion-08. The diversion extensions are
   useful in various scenarios involving call forwarding.
   Typically one needs to communicate the original recipient of
   the call to the PSTN gateway and this is what the diversion
   extensions can be used for.

   Warning

   The draft-levy-sip-diversion-08 is expired!! See IETF I-D
   tracker.
     _________________________________________________________

1.2. Dependencies

1.2.1. OpenSER Modules

   None.
     _________________________________________________________

1.2.2. External Libraries or Applications

   The following libraries or applications must be installed
   before running OpenSER with this module loaded:

     * None.
     _________________________________________________________

1.3. Exported Parameters

1.3.1. suffix (string)

   The suffix to be appended to the end of the header field. You
   can use the parameter to specify additional parameters to be
   added to the header field, see the example.

   Default value is "" (empty string).

   Example 1-1. suffix usage
modparam("diversion", "suffix", ";privacy=full")
     _________________________________________________________

1.4. Exported Functions

1.4.1. add_diversion(reason)

   The function adds a new diversion header field before any
   other existing Diversion header field in the message (the
   newly added Diversion header field will become the topmost
   Diversion header field). The inbound (without any
   modifications done by the proxy server) Request-URI will be
   used as the Diversion URI.

   Meaning of the parameters is as follows:

     * reason - The reason string to be added as the reason
       parameter

   This function can be used from REQUEST_ROUTE, FAILURE_ROUTE.

   Example 1-2. add_diversion usage
...
add_diversion("user-busy");
...
     _________________________________________________________

1.4.2. Diversion Example

   The following example shows a Diversion header field added to
   INVITE message. The original INVITE received by the user agent
   of sip:bob@sip.org is:
INVITE sip:bob@sip.org SIP/2.0
Via: SIP/2.0/UDP 1.2.3.4:5060
From: "mark" <sip:mark@sip.org>;tag=ldgheoihege
To: "Bob" <sip:bob@sip.org>
Call-ID: adgasdkgjhkjha@1.2.3.4
CSeq: 3 INVITE
Contact: <sip:mark@1.2.3.4>
Content-Length: 0

   The INVITE message is diverted by the user agent of
   sip:bob@sip.org because the user was talking to someone else
   and the new destination is sip:alice@sip.org :
INVITE sip:alice@sip.org SIP/2.0
Via: SIP/2.0/UDP 5.6.7.8:5060
Via: SIP/2.0/UDP 1.2.3.4:5060
From: "mark" <sip:mark@sip.org>;tag=ldgheoihege
To: "Bob" <sip:bob@sip.org>
Call-ID: adgasdkgjhkjha@1.2.3.4
CSeq: 3 INVITE
Diversion: <sip:bob@sip.org>;reason=user-busy
Contact: <sip:mark@1.2.3.4>
Content-Length: 0
     _________________________________________________________

Chapter 2. Developer's Guide

   According to the specification new Diversion header field
   should be inserted as the topmost Diversion header field in
   the message, that means before any other existing Diversion
   header field in the message. In addition to that,
   add_diversion function can be called several times and each
   time it should insert the new Diversion header field as the
   topmost one.

   In order to implement this, add_diversion function creates the
   anchor in data_lump lists as a static variable to ensure that
   the next call of the function will use the same anchor and
   would insert new Diversion headers before the one created in
   the previous execution. To my knowledge this is the only way
   of inserting the diversion header field before any other
   created in previous runs of the function.

   The anchor kept this way is only valid for a single message
   and we have to invalidate it when another message is being
   processed. For this reason, the function also stores the id of
   the message in another static variable and compares the value
   of that variable with the id of the SIP message being
   processed. If they differ then the anchor will be invalidated
   and the function creates a new one.

   The following code snippet shows the code that invalidates the
   anchor, new anchor will be created when the anchor variable is
   set to 0.
static inline int add_diversion_helper(struct sip_msg* msg, str* s)
{
    static struct lump* anchor = 0;
    static int msg_id = 0;

    if (msg_id != msg->id) {
        msg_id = msg->id;
        anchor = 0;
    }
...
}
     _________________________________________________________

Chapter 3. Frequently Asked Questions

   3.1. Where can I find more about OpenSER?
   3.2. Where can I post a question about this module?
   3.3. How can I report a bug?

   3.1. Where can I find more about OpenSER?

   Take a look at http://openser.org/.

   3.2. Where can I post a question about this module?

   First at all check if your question was already answered on
   one of our mailing lists:

     * User Mailing List -
       http://openser.org/cgi-bin/mailman/listinfo/users
     * Developer Mailing List -
       http://openser.org/cgi-bin/mailman/listinfo/devel

   E-mails regarding any stable OpenSER release should be sent to
   <users@openser.org> and e-mails regarding development versions
   should be sent to <devel@openser.org>.

   If you want to keep the mail private, send it to
   <team@openser.org>.

   3.3. How can I report a bug?

   Please follow the guidelines provided at:
   http://openser.org/bugs.
