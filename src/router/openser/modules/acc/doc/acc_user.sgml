<!-- Acc Module User's Guide -->

<chapter>
	<chapterinfo>
	<revhistory>
		<revision>
		<revnumber>$Revision: 1.7 $</revnumber>
		<date>$Date: 2005/10/18 11:24:17 $</date>
		</revision>
	</revhistory>
	</chapterinfo>
	<title>User's Guide</title>
	
	<section>
	<title>Overview</title>
	<para>
		acc module is used to report on transactions to syslog, 
		<abbrev>SQL</abbrev>, <acronym>RADIUS</acronym> and 
		<acronym>DIAMETER</acronym> (beta version).
	</para>
	<para>
		To report on a transaction using syslog, use <quote>setflag</quote> 
		to mark a transaction you are interested in with a flag, load 
		accounting module and set its <quote>log_flag</quote> to the same 
		flag number. The acc module will then report on completed transaction 
		to syslog. A typical usage of the module takes no acc-specific
		script command -- the functionality binds invisibly through 
		transaction processing. Script writers just need to mark the 
		transaction for accounting with proper setflag.
	</para>
	<para>
		What is printed depends on module's <quote>log_fmt</quote> parameter.
		It's a string with characters specifying which parts of request 
		should be printed: 
		<itemizedlist>
		<listitem>
			<para>c = Call-Id</para>
		</listitem>
		<listitem>
			<para>d = To tag (Dst)</para>
		</listitem>
		<listitem>
			<para>f = From</para>
		</listitem>
		<listitem>
			<para>i = Inbound Request-URI</para>
		</listitem>
		<listitem>
			<para>m = Method</para>
		</listitem>
		<listitem>
			<para>o = Outbound Request-URI</para>
		</listitem>
		<listitem>
			<para>r = fRom</para>
		</listitem>
		<listitem>
			<para>s = Status</para>
		</listitem>
		<listitem>
			<para>t = To</para>
		</listitem>
		<listitem>
			<para>u = digest Username</para>
		</listitem>
		<listitem>
			<para>p = username Part of inbound Request-URI</para>
		</listitem>
		</itemizedlist>
		If a value is not present in request, "n/a" is accounted instead.
	</para>
	<para>
		Note that:
		<itemizedlist>
		<listitem>
			<para>
			A single INVITE may produce multiple accounting reports -- that's
			due to SIP forking feature
			</para>
		</listitem>
		<listitem>
			<para>
			Subsequent ACKs and other requests do not hit the server and 
			can't be accounted unless record-routing is enforced. 
			The ACKs assert very little useful information anyway and 
			reporting on INVITE's 200 makes most accounting scenarios happy.
			</para>
		</listitem>
		<listitem>
			<para>
			There is no session accounting -- &ser; maintains no sessions. 
			If one needs to correlate INVITEs with BYEs for example for 
			purpose of billing, then it is better done in the entity which 
			collects accounting information. Otherwise, SIP server would 
			have to become sessions-stateful, which would very badly
			impact its scalability.
			</para>
		</listitem>
		<listitem>
			<para>
			If a UA fails in middle of conversation, a proxy will never 
			learn it. In general, a better practice is to account from an 
			end-device (such as PSTN gateway), which best knows about call 
			status (including media status and PSTN status in case of the 
			gateway).
			</para>
		</listitem>
		</itemizedlist>
	</para>
	<para>
		Support for SQL, RADIUS and DIAMETER works analogously. The SQL support
		is compiled in the moduls. For RADIUS and DIAMETER you need to 
		enable it by recompiling the module with properly set defines: 
		uncomment the RAD_ACC or DDIAM_ACC lines in
		modules/acc/Makefile. To compile RADIUS support, 
		you need to have radiusclient-ng (only versions higher or equal 
		to 0.5.0) installed on your system which is available from
		<ulink url='http://developer.berlios.de/projects/radiusclient-ng/'>
		http://developer.berlios.de/projects/radiusclient-ng/</ulink>. 
		The radius client needs to be configured properly. To do so, use the 
		template at etc/radiusclient.conf and make sure
		that module's radius_config parameter points to its location.  
		In particular, accounting secret must match that one configured in 
		server and proper dictionary is used (one is available at 
		etc/sip_dictionary). Uses along with FreeRadius 
		(<ulink url='http://www.freeradius.org/'>
		http://www.freeradius.org/</ulink>) and Radiator 
		(<ulink url='http://www.open.com.au/radiator/'>
		http://www.open.com.au/radiator/</ulink>) servers have been 
		reported to us.
	</para>
	<para>
		For Radius support, the radius libraries must be dynamically linkable. 
		You need to configure your OS so that &ser;, when started, will 
		find it. Typically, you do so by manipulating
		LD_LIBRARY_PATH environment variable or configuring ld.so.
	</para>
	<section>
		<title>General Example</title>
		<programlisting format="linespecific">
loadmodule "modules/acc/acc.so"
modparam("acc", "log_level", 1)
modparam("acc", "log_flag", 1)

if (uri=~"sip:+40") /* calls to Romania */ {
    if (!proxy_authorize("sip_domain.net" /* realm */,
    "subscriber" /* table name */))  {
        proxy_challenge("sip_domain.net" /* realm */, "0" /* no qop */ );
        break;
    }

    if (method=="INVITE" & !check_from()) {
        log("from!=digest\n");
        sl_send_reply("403","Forbidden");
        break;
    }

    setflag(1); /* set for accounting (the same value as in log_flag!)
    t_relay(); 	/* enter stateful mode now */
};
</programlisting>
	</section>
	</section>

	<section>
		<title>Extra accounting</title>
		<section>
			<title>Overview</title>
			<para>
			Along the static information defined via FMT-s, ACC modules 
			allows dynamical selection of extra information to be logged. 
			There are two classes of information that are accessible by 
			extra accounting: data from SIP messages (as headers) and 
			internal &ser; data (as AVPs).
			</para>
		</section>
		<section>
			<title>Definitions and syntax</title>
			<para>
			Selection of extra information is done via 
			<emphasis>xxx_extra<emphasis> parameters by specifying the names
			of additional information you want to log. This information is 
			defined via pseudo-variables and may include headers or AVPs values
			or other message or system values. The syntax of the parameter is:
			</para>
			<itemizedlist>
				<listitem><para><emphasis>
				xxx_extra = extra_definition (';'extra_definition)*
				</emphasis></para></listitem>
				<listitem><para><emphasis>
				extra_definition = log_name '=' pseudo_variable
				</emphasis></para></listitem>
			</itemizedlist>
			<para>
			The full list of supported pseudo-variables in &ser; is availabe 
			at: <ulink url="http://openser.org/docs/pseudo-variables.html">
			http://openser.org/docs/pseudo-variables.html</ulink>
			</para>
			<para>
			Via <emphasis>log_name</emphasis> you define how/where the 
			<emphasis>data</emphasis> will be logged. Its meaning depends 
			of the accounting support which is used:
			<itemizedlist>
				<listitem><para><emphasis>LOG accounting</emphasis> - log_name
				will be just printed along with the data in <emphasis>
				log_name=data</emphasis> format;
				</para></listitem>
				<listitem><para><emphasis>DB accounting</emphasis> - log_name 
				will be the name of the DB column where the data will be 
				stored.<emphasis>IMPORTANT<emphasis>: add in db 
				<emphasis>acc</emphasis> table the columns corresponding to 
				each extra data;
				</para></listitem>
				<listitem><para><emphasis>RADIUS accounting</emphasis> - 
				log_name will be the AVP name used for packing the data into 
				RADIUS message. The log_name will be translated to AVP number 
				via the dictionary. <emphasis>IMPORTANT<emphasis>: add in 
				RADIUS dictionary the <emphasis>log_name</emphasis> attribute.
				</para></listitem>
				<listitem><para><emphasis>DIAMETER accounting</emphasis> - 
				log_name will be the AVP code used for packing the data 
				into DIAMETER message. The AVP code is given directly as 
				integer, since DIAMETER has no dictionary support yet.
				<emphasis>IMPORTANT</emphasis>:	<emphasis>log_name</emphasis>
				must be a number.
				</para></listitem>
			</itemizedlist>
			</para>
		</section>
		<section>
			<title>How it works</title>
			<para>
			Some pseudo variables may return more than one value (like 
			headers or AVPs). In this case, the returned values are
			embedded in a single string in a comma-separated format.
			</para>
		</section>
	</section>

	<section id="multi-call-legs">
		<title>Multi Call-Legs accounting</title>
		<section>
			<title>Overview</title>
			<para>
			A SIP call can have multiple legs due forwarding actions. For 
			example user A calls user B which forwards the call to user C. 
			There is only one SIP call but with 2 legs ( A to B and B to C). 
			Accounting the legs of a call is required for proper billing of 
			the calls (if C is a PSTN number and the call is billed, user B 
			must pay for the call -as last party modifing the call 
			destination-, and not A -as initiator of the call. Call 
			forwarding on server is only one example which shows the 
			necessity of the having an accounting engine with multiple legs 
			support.
			</para>
		</section>
		<section>
			<title>Configuration</title>
			<para>
			First how it works? The idea is to store in several &ser; AVP 
			pairs the originator and destination for each call-leg. For the
			A call B and B forwards to C example, the AVP pairs are (A,B) and
			(B,C). There are two type of AVPs -source and destination- which
			refined a call-leg. The administator must take care and to 
			properly insert these AVP from the script (in proper order and 
			with correct type).
			</para>
			<para>
			When the accouning infomation for the call will be written/sent, 
			all the call-leg pairs will be added (based on found AVP pairs).
			</para>
			<para>
			By default, the multiple call-legs support is disable - it can be
			enabled via the <varname>multi_leg_enabled</varname> module
			parameter. By enabling it, you will have also to define the AVPs
			to be used for source and destination (which define one call-leg).
			From performance reasons, the AVPs may be specified only via IDs.
			</para>
		</section>
		<section>
			<title>Logged data</title>
			<para>
			For each call, all the source-destination pairs (which defined a 
			call-leg) will be looged. How the information will be actually
			logged, depends of the data backend:
			</para>
			<itemizedlist>
				<listitem>
				<para><emphasis>syslog</emphasis> -- all pairs will be added
				to one record string as src_leg=xxx, dst_leg=xxxx pairs.
				</para>
				</listitem>
				<listitem>
				<para><emphasis>database</emphasis> -- each pair will be 
				separatly logged (due DB data structure constraints); several
				records will be written, the difference between them being 
				only the source & destination of the corresponding call-leg.
				with database support.</para>
				<note><para>You will need to add in your DB (all acc related
				tables) the two colums for call-leg definition (source and
				destination).
				</para></note>
				</listitem>
				<listitem>
				<para><emphasis>Radius</emphasis> -- all pairs will be added
				to same Radius accounting message as RADIUS AVPs - for each
				call-leg two RADIUS AVPs will be added: source and 
				destination
				</para>
				<note><para>You will need to add in your dictionaty the two 
				RADIUS AVPs used for call-leg definition (source and
				destination): Sip-Leg-Source and Sip-Leg-Destination
				</para></note>
				</listitem>
				<listitem>
				<para><emphasis>Diameter</emphasis> -- not supported.
				with database support.</para>
				</listitem>
			</itemizedlist>
		</section>
	</section>


	<section>
		<title>Dependencies</title>
		<section>
			<title>&ser; Modules</title>
			<para>
			The module depends on the following modules (in the other words 
			the listed modules must be loaded before this module):
			<itemizedlist>
				<listitem>
				<para><emphasis>tm</emphasis> -- Transaction Manager</para>
				</listitem>
				<listitem>
				<para><emphasis>a database module</emphasis> -- If compiled 
				with database support.</para>
				</listitem>
			</itemizedlist>
			</para>
		</section>
		<section>
			<title>External Libraries or Applications</title>
			<para>
			The following libraries or applications must be installed 
			before running &ser; with this module loaded:
			<itemizedlist>
				<listitem>
				<para><emphasis>radiusclient-ng</emphasis> 0.5.0 or higher -- 
				if compiled with RADIUS support. See <ulink 
				url='http://developer.berlios.de/projects/radiusclient-ng/'>
				http://developer.berlios.de/projects/radiusclient-ng/</ulink>.
				</para>
				</listitem>
			</itemizedlist>
		</section>
	</section>

	<section>
	<title>Exported Parameters</title>
	<!-- Generic ACC parameters -->
	<section>
		<title><varname>early_media</varname> (integer)</title>
		<para>
		Should be early media (183) accounted too ?
		</para>
		<para>
		Default value is 0 (no).
		</para>
		<example>
		<title>early_media example</title>
		<programlisting format="linespecific">
modparam("acc", "early_media", 1)
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>failed_transaction_flag</varname> (integer)</title>
		<para>
		Per transaction flag which says if the transaction should be 
		accounted also in case of failure (status>=300).
		</para>
		<para>
		Default value is 0 (no flag).
		</para>
		<example>
		<title>failed_transaction_flag example</title>
		<programlisting format="linespecific">
modparam("acc", "failed_transaction_flag", 4)
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>report_ack</varname> (integer)</title>
		<para>
		Shall acc attempt to account e2e ACKs too ? Note that this is really 
		only an attempt, as e2e ACKs may take a different path 
		(unless RR enabled) and mismatch original INVITE (e2e ACKs are 
		a separate transaction).
		</para>
		<para>
		Default value is 1 (yes).
		</para>
		<example>
		<title>report_ack example</title>
		<programlisting format="linespecific">
modparam("acc", "report_ack", 0)
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>report_cancels</varname> (integer)</title>
		<para>
		By default, CANCEL reporting is disabled -- most accounting
		applications are happy to see INVITE's cancellation status.
		Turn on if you explicitly want to account CANCEL transactions.
		</para>
		<para>
		Default value is 0 (no).
		</para>
		<example>
		<title>report_cancels example</title>
		<programlisting format="linespecific">
modparam("acc", "report_cancels", 1)
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>multi_leg_enabled</varname> (integer)</title>
		<para>
		If set to a non 0 value, it will enables the logging of the 
		call-legs. See <xref linkend="multi-call-legs"> for a 
		detailed description of the Multi Call-Legs accounting.
		</para>
		<para>
		Default value is 0 (disabled).
		</para>
		<example>
		<title>multi_leg_enabled example</title>
		<programlisting format="linespecific">
modparam("acc", "multi_leg_enabled", 1)
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>src_leg_avp_id</varname> (integer)</title>
		<para>
		Defines the AVP (ID AVP) which contains the source URI part of a 
		call-leg. See <xref linkend="multi-call-legs"> for a 
		detailed description of the Multi Call-Legs accounting.
		</para>
		<para>
		Default value is 0 (undefined).
		</para>
		<example>
		<title>src_leg_avp_id example</title>
		<programlisting format="linespecific">
modparam("acc", "src_leg_avp_id", 110)
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>dst_leg_avp_id</varname> (integer)</title>
		<para>
		Defines the AVP (ID AVP) which contains the destination URI part of a 
		call-leg. See <xref linkend="multi-call-legs"> for a 
		detailed description of the Multi Call-Legs accounting.
		</para>
		<para>
		Default value is 0 (undefined).
		</para>
		<example>
		<title>dst_leg_avp_id example</title>
		<programlisting format="linespecific">
modparam("acc", "dst_leg_avp_id", 110)
</programlisting>
		</example>
	</section>
	<!-- SYSLOG specific ACC parameters -->
	<section>
		<title><varname>log_flag</varname> (integer)</title>
		<para>
		Request flag which needs to be set to account a transaction.
		</para>
		<para>
		Default value is 1.
		</para>
		<example>
		<title>log_flag example</title>
		<programlisting format="linespecific">
modparam("acc", "log_flag", 2)
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>log_missed_flag</varname> (integer)</title>
		<para>
		Request flag which needs to be set to account missed calls.
		</para>
		<para>
		Default value is 2.
		</para>
		<example>
		<title>log_missed_flag example</title>
		<programlisting format="linespecific">
modparam("acc", "log_missed_flag", 3)
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>log_level</varname> (integer)</title>
		<para>
		Log level at which accounting messages are issued to syslog.
		</para>
		<para>
		Default value is L_NOTICE.
		</para>
		<example>
		<title>log_level example</title>
		<programlisting format="linespecific">
modparam("acc", "log_level", 2)   # Set log_level to 2
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>log_fmt</varname> (string)</title>
		<para>
		Defines what parts of header fields will be printed to
		syslog, see <quote>overview</quote> for list of accepted values.
		</para>
		<para>
		Default value is <quote>miocfs</quote>.
		</para>
		<example>
		<title>log_fmt example</title>
		<programlisting format="linespecific">
modparam("acc", "log_fmt", "mfs")
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>log_extra</varname> (string)</title>
		<para>
		Extra values to be logged.
		</para>
		<para>
		Default value is NULL.
		</para>
		<example>
		<title>log_extra example</title>
		<programlisting format="linespecific">
modparam("acc", "log_extra", "ua=$hdr(User-Agent);uuid=$avp(i:123)")
</programlisting>
		</example>
	</section>
	<!-- RADIUS specific ACC parameters -->
	<section>
		<title><varname>radius_config</varname> (string)</title>
		<para>
		<emphasis>This parameter is radius specific.</emphasis> Path to 
		radius client configuration file, set the referred config file 
		correctly and specify there address of server, shared secret 
		(should equal that in /usr/local/etc/raddb/clients for
		freeRadius servers) and dictionary, see etc for an example of 
		config file and dictionary.
		</para>
		<para>
		Default value is <quote>/usr/local/etc/radiusclient/radiusclient.conf
		</quote>.
		</para>
		<example>
		<title>radius_config example</title>
		<programlisting format="linespecific">
modparam("acc", "radius_config", "/etc/radiusclient/radiusclient.conf")
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>radius_flag</varname> (integer)</title>
		<para>
		Request flag which needs to be set to account a 
		transaction -- RADIUS specific.
		</para>
		<para>
		Default value is 1.
		</para>
		<example>
		<title>radius_flag example</title>
		<programlisting format="linespecific">
modparam("acc", "radius_flag", 2)
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>radius_missed_flag</varname> (integer)</title>
		<para>
		Request flag which needs to be set to account missed 
		calls -- RADIUS specific.
		</para>
		<para>
		Default value is 2.
		</para>
		<example>
		<title>radius_missed_flag example</title>
		<programlisting format="linespecific">
modparam("acc", "radius_missed_flag", 3)
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>service_type</varname> (integer)</title>
		<para>
		Radius service type used for accounting.
		</para>
		<para>
		Default value is 15 (SIP).
		</para>
		<example>
		<title>service_type example</title>
		<programlisting format="linespecific">
modparam("acc", "service_type", 16)
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>radius_extra</varname> (string)</title>
		<para>
		Extra values to be logged via RADIUS - RADIUS specific.
		</para>
		<para>
		Default value is NULL.
		</para>
		<example>
		<title>radius_extra example</title>
		<programlisting format="linespecific">
modparam("acc", "radius_extra", "via=$hdr(Via[*]); email=$avp(s:email)")
</programlisting>
		</example>
	</section>
	<!-- DIAMETER specific ACC parameters -->
	<section>
		<title><varname>diameter_flag</varname> (integer)</title>
		<para>
		Request flag which needs to be set to account a 
		transaction -- DIAMETER specific.
		</para>
		<para>
		Default value is 1.
		</para>
		<example>
		<title>diameter_flag example</title>
		<programlisting format="linespecific">
modparam("acc", "diameter_flag", 2)
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>diameter_missed_flag</varname> (integer)</title>
		<para>
		Request flag which needs to be set to account missed 
		calls -- DIAMETER specific.
		</para>
		<para>
		Default value is 2.
		</para>
		<example>
		<title>diameter_missed_flag example</title>
		<programlisting format="linespecific">
modparam("acc", "diameter_missed_flag", 3)
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>diameter_client_host</varname> (string)</title>
		<para>
		Hostname of the machine where the DIAMETER Client is 
		running -- DIAMETER specific.
		</para>
		<para>
		Default value is <quote>localhost</quote>.
		</para>
		<example>
		<title>diameter_client_host example</title>
		<programlisting format="linespecific">
modparam("acc", "diameter_client_host", "3a_server.net")
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>diameter_client_port</varname> (int)</title>
		<para>
		Port number where the Diameter Client is 
		listening -- DIAMETER specific.
		</para>
		<para>
		Default value is 3000.
		</para>
		<example>
		<title>diameter_client_host example</title>
		<programlisting format="linespecific">
modparam("acc", "diameter_client_port", 3000)
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>diamter_extra</varname> (string)</title>
		<para>
		Extra values to be logged via DIAMETER - DIAMETER specific.
		</para>
		<para>
		Default value is NULL.
		</para>
		<example>
		<title>diameter_extra example</title>
		<programlisting format="linespecific">
modparam("acc", "diameter_extra", "7846=$hdr(Content-type);7847=$avp(s:email)")
</programlisting>
		</example>
	</section>
	<!-- SQL specific ACC parameters -->
	<section>
		<title><varname>db_flag</varname> (integer)</title>
		<para>
		Request flag which needs to be set to account a 
		transaction -- database specific.
		</para>
		<para>
		Default value is 1.
		</para>
		<example>
		<title>db_flag example</title>
		<programlisting format="linespecific">
modparam("acc", "db_flag", 2)
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>db_missed_flag</varname> (integer)</title>
		<para>
		Request flag which needs to be set to account missed 
		calls -- database specific.
		</para>
		<para>
		Default value is 2.
		</para>
		<example>
		<title>db_missed_flag example</title>
		<programlisting format="linespecific">
modparam("acc", "db_missed_flag", 3)
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>db_table_acc</varname> (string)</title>
		<para>
		Table name of accounting successfull calls -- database specific.
		</para>
		<para>
		Default value is <quote>acc</quote>
		</para>
		<example>
		<title>db_table_acc example</title>
		<programlisting format="linespecific">
modparam("acc", "db_table_acc", "myacc_table")
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>db_table_missed_calls</varname> (string)</title>
		<para>
		Table name for accounting missed calls -- database specific.
		</para>
		<para>
		Default value is <quote>missed_calls</quote>
		</para>
		<example>
		<title>db_table_missed_calls example</title>
		<programlisting format="linespecific">
modparam("acc", "db_table_missed_calls", "myMC_table")
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>db_url</varname> (string)</title>
		<para>
		SQL address -- database specific.
		</para>
		<para>
		Default value is 
			<quote>mysql://openser:openserrw@localhost/openser</quote>
		</para>
		<example>
		<title>db_url example</title>
		<programlisting format="linespecific">
modparam("acc", "db_url", "mysql://user:password@localhost/openser")
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>db_localtime</varname> (int)</title>
		<para>
		If DB timestamps should follow localtime or GMT time. Any non-zero value
		enables this option.
		</para>
		<para>
		Default value is <quote>0</quote>.
		</para>
		<example>
		<title>db_localtime example</title>
		<programlisting format="linespecific">
modparam("acc", "db_localtime", 1)  # use GMT time
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>acc_sip_from_column</varname> (string)</title>
		<para>
		Column name in accouting table to store the 
		<quote>sip_from</quote> value.
		</para>
		<para>
		Default value is <quote>sip_from</quote>.
		</para>
		<example>
		<title>acc_sip_from_column example</title>
		<programlisting format="linespecific">
modparam("acc", "acc_sip_from_column", "sip_from")
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>acc_sip_to_column</varname> (string)</title>
		<para>
		Column name in accouting table to store the <quote>sip_to</quote> value.
		</para>
		<para>
		Default value is <quote>sip_to</quote>.
		</para>
		<example>
		<title>acc_sip_to_column example</title>
		<programlisting format="linespecific">
modparam("acc", "acc_sip_to_column", "sip_to")
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>acc_sip_status_column</varname> (string)</title>
		<para>
		Column name in accouting table to store the 
		<quote>sip_status</quote> value.
		</para>
		<para>
		Default value is <quote>sip_status</quote>.
		</para>
		<example>
		<title>acc_sip_status_column example</title>
		<programlisting format="linespecific">
modparam("acc", "acc_sip_status_column", "sip_status")
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>acc_sip_method_column</varname> (string)</title>
		<para>
		Column name in accouting table to store the 
		<quote>sip_method</quote> value.
		</para>
		<para>
		Default value is <quote>sip_method</quote>.
		</para>
		<example>
		<title>acc_sip_method_column example</title>
		<programlisting format="linespecific">
modparam("acc", "acc_sip_method_column", "sip_method")
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>acc_i_uri_column</varname> (string)</title>
		<para>
		Column name in accouting table to store the 
		<quote>incoming_URI</quote> value.
		</para>
		<para>
		Default value is <quote>i_uri</quote>.
		</para>
		<example>
		<title>acc_i_uri_column example</title>
		<programlisting format="linespecific">
modparam("acc", "acc_i_uri_column", "in_uri")
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>acc_o_uri_column</varname> (string)</title>
		<para>
		Column name in accouting table to store the 
		<quote>outgoing_uri</quote> value.
		</para>
		<para>
		Default value is <quote>o_uri</quote>.
		</para>
		<example>
		<title>acc_o_uri_column example</title>
		<programlisting format="linespecific">
modparam("acc", "acc_o_uri_column", "out_uri")
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>acc_sip_callid_column</varname> (string)</title>
		<para>
		Column name in accouting table to store the 
		<quote>sip_callid</quote> value.
		</para>
		<para>
		Default value is <quote>sip_callid</quote>.
		</para>
		<example>
		<title>acc_sip_callid_column example</title>
		<programlisting format="linespecific">
modparam("acc", "acc_sip_callid_column", "sip_callid")
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>acc_user_column</varname> (string)</title>
		<para>
		Column name in accouting table to store the 
		<quote>username</quote> value.
		</para>
		<para>
		Default value is <quote>username</quote>.
		</para>
		<example>
		<title>acc_user_column example</title>
		<programlisting format="linespecific">
modparam("acc", "acc_user_column", "username")
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>acc_time_column</varname> (string)</title>
		<para>
		Column name in accouting table to store the <quote>time</quote> value.
		</para>
		<para>
		Default value is <quote>time</quote>.
		</para>
		<example>
		<title>acc_time_column example</title>
		<programlisting format="linespecific">
modparam("acc", "acc_time_column", "time")
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>acc_from_uri_column</varname> (string)</title>
		<para>
		Column name in accouting table to store the 
		<quote>from_uri</quote> value.
		</para>
		<para>
		Default value is <quote>from_uri</quote>.
		</para>
		<example>
		<title>acc_from_uri_column example</title>
		<programlisting format="linespecific">
modparam("acc", "acc_from_uri_column", "from_uri")
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>acc_to_uri_column</varname> (string)</title>
		<para>
		Column name in accouting table to store the <quote>to_uri</quote> value.
		</para>
		<para>
		Default value is <quote>to_uri</quote>.
		</para>
		<example>
		<title>acc_to_uri_column example</title>
		<programlisting format="linespecific">
modparam("acc", "acc_to_uri_column", "to_uri")
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>acc_totag_column</varname> (string)</title>
		<para>
		Column name in accouting table to store the <quote>to_tag</quote> value.
		</para>
		<para>
		Default value is <quote>totag</quote>.
		</para>
		<example>
		<title>acc_totag_column example</title>
		<programlisting format="linespecific">
modparam("acc", "acc_totag_column", "totag")
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>acc_fromtag_column</varname> (string)</title>
		<para>
		Column name in accouting table to store the 
		<quote>from_tag</quote> value.
		</para>
		<para>
		Default value is <quote>fromtag</quote>.
		</para>
		<example>
		<title>acc_fromtag_column example</title>
		<programlisting format="linespecific">
modparam("acc", "acc_fromtag_column", "fromtag")
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>acc_domain_column</varname> (string)</title>
		<para>
		Column name in accouting table to store the <quote>domain</quote> value.
		</para>
		<para>
		Default value is <quote>domain</quote>.
		</para>
		<example>
		<title>acc_domain_column example</title>
		<programlisting format="linespecific">
modparam("acc", "acc_domain_column", "domain")
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>acc_src_leg_column</varname> (string)</title>
		<para>
		Column name in accouting table to store the 
		<quote>source_leg</quote> value in case of multi-leg accouting.
		</para>
		<para>
		Default value is <quote>src_leg</quote>.
		</para>
		<example>
		<title>acc_src_leg_column example</title>
		<programlisting format="linespecific">
modparam("acc", "acc_src_leg_column", "src_leg")
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>acc_dst_leg_column</varname> (string)</title>
		<para>
		Column name in accouting table to store the 
		<quote>destination_leg</quote> value in case of multi-leg accouting.
		</para>
		<para>
		Default value is <quote>dst_leg</quote>.
		</para>
		<example>
		<title>acc_dst_leg_column example</title>
		<programlisting format="linespecific">
modparam("acc", "acc_dst_leg_column", "dst_leg")
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>db_extra</varname> (string)</title>
		<para>
		Extra values to be logged into database - DB specific.
		</para>
		<para>
		Default value is NULL.
		</para>
		<example>
		<title>db_extra example</title>
		<programlisting format="linespecific">
modparam("acc", "db_extra", "ct=$hdr(Content-type); email=$avp(s:email)")
</programlisting>
		</example>
	</section>
	</section>

	<section>
	<title>Exported Functions</title>
	<section>
		<title>
			<function moreinfo="none">acc_log_request(comment)</function>
		</title>
		<para>
		<function moreinfo="none">acc_request</function> reports on a request, 
		for example, it can be used to report on missed calls to off-line users 
		who are replied 404 - Not Found. To avoid multiple reports on UDP 
		request retransmission, you would need to embed the
		action in stateful processing.
		</para> 
		<para>
		Meaning of the parameters is as follows:</para>
		<itemizedlist>
		<listitem>
			<para><emphasis>comment</emphasis> - Comment to be appended.
			</para>
		</listitem>
		</itemizedlist>
		<para>
		This function can be used from REQUEST_ROUTE, FAILURE_ROUTE.
		</para>
		<example>
		<title>acc_log_request usage</title>
		<programlisting format="linespecific">
...
acc_log_request("Some comment");
...
</programlisting>
		</example>
	</section>
	<section>
		<title>
			<function moreinfo="none">acc_db_request(comment, table)</function>
		</title>
		<para>
		Like <function moreinfo="none">acc_log_request</function>, 
		<function moreinfo="none">acc_db_request</function> reports on a 
		request. The report is sent to database at <quote>db_url</quote>, in 
		the table referred to in the second action parameter.
		</para>
		<para>
		Meaning of the parameters is as follows:
		</para>
		<itemizedlist>
		<listitem>
			<para><emphasis>comment</emphasis> - Comment to be appended.</para>
		</listitem>
		<listitem>
			<para><emphasis>table</emphasis> - Database table to be used.</para>
		</listitem>
		</itemizedlist>
		<para>
		This function can be used from REQUEST_ROUTE, FAILURE_ROUTE.
		</para>
		<example>
		<title>acc_db_request usage</title>
		<programlisting format="linespecific">
...
acc_log_request("Some comment", "Some table");
...
</programlisting>
		</example>
	</section>
	<section>
		<title>
			<function moreinfo="none">acc_rad_request(comment)</function>
		</title>
		<para>
		Like <function moreinfo="none">acc_log_request</function>, 
		<function moreinfo="none">acc_rad_request</function> reports on 
		a request. It reports to radius server as configured in 
		<quote>radius_config</quote>.
		</para>
		<para>
		Meaning of the parameters is as follows:</para>
		<itemizedlist>
		<listitem>
			<para><emphasis>comment</emphasis> - Comment to be appended.
			</para>
		</listitem>
		</itemizedlist>
		<para>
		This function can be used from REQUEST_ROUTE, FAILURE_ROUTE.
		</para>
		<example>
		<title>acc_rad_request usage</title>
		<programlisting format="linespecific">
...
acc_rad_request("Some comment");
...
</programlisting>
		</example>
	</section>
	<section>
		<title>
			<function moreinfo="none">acc_diam_request(comment)</function>
		</title>
		<para>
		Like <function moreinfo="none">acc_log_request</function>, 
		<function moreinfo="none">acc_diam_request</function> reports on 
		a request. It reports to the configured Diameter server.
		</para> 
		<para>
		Meaning of the parameters is as follows:</para>
		<itemizedlist>
		<listitem>
			<para><emphasis>comment</emphasis> - Comment to be appended.
			</para>
		</listitem>
		</itemizedlist>
		<para>
		This function can be used from REQUEST_ROUTE, FAILURE_ROUTE.
		</para>
		<example>
		<title>acc_diam_request usage</title>
		<programlisting format="linespecific">
...
acc_diam_request("Some comment");
...
</programlisting>
		</example>
	</section>
	</section>
</chapter>

<!-- Keep this element at the end of the file
Local Variables:
sgml-parent-document: ("acc.sgml" "Book" "chapter")
End:
-->
