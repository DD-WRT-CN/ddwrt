
nathelper Module

Maxim Sobolev

   PortaOne

Edited by

Maxim Sobolev

Bogdan-Andrei Iancu

   Copyright © 2003 Porta Software Ltd.

   Copyright © 2005 voice-system.ro
     _________________________________________________________

   Table of Contents
   1. User's Guide

        1.1. Overview
        1.2. NAT pinging types
        1.3. Dependencies

              1.3.1. OpenSER Modules
              1.3.2. External Libraries or Applications

        1.4. Exported Parameters

              1.4.1. natping_interval (integer)
              1.4.2. ping_nated_only (integer)
              1.4.3. received_avp (integer)
              1.4.4. rtpproxy_sock (string)
              1.4.5. rtpproxy_disable (integer)
              1.4.6. rtpproxy_disable_tout (integer)
              1.4.7. rtpproxy_tout (integer)
              1.4.8. rtpproxy_retr (integer)
              1.4.9. force_socket (string)
              1.4.10. sipping_from (string)
              1.4.11. sipping_method (string)

        1.5. Exported Functions

              1.5.1. fix_nated_contact()
              1.5.2. fix_nated_sdp(mode)
              1.5.3. force_rtp_proxy()
              1.5.4. force_rtp_proxy(flags)
              1.5.5. force_rtp_proxy(flags, ip_address)
              1.5.6. unforce_rtp_proxy()
              1.5.7. add_rcv_param()
              1.5.8. fix_nated_register()
              1.5.9. nat_uac_test(flags)

   2. Developer's Guide
   3. Frequently Asked Questions

   List of Examples
   1-1. Set natping_interval parameter
   1-2. Set ping_nated_only parameter
   1-3. Set received_avp parameter
   1-4. Set rtpproxy_sock parameter
   1-5. Set rtpproxy_disable parameter
   1-6. Set rtpproxy_disable_tout parameter
   1-7. Set rtpproxy_tout parameter
   1-8. Set rtpproxy_retr parameter
   1-9. Set force_socket parameter
   1-10. Set sipping_from parameter
   1-11. Set sipping_method parameter
   1-12. fix_nated_contact usage
   1-13. fix_nated_sdp usage
   1-14. force_rtp_proxy usage
   1-15. force_rtp_proxy usage
   1-16. force_rtp_proxy usage
   1-17. unforce_rtp_proxy usage
   1-18. add_rcv_paramer usage
   1-19. fix_nated_register usage
     _________________________________________________________

Chapter 1. User's Guide

1.1. Overview

   This is a module to help with NAT traversal. In particular, it
   helps symmetric UAs that don't advertise they are symmetric
   and are not able to determine their public address.
   fix_nated_contact rewrites Contact header field with request's
   source address:port pair. fix_nated_sdp adds the active
   direction indication to SDP (flag 0x01) and updates source IP
   address too (flag 0x02).

   Known devices that get along over NATs with nathelper are ATAs
   (as clients) and Cisco Gateways (since 12.2(T)) as servers.
   See
   http://www.cisco.com/en/US/products/sw/iosswrel/ps1839/product
   s_feature_guide09186a0080110bf9.html">
     _________________________________________________________

1.2. NAT pinging types

   Currently, the nathelper module supports two types of NAT
   pings:

     * UDP package - 4 bytes (zero filled) UDP packages are sent
       to the contact address.
          + Advantages: low bandwitdh traffic, easy to generate
            by OpenSER;
          + Disadvantages: unidirectional traffic through NAT
            (inbound - from outside to inside); As many NATs do
            update the bind timeout only on outbound traffic, the
            bind may expire and closed.
     * SIP request - a stateless SIP request is sent to the
       contact address.
          + Advantages: bidirectional traffic through NAT, since
            each PING request from OpenSER (inbound traffic) will
            force the SIP client to generate a SIP reply
            (outbound traffic) - the NAT bind will be surely kept
            open.
          + Disadvantages: higher bandwitdh traffic, more
            expensive (as time) to generate by OpenSER;
     _________________________________________________________

1.3. Dependencies

1.3.1. OpenSER Modules

   The following modules must be loaded before this module:

     * usrloc module - only if the NATed contacts are to be
       pinged.
     _________________________________________________________

1.3.2. External Libraries or Applications

   The following libraries or applications must be installed
   before running OpenSER with this module loaded:

     * None.
     _________________________________________________________

1.4. Exported Parameters

1.4.1. natping_interval (integer)

   Period of time in seconds between sending the NAT pings to all
   currently registered UAs to keep their NAT bindings alive.
   Value of 0 disables this functionality.

   Note

   Enabling the NAT pinging functionality will force the module
   to bind itself to USRLOC module.

   Default value is 0. 

   Example 1-1. Set natping_interval parameter
...
modparam("nathelper", "natping_interval", 10)
...
     _________________________________________________________

1.4.2. ping_nated_only (integer)

   If this variable is set then only contacts that have
   "behind_NAT" flag in user location database set will get ping.

   Default value is 0. 

   Example 1-2. Set ping_nated_only parameter
...
modparam("nathelper", "ping_nated_only", 1)
...
     _________________________________________________________

1.4.3. received_avp (integer)

   The number of the Attribute-Value-Pair (AVP) used to store the
   URI containing the received IP, port, and protocol. The URI is
   created by fix_nated_register function of nathelper module and
   the attribute is then used by the registrar to store the
   received parameters. Do not forget to change the value of
   corresponding parameter in registrar module if you change the
   value of this parameter.

   Default value is 42. 

   Example 1-3. Set received_avp parameter
...
modparam("nathelper", "received_avp", 43)
...
     _________________________________________________________

1.4.4. rtpproxy_sock (string)

   Socket used to connect to RTPProxy. It may specify a UNIX
   socket or an IPv4/IPv6 UDP socket.

   Default value is "unix:/var/run/rtpproxy.sock". 

   Example 1-4. Set rtpproxy_sock parameter
...
modparam("nathelper", "rtpproxy_sock", "udp:localhost:12221")
...
     _________________________________________________________

1.4.5. rtpproxy_disable (integer)

   If true (set to a non 0 value), the RTPProxy support will be
   disabled - no connection to it will be established.

   Default value is "0 (false)". 

   Example 1-5. Set rtpproxy_disable parameter
...
modparam("nathelper", "rtpproxy_disable", 1)
...
     _________________________________________________________

1.4.6. rtpproxy_disable_tout (integer)

   Once RTPProxy was found unreachable and marked as disable,
   nathelper will not attempt to establish communication to
   RTPProxy for rtpproxy_disable_tout seconds.

   Default value is "60". 

   Example 1-6. Set rtpproxy_disable_tout parameter
...
modparam("nathelper", "rtpproxy_disable_tout", 20)
...
     _________________________________________________________

1.4.7. rtpproxy_tout (integer)

   Timeout value in waiting for reply from RTPProxy.

   Default value is "1". 

   Example 1-7. Set rtpproxy_tout parameter
...
modparam("nathelper", "rtpproxy_tout", 2)
...
     _________________________________________________________

1.4.8. rtpproxy_retr (integer)

   How many times nathelper should retry to send and receive
   after timeout was generated.

   Default value is "5". 

   Example 1-8. Set rtpproxy_retr parameter
...
modparam("nathelper", "rtpproxy_retr", 2)
...
     _________________________________________________________

1.4.9. force_socket (string)

   Socket to be forced in communicating to RTPProxy. It makes
   sense only for UDP communication. If no one specified, the OS
   will choose.

   Default value is "NULL". 

   Example 1-9. Set force_socket parameter
...
modparam("nathelper", "force_socket", "localhost:33333")
...
     _________________________________________________________

1.4.10. sipping_from (string)

   The parameter sets the SIP URI to be used in generating the
   SIP requests for NAT ping purposes. To enable the SIP request
   pinging feature, you have to set this parameter. The SIP
   request pinging will be used only for requests marked so (see
   registrar module, the "sip_natping_flag" flag).

   Default value is "NULL". 

   Example 1-10. Set sipping_from parameter
...
modparam("nathelper", "sipping_from", "sip:pinger@siphub.net")
...
     _________________________________________________________

1.4.11. sipping_method (string)

   The parameter sets the SIP method to be used in generating the
   SIP requests for NAT ping purposes.

   Default value is "OPTIONS". 

   Example 1-11. Set sipping_method parameter
...
modparam("nathelper", "sipping_method", "INFO")
...
     _________________________________________________________

1.5. Exported Functions

1.5.1. fix_nated_contact()

   Rewrites Contact HF to contain request's source address:port.

   This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE,
   BRANCH_ROUTE.

   Example 1-12. fix_nated_contact usage
...
if (search("User-Agent: Cisco ATA.*") {fix_nated_contact();};
...
     _________________________________________________________

1.5.2. fix_nated_sdp(mode)

   Alters the SDP information in orer to facilitate NAT
   traversal. What changes to be performed may be controled via
   the "parameter".

   The parameter value may be a bitwise OR of the following
   flags:

     * 0x01 - adds "a=direction:active" SDP line;
     * 0x02 - rewrite media IP address (c=) with source address
       of the message.
     * 0x04 - adds "a=nortpproxy:yes" SDP line;
     * 0x08 - rewrite IP from origin description (o=) with source
       address of the message.

   This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE,
   FAILURE_ROUTE, BRANCH_ROUTE.

   Example 1-13. fix_nated_sdp usage
...
if (search("User-Agent: Cisco ATA.*") {fix_nated_sdp("3");};
...
     _________________________________________________________

1.5.3. force_rtp_proxy()

   Rewrites SDP body to ensure that media is passed through an
   RTP proxy.

   This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE,
   FAILURE_ROUTE, BRANCH_ROUTE.

   Example 1-14. force_rtp_proxy usage
...
if (search("User-Agent: Cisco ATA.*") {force_rtp_proxy();};
...
     _________________________________________________________

1.5.4. force_rtp_proxy(flags)

   Same as force_rtp_proxy, but forces additional flags.

   Meaning of the parameters is as follows:

     * flags - flags to turn on some features.
          + a - flags that UA from which message is received
            doesn't support symmetric RTP.
          + l - force "lookup", that is, only rewrite SDP when
            corresponding session is already exists in the RTP
            proxy. Only makes sense for SIP requests, replies are
            always processed in "lookup" mode.
          + i - flags that message is received from UA in the LAN
            (internal network). Only makes sense when RTP proxy
            is running in the bridge mode.
          + e - flags that message is received from UA in the WAN
            (external network). Only makes sense when RTP proxy
            is running in the bridge mode.
          + f - instructs nathelper to ignore marks inserted by
            another nathelper in transit to indicate that the
            session is already goes through another proxy. Allows
            creating chain of proxies.
          + r - flags that IP address in SDP should be trusted.
            Without this flag, nathelper ignores address in the
            SDP and uses source address of the SIP message as
            media address which is passed to the RTP proxy.
          + o - flags that IP from the origin description (o=)
            should be also changed.

   This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE,
   FAILURE_ROUTE, BRANCH_ROUTE.

   Example 1-15. force_rtp_proxy usage
...
if (src_ip=1.2.3.4) {force_rtp_proxy("i");};
...
     _________________________________________________________

1.5.5. force_rtp_proxy(flags, ip_address)

   Same as force_rtp_proxy(flags), but it may force a new SDP IP
   address.

   Meaning of the parameters is as follows:

     * flags - flags to turn on some features.
     * ip_address - new SDP IP address.

   This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE,
   FAILURE_ROUTE, BRANCH_ROUTE.

   Example 1-16. force_rtp_proxy usage
...
if (search("User-Agent: Cisco ATA.*") {force_rtp_proxy("","1.2.3.4");};
...
     _________________________________________________________

1.5.6. unforce_rtp_proxy()

   Tears down the RTPProxy session for the current call.

   This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE,
   FAILURE_ROUTE, BRANCH_ROUTE.

   Example 1-17. unforce_rtp_proxy usage
...
unforce_rtp_proxy();
...
     _________________________________________________________

1.5.7. add_rcv_param()

   Add received parameter to Contact header fields. The parameter
   will contain URI created from the source IP, port, and
   protocol of the packet containing the SIP message. The
   parameter can be then processed by another registrar, this is
   useful, for example, when replicating register messages using
   t_replicate function to another registrar.

   This function can be used from REQUEST_ROUTE.

   Example 1-18. add_rcv_paramer usage
...
add_rcv_param();
...
     _________________________________________________________

1.5.8. fix_nated_register()

   The function creates a URI consisting of the source IP, port,
   and protocol and stores the URI in an Attribute-Value-Pair.
   The URI will be appended as "received" parameter to Contact in
   200 OK and registrar will store it in the user location
   database.

   This function can be used from REQUEST_ROUTE.

   Example 1-19. fix_nated_register usage
...
fix_nated_register();
...
     _________________________________________________________

1.5.9. nat_uac_test(flags)

   Tries to guess if client's request originated behind a nat.
   The parameter determines what heuristics is used.

   Meaning of the flags is as follows:

     * 1 - Contact header field is searched for occurrence of
       RFC1918 addresses.
     * 2 - the "received" test is used: address in Via is
       compared against source IP address of signaling
     * 4 - Top Most VIA is searched for occurrence of RFC1918
       addresses
     * 8 - SDP is searched for occurrence of RFC1918 addresses
     * 16 - test if the source port is different from the port in
       Via

   All flags can be bitwise combined, the test returns true if
   any of the tests identified a NAT.

   This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE,
   FAILURE_ROUTE, BRANCH_ROUTE.
     _________________________________________________________

Chapter 2. Developer's Guide

   The module does not provide any API to use in other OpenSER
   modules.
     _________________________________________________________

Chapter 3. Frequently Asked Questions

   3.1. Where can I find more about OpenSER?
   3.2. Where can I post a question about this module?
   3.3. How can I report a bug?

   3.1. Where can I find more about OpenSER?

   Take a look at http://openser.org/.

   3.2. Where can I post a question about this module?

   First at all check if your question was already answered on
   one of our mailing lists:

     * User Mailing List -
       http://openser.org/cgi-bin/mailman/listinfo/users
     * Developer Mailing List -
       http://openser.org/cgi-bin/mailman/listinfo/devel

   E-mails regarding any stable OpenSER release should be sent to
   <users@openser.org> and e-mails regarding development versions
   should be sent to <devel@openser.org>.

   If you want to keep the mail private, send it to
   <team@openser.org>.

   3.3. How can I report a bug?

   Please follow the guidelines provided at:
   http://openser.org/bugs.
