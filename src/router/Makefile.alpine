#
# Broadcom Linux Router Makefile
#
# Copyright 2001-2003, Broadcom Corporation
# All Rights Reserved.
#
# THIS SOFTWARE IS OFFERED "AS IS", AND BROADCOM GRANTS NO WARRANTIES OF ANY
# KIND, EXPRESS OR IMPLIED, BY STATUTE, COMMUNICATION OR OTHERWISE. BROADCOM
# SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A SPECIFIC PURPOSE OR NONINFRINGEMENT CONCERNING THIS SOFTWARE.
#
# $Id: Makefile,v 1.2 2005/09/26 11:06:58 seg Exp $
#

include .config
ifneq ($(wildcard ../cy_conf.mak),)
  include ../cy_conf.mak
endif

#
# Paths
#
OPENSER_MODULES := sl tm rr maxfwd usrloc registrar dbtext textops exec auth auth_db nathelper
OPENSER_MODULE_FILES := $(foreach module,$(OPENSER_MODULES),openser/modules/$(module)/$(module).so)
OPENSSL_NO_CIPHERS:= no-idea no-md2 no-mdc2 no-rc5 no-sha0 no-rmd160 no-aes192
OPENSSL_OPTIONS:= shared no-ec no-err no-fips no-hw no-krb5 no-threads zlib-dynamic
MAX_KERNEL_SIZE=$(shell echo $$((34 * 128 * 1024)))
MAX_IMAGE_SIZE=$(shell echo $$(((34 + 320) * 128 * 1024)))
MODULE_NAME=R9000
HW_VERSION=R9000
FW_VERSION=V1.0.1.36
LG_VERSION=V1.0.0.280
CLOUD_VERSION=20160909
HW_ID="29765235+0+512+1024+4x4+4x4"
ifndef FW_REGION
	FW_REGION=""
endif

# Source bases

export PLATFORM LINUXDIR LIBDIR USRLIBDIR
export TOP := $(shell pwd)
export SRCBASE := $(shell (cd $(TOP)/.. && pwd -P))


# Set the HAL directory if you have the HAL sources

# Set the Atheros Rate Control directory if you have the proprietary rate control
export ATH_RATE=ath_rate/sample

#
# Cross-compile environment variables
#

# Build platform
export BUILD := i386-pc-linux-gnu
export HOSTCC := gcc

# uClibc wrapper
export ARCH:=$(PLATFORM)
ifeq ($(CONFIG_UCLIBC),y)
export PLATFORM := $(PLATFORM)-uclibc
endif


export KERNELRELEASE = $(shell cat $(LINUXDIR)/include/config/kernel.release 2> /dev/null)


#ifeq ($(PLATFORM),mipsel-uclibc)
export CROSS_COMPILE := $(ARCH)-linux-uclibc-
export CONFIGURE := ./configure $(ARCH)-linux --build=$(BUILD)
export TOOLCHAIN := $(shell cd $(dir $(shell which $(CROSS_COMPILE)gcc))/.. && pwd -P)
#endif


export BASEOPT:=-Os


#ifeq ($(ARCH),arm)
#export COPTS:=$(BASEOPT) -pipe -march=armv7-a -mfpu=vfpv3-d16 -mfloat-abi=softfp -fhonour-copts -msoft-float
#export COPTS:=$(BASEOPT) -pipe -march=armv7-a -mtune=cortex-a9  -mfloat-abi=soft -fpic -fno-caller-saves 
export COPTS:=$(BASEOPT) -pipe -mcpu=cortex-a15 -mtune=cortex-a15 -mfpu=neon-vfpv4 -mfloat-abi=hard -fno-caller-saves
#endif


export CC := ccache $(CROSS_COMPILE)gcc
export CXX := ccache $(CROSS_COMPILE)g++
export AR := $(CROSS_COMPILE)ar
export AS := $(CROSS_COMPILE)as
export LD := $(CROSS_COMPILE)ld
export NM := $(CROSS_COMPILE)nm
export RANLIB := $(CROSS_COMPILE)ranlib
export STRIP := $(CROSS_COMPILE)strip
export SIZE := $(CROSS_COMPILE)size

export CFLAGS := $(COPTS) 

#
# Install and target directories
#

export PLATFORMDIR := $(TOP)/$(PLATFORM)
export INSTALLDIR := $(PLATFORMDIR)/install
export TARGETDIR := $(PLATFORMDIR)/target

#
# Configuration
#
CONFIG_IPTABLES=y
CONFIG_MUSL=y
#CONFIG_NOOPT=y

include rules/configs.mk

obj-clean := $(foreach obj,$(obj-y) $(obj-n),$(obj)-clean)
obj-install := $(foreach obj,$(obj-y),$(obj)-install)
obj-distclean := $(foreach obj,$(obj-y) $(obj-n),$(obj)-distclean)

all: install_headers build_date clean_target $(obj-y) $(LINUXDIR)/.config kernel

build_date:
	echo "#define BUILD_DATE \"$(shell date +%D)\"" > ../../opt/build.h 
	echo "CONFIG_MUSL=y" >> .config 

include kernel-features.mk

kernel:
	cp $(LINUXDIR)/.config_alpine $(LINUXDIR)/.config

	$(kernelfeatures)
	$(MAKE) -C $(LINUXDIR) oldconfig
	
	if ! grep -q "CONFIG_EMBEDDED_RAMDISK=y" $(LINUXDIR)/.config ; then \
	    $(MAKE) -j 4 -C $(LINUXDIR) uImage dtbs CROSS_COMPILE="ccache $(ARCH)-openwrt-linux-" ; \
	fi
	if grep -q "CONFIG_MODULES=y" $(LINUXDIR)/.config ; then \
	    $(MAKE) -j 4 -C $(LINUXDIR) modules CROSS_COMPILE="ccache $(ARCH)-openwrt-linux-" ; \
	fi
	

	
	
	rm -rf $(TARGETDIR)/lib/modules
	$(MAKE) -C $(LINUXDIR) modules_install DEPMOD=/bin/true INSTALL_MOD_PATH=$(TARGETDIR)
	rm -f $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/build
	rm -f $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/source

	-$(MAKE) -f Makefile.alpine ath9k
	-$(MAKE) -f Makefile.alpine ath9k-install
	-$(MAKE) -f Makefile.alpine libutils
	-$(MAKE) -f Makefile.alpine madwifi
	-$(MAKE) -f Makefile.alpine madwifi-install
	-$(MAKE) -f Makefile.alpine batman-adv
	-$(MAKE) -f Makefile.alpine batman-adv-install
	-$(MAKE) -f Makefile.alpine ndpi-netfilter
	-$(MAKE) -f Makefile.alpine ndpi-netfilter-install
ifeq ($(CONFIG_ZFS),y)
	-$(MAKE) -f Makefile.alpine zfs
	-$(MAKE) -f Makefile.alpine zfs-install
endif
ifeq ($(CONFIG_SMBD),y)
	-$(MAKE) -f Makefile.alpine smbd
	-$(MAKE) -f Makefile.alpine smbd-install
endif
ifeq ($(CONFIG_WIREGUARD),y)
	-$(MAKE) -f Makefile.alpine wireguard
	-$(MAKE) -f Makefile.alpine wireguard-install
endif
ifeq ($(CONFIG_CAKE),y)
	-$(MAKE) -f Makefile.alpine cake
	-$(MAKE) -f Makefile.alpine cake-install
	-$(MAKE) -f Makefile.alpine fq_codel_fast
	-$(MAKE) -f Makefile.alpine fq_codel_fast-install
endif
#	-$(MAKE) -f Makefile.alpine uniwip-gpio
#	-$(MAKE) -f Makefile.alpine uniwip-gpio-install


	mkdir -p $(ARCH)-uclibc/target/usr/sbin/

	mkdir -p $(ARCH)-uclibc/target/lib/crda

#	cp $(TOP)/qtnhost/host/arm/qdpc-host.ko $(ARCH)-uclibc/target/lib/modules/$(KERNELRELEASE)/

	
	find $(ARCH)-uclibc/install $(ARCH)-uclibc/target  -name \*.ko | \
		xargs $(ARCH)-linux-nm | \
		awk '$$1 == "U" { print $$2 } ' | \
		sort -u > $(LINUXDIR)/mod_symtab.txt
	$(ARCH)-linux-nm -n $(LINUXDIR)/vmlinux.o | grep ' r __ksymtab' | sed -e 's,........ r __ksymtab_,,' > $(LINUXDIR)/kernel_symtab.txt
	$(ARCH)-linux-nm -n $(LINUXDIR)/vmlinux.o | grep ' R __ksymtab' | sed -e 's,........ R __ksymtab_,,' >> $(LINUXDIR)/kernel_symtab.txt
	grep -f $(LINUXDIR)/mod_symtab.txt $(LINUXDIR)/kernel_symtab.txt -F > $(LINUXDIR)/sym_include.txt
	grep -vf $(LINUXDIR)/mod_symtab.txt $(LINUXDIR)/kernel_symtab.txt -F > $(LINUXDIR)/sym_exclude.txt
	( \
		echo '#define SYMTAB_KEEP \'; \
		cat $(LINUXDIR)/sym_include.txt | \
			awk '{print "KEEP(*(___ksymtab+" $$$$1 ")) \\" }'; \
		echo; \
		echo '#define SYMTAB_KEEP_GPL \'; \
		cat $(LINUXDIR)/sym_include.txt | \
			awk '{print "KEEP(*(___ksymtab_gpl+" $$$$1 ")) \\" }'; \
		echo; \
		echo '#define SYMTAB_DISCARD \'; \
		cat $(LINUXDIR)/sym_exclude.txt | \
			awk '{print "*(___ksymtab+" $$$$1 ") \\" }'; \
		echo; \
		echo '#define SYMTAB_DISCARD_GPL \'; \
		cat $(LINUXDIR)/sym_exclude.txt | \
			awk '{print "*(___ksymtab_gpl+" $$$$1 ") \\" }'; \
		echo; \
	) > $(LINUXDIR)/symtab.h
	#rm -f $(LINUXDIR)/vmlinux
	#$(MAKE) -j 4 -C $(LINUXDIR) uImage dtbs EXTRA_LDSFLAGS="-I$(LINUXDIR) -include symtab.h" CROSS_COMPILE="ccache $(ARCH)-openwrt-linux-"
	

include common.mk

install package: clean_target $(filter-out lib.$(ARCH)-install,$(obj-install)) $(LINUXDIR)/.config
        # Install binaries into target directory
	install -d $(TARGETDIR)
	for dir in $(wildcard $(patsubst %,$(INSTALLDIR)/%,$(obj-y))) ; do \
	    (cd $${dir} && tar cpf - .) | (cd $(TARGETDIR) && tar xpf -) \
	done
	mkdir -p $(ARCH)-uclibc/target/etc/config
	mkdir -p $(ARCH)-uclibc/target/etc/kaid
	mkdir -p $(ARCH)-uclibc/target/etc/langpack
	cd  $(ARCH)-uclibc/target/lib
	cp ./opt/etc/preinit $(ARCH)-uclibc/target/etc
	cp ./opt/etc/postinit $(ARCH)-uclibc/target/etc
	cp ./opt/etc/ipkg.conf $(ARCH)-uclibc/target/etc
	cp ./opt/etc/config/* $(ARCH)-uclibc/target/etc/config
	cp ./opt/usr/lib/smb.conf $(ARCH)-uclibc/target/usr/lib
	# optimize the others library by removing unneeded symbols
	$(MAKE) -f Makefile.alpine optimize-lib
	# Install modules into filesystem
	if grep -q "CONFIG_MODULES=y" $(LINUXDIR)/.config ; then \
	    $(MAKE) -C $(LINUXDIR) modules_install DEPMOD=/bin/true INSTALL_MOD_PATH=$(TARGETDIR) ; \
	fi
ifeq ($(CONFIG_MADWIFI),y)
	rm -rf $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/kernel/drivers/net/wl
endif


ifneq ($(CONFIG_SAMBA),y)
	rm -rf $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/kernel/fs/cifs
endif
	rm -f $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/build
	rm -f $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/source
        # Prepare filesystem
        # Make sure mksquashfs-2.0 is used
	cd $(TARGETDIR)  &&  find . -iname "CVS" | xargs rm -rf
	cd $(TARGETDIR)  &&  find . -iname ".svn" | xargs rm -rf

	find $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/kernel -name *.ko -exec mv {} $(TARGETDIR)/lib/modules/$(KERNELRELEASE) \;
	-find $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/net -name *.ko -exec mv {} $(TARGETDIR)/lib/modules/$(KERNELRELEASE) \;
	-find $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/extra -name *.ko -exec mv {} $(TARGETDIR)/lib/modules/$(KERNELRELEASE) \;
	rm -rf $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/kernel
	rm -rf $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/net
	rm -rf $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/extra
	#e2fsck -y -f $(ARCH)-uclibc/root.fs
	./busybox/examples/depmod.pl -F $(LINUXDIR)/System.map -b $(ARCH)-uclibc/target/lib/modules
#	tar --directory=$(TARGETDIR) --remove-files -cvvjf $(TARGETDIR)/etc/local.tar.bz2 usr/local
	rm -rf $(TARGETDIR)/usr/local
	mkdir $(TARGETDIR)/usr/local
	
	
ifeq ($(CONFIG_KAID),y)
	cp kaid/kaid $(TARGETDIR)/usr/sbin
endif
#	mv $(TARGETDIR)/usr/lib/services.so $(TARGETDIR)/lib

	export STRIP_KMOD="$(LINUXDIR)/scripts/strip-kmod.sh" && \
	export STRIP="sstrip" && \
	$(LINUXDIR)/scripts/rstrip.sh $(TARGETDIR)
	cd $(TARGETDIR) && $(TOP)/misc/rootprep.sh
#	#mkdir $(TARGETDIR)/boot
	
	cp -fpR $(LINUXDIR)/arch/arm/boot/zImage $(ARCH)-uclibc/zImage-alpine
#	cat $(LINUXDIR)/arch/arm/boot/dts/alpine-r9000.dtb >> $(ARCH)-uclibc/zImage-alpine;
	$(LINUXDIR)/scripts/squashfs/mksquashfs4 $(ARCH)-uclibc/target $(ARCH)-uclibc/root.squashfs -comp xz -nopad  -root-owned -noappend -Xbcj arm -b 262144
#	$(LINUXDIR)/scripts/squashfs/mksquashfs-lzma $(ARCH)-uclibc/target $(ARCH)-uclibc/root.squashfs -noappend -root-owned -le
	

	dd if=$(ARCH)-uclibc/zImage-alpine bs=$(shell expr $(MAX_KERNEL_SIZE)) conv=sync of=$(ARCH)-uclibc/zImage-alpine-fix
	dd if=$(ARCH)-uclibc/zImage-alpine-fix bs=1 count=$(shell expr $(MAX_KERNEL_SIZE) - 132) conv=sync of=$(ARCH)-uclibc/zImage-alpine-fix2
	mkimage -A arm -O linux -T kernel -a 0x00008000 -C none -e 0x00008000 -n 'DD-WRT' -d $(ARCH)-uclibc/zImage-alpine-fix2 $(ARCH)-uclibc/uImage;

#	dd if=$(ARCH)-uclibc/uImage bs=$(shell expr $(MAX_KERNEL_SIZE)) conv=sync of=$(ARCH)-uclibc/uImage.fix

	./tools/r9000/r9000 $(ARCH)-uclibc/uImage $(ARCH)-uclibc/vmlinux.uImage.normal add_image_size

	dd if=$(ARCH)-uclibc/root.squashfs of=$(ARCH)-uclibc/root.squashfs.final bs=2k conv=sync
	mkimage -A arm -O linux -C lzma -T kernel -a 0x40908000 \
		-e 0x40908000 -n 'Linux-DD-WRT' \
		-d $(ARCH)-uclibc/root.squashfs.final $(ARCH)-uclibc/squashfs.uImage
	./tools/r9000/r9000 \
		$(ARCH)-uclibc/squashfs.uImage \
		$(ARCH)-uclibc/squashfs.uImage.tmp
	cat $(ARCH)-uclibc/squashfs.uImage.tmp >> $(ARCH)-uclibc/vmlinux.uImage.normal



#	cat $(ARCH)-uclibc/vmlinux.uImage.normal > $(ARCH)-uclibc/vmlinux.uImage.tmp
#	dd if=$(ARCH)-uclibc/vmlinux.uImage.tmp bs=$(shell expr $(MAX_KERNEL_SIZE) - 64) conv=sync of=$(ARCH)-uclibc/vmlinux.uImage.final
#	dd if=$(ARCH)-uclibc/squashfs.uImage.tmp bs=64 count=1 >> $(ARCH)-uclibc/vmlinux.uImage.final
#	( \
#		dd if=$(ARCH)-uclibc/vmlinux.uImage.final bs=$(MAX_KERNEL_SIZE) conv=sync; \
#		dd if=$(ARCH)-uclibc/root.squashfs.final bs=64k; \
#	) > $(ARCH)-uclibc/alpine-sysupgrade.bin
	./tools/r9000/mkdniimg \
		-B $(MODULE_NAME) -v $(FW_VERSION) -r $(FW_REGION) -H $(HW_ID) \
		-i $(ARCH)-uclibc/vmlinux.uImage.normal \
		-o $(ARCH)-uclibc/$(MODULE_NAME)-$(FW_VERSION)$(FW_REGION).img
	./tools/r9000/mkdniimg \
		-B R8900 -v $(FW_VERSION) -r $(FW_REGION) -H $(HW_ID) \
		-i $(ARCH)-uclibc/vmlinux.uImage.normal \
		-o $(ARCH)-uclibc/R8900-$(FW_VERSION)$(FW_REGION).img

	./tools/r9000/mkdniimg \
		-B XR700 -v $(FW_VERSION) -r $(FW_REGION) -H $(HW_ID) \
		-i $(ARCH)-uclibc/vmlinux.uImage.normal \
		-o $(ARCH)-uclibc/XR700-$(FW_VERSION)$(FW_REGION).img

	-./tools/trx_n -m 60000000 -o $(ARCH)-uclibc/r9000.bin $(ARCH)-uclibc/vmlinux.uImage.normal 


	



fixup:

	dd if=$(ARCH)-uclibc/zImage-alpine bs=$(shell expr $(MAX_KERNEL_SIZE)) conv=sync of=$(ARCH)-uclibc/zImage-alpine-fix
	dd if=$(ARCH)-uclibc/zImage-alpine-fix bs=1 count=$(shell expr $(MAX_KERNEL_SIZE) - 132) conv=sync of=$(ARCH)-uclibc/zImage-alpine-fix2
	mkimage -A arm -O linux -T kernel -a 0x00008000 -C none -e 0x00008000 -n 'DD-WRT' -d $(ARCH)-uclibc/zImage-alpine-fix2 $(ARCH)-uclibc/uImage;

#	dd if=$(ARCH)-uclibc/uImage bs=$(shell expr $(MAX_KERNEL_SIZE)) conv=sync of=$(ARCH)-uclibc/uImage.fix

	./tools/r9000/r9000 $(ARCH)-uclibc/uImage $(ARCH)-uclibc/vmlinux.uImage.normal add_image_size

	dd if=$(ARCH)-uclibc/root.squashfs of=$(ARCH)-uclibc/root.squashfs.final bs=2k conv=sync
	mkimage -A arm -O linux -C lzma -T kernel -a 0x40908000 \
		-e 0x40908000 -n 'Linux-DD-WRT' \
		-d $(ARCH)-uclibc/root.squashfs.final $(ARCH)-uclibc/squashfs.uImage
	./tools/r9000/r9000 \
		$(ARCH)-uclibc/squashfs.uImage \
		$(ARCH)-uclibc/squashfs.uImage.tmp
	cat $(ARCH)-uclibc/squashfs.uImage.tmp >> $(ARCH)-uclibc/vmlinux.uImage.normal



#	cat $(ARCH)-uclibc/vmlinux.uImage.normal > $(ARCH)-uclibc/vmlinux.uImage.tmp
#	dd if=$(ARCH)-uclibc/vmlinux.uImage.tmp bs=$(shell expr $(MAX_KERNEL_SIZE) - 64) conv=sync of=$(ARCH)-uclibc/vmlinux.uImage.final
#	dd if=$(ARCH)-uclibc/squashfs.uImage.tmp bs=64 count=1 >> $(ARCH)-uclibc/vmlinux.uImage.final
#	( \
#		dd if=$(ARCH)-uclibc/vmlinux.uImage.final bs=$(MAX_KERNEL_SIZE) conv=sync; \
#		dd if=$(ARCH)-uclibc/root.squashfs.final bs=64k; \
#	) > $(ARCH)-uclibc/alpine-sysupgrade.bin
	./tools/r9000/mkdniimg \
		-B $(MODULE_NAME) -v $(FW_VERSION) -r $(FW_REGION) -H $(HW_ID) \
		-i $(ARCH)-uclibc/vmlinux.uImage.normal \
		-o $(ARCH)-uclibc/$(MODULE_NAME)-$(FW_VERSION)$(FW_REGION).img
	./tools/r9000/mkdniimg \
		-B R8900 -v $(FW_VERSION) -r $(FW_REGION) -H $(HW_ID) \
		-i $(ARCH)-uclibc/vmlinux.uImage.normal \
		-o $(ARCH)-uclibc/R8900-$(FW_VERSION)$(FW_REGION).img

	./tools/r9000/mkdniimg \
		-B XR700 -v $(FW_VERSION) -r $(FW_REGION) -H $(HW_ID) \
		-i $(ARCH)-uclibc/vmlinux.uImage.normal \
		-o $(ARCH)-uclibc/XR700-$(FW_VERSION)$(FW_REGION).img



include rules/all.mk

.PHONY: all clean distclean mrproper install package
.PHONY: conf mconf oldconf kconf kmconf config menuconfig oldconfig
.PHONY: dummy fixkc libnet libpcap



