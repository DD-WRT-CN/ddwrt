-*- text -*-

Note: You are looking in the wrong place if you intend to compile a
      Unix version using the MINGW32 or the DJGPP development
      environments.  As far as the S-Lang library is concerned, these
      do not constitute Unix environments.  Read INSTALL.pc.

This distribution contains the source for the slang library, a
``slang-shell'' program called slsh, and dynamically loadable modules
that may be ``imported'' into the interpreter.  Be sure to install all
3 components.

---------------------------------------------------------------------
                           Prerequisites
---------------------------------------------------------------------

Some of the modules require third party libraries.  If the configure
script cannot find one of the libraries, the corresponding module will
not be built.  Currently, the following additional libraries are
strongly recommended:

   PCRE (Perl Compatible Regular Expression)
     URL: <http://www.pcre.org>

   PNG  (Portable Network Graphics)
     URL: <http://www.libpng.org/pub/png/>

   ZLIB (Z compression library)
     URL: <http://www.zlib.net/>

   ONIGURUMA (Regular expression library)
     URL: <http://www.geocities.jp/kosako3/oniguruma/>

On a Debian system, these libraries can be installed using:

  apt-get install libpng12-dev zlib1g-dev libpcre3-dev libonig-dev

 (Double check the package names-- the ones quoted above are
   appropriate for Debian Lenny)

If you have these installed in non-standard places and the configure
script cannot find them, then run configure with the "--with-pcre" and
"--with-png" options.  Use "./configure --help" to see other options.
In any case, these libraries are not required but without them the png
and pcre modules will not be created.

---------------------------------------------------------------------
Building and installing the S-Lang library
---------------------------------------------------------------------

Under Unix, the S-Lang library makes use of the GNU autoconf package.
The process may be as simple as:

   ./configure
   make  (or make static)
   make runtests (this builds the static library)
   make install  (or `make install-static` to install the static library)
   make clean

The first two steps:

   ./configure
   make

will cause the (shared) library and the .o files to be placed
src/elfobjs.  Using

   make static

will build a static version of the library in src/objs.  By default,
`make` builds the shared version of the library.

The 'runtests' step is designed to test the interpreter.  It uses the
static version of the library for this.

  ***Note: If you are installing the library for other users, be sure
           to set your umask value to 022 before running `make install`,
	   i.e.,

	      umask 022
	      make install

  ***Note: If you have the png, pcre, etc libraries installed in a
	   non-standard location, e.g., /opt/software, then the script
	   may not be able to find them.  The locations may be
	   specified using, e.g.,

              ./configure --with-pcre=/opt/software --with-png=/opt/software

           This assumes that the header files and the libraries are in
	   include/ and lib of /opt/software, resp.  If not, run

              ./configure --help

           for other options regarding the locations of the pcre and png.

           In any case, the pcre and png libraries are NOT REQUIRED.
	   But without them, the corresponding modules will not be created.

 ***Note:  By default, slsh is built using the slang readline
           interface.  To use GNU readline use the --with-readline=gnu
	   option.

 ***Note: Object files are placed in subdirectories with names
          ${ARCH}objs and ${ARCH}elfobjs, where ${ARCH} is set from
	  the environment.  This may be exploited for the purposes of
	  building the library for multiple architectures.  For
	  example, one might use ARCH=sun4 for a Sun 4 system, and
	  ARCH=i686 on a Linux system with a 32 bit processor.

	  In principle, any file generated by the configure process is
	  architecture specific and should be placed in an
	  architecture-specific directory.  This is currently not
	  supported by the configure script.  For this reason, when
	  building for a different architecture, the configure script
	  must be re-run.  

 ***Note: This package does not support the --srcdir command line
          option.  This option is typically used to compile separate
	  versions of the library.  If your intent is to do something
	  like

	       mkdir foo; cd foo; ../configure --srcdir=..; make

          then after reading the previous note, try:

	       setenv ARCH foo; ./configure; make         (csh syntax)
               ARCH=foo; export ARCH; ./configure make    (/bin/sh)

          The reason that --srcdir is not supported is that it fails
	  in the presence of symbolic links, e.g.,

	       cd foo; cd ..

	  does not bring you back where you started if foo is a
	  symbolic link.

By default, the slang library (libslang.so.*) will be installed into
/usr/local/lib and slang.h into /usr/local/include.  To install it
under some other directory, e.g.., /opt, the use the --prefix argument
when running the configure script, e.g.,

    ./configure --prefix=/opt

As mentioned above, simply running `make` will create a shared version
of the library.  If your system does not support such libraries, or
the build process fails to create a shared version of the library, you
may want to install the static version:

   make static
   make install-static

Below, I have attached the generic INSTALL instructions included in the
autoconf distribution.
----------------------------------------------------------------------------
Basic Installation
==================

   These are generic installation instructions.

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, a file
`config.cache' that saves the results of its tests to speed up
reconfiguring, and a file `config.log' containing compiler output
(useful mainly for debugging `configure').

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to the address given in the `README' so they can
be considered for the next release.  If at some point `config.cache'
contains results you don't want to keep, you may remove or edit it.

   The file `configure.in' is used to create `configure' by a program
called `autoconf'.  You only need `configure.in' if you want to change
it or regenerate `configure' using a newer version of `autoconf'.

The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and type
     `./configure' to configure the package for your system.  If you're
     using `csh' on an old version of System V, you might need to type
     `sh ./configure' instead to prevent `csh' from trying to execute
     `configure' itself.

     Running `configure' takes awhile.  While running, it prints some
     messages telling which features it is checking for.

  2. Type `make' to compile the package.

  3. Optionally, type `make check' to run any self-tests that come with
     the package.

  4. Type `make install' to install the programs and any data files and
     documentation.

  5. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.

Compilers and Options
=====================

   Some systems require unusual options for compilation or linking that
the `configure' script does not know about.  You can give `configure'
initial values for variables by setting them in the environment.  Using
a Bourne-compatible shell, you can do that on the command line like
this:
     CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure

Or on systems that have the `env' program, you can do it like this:
     env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure

Compiling For Multiple Architectures
====================================

   You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you must use a version of `make' that
supports the `VPATH' variable, such as GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.

   If you have to use a `make' that does not supports the `VPATH'
variable, you have to compile the package for one architecture at a time
in the source code directory.  After you have installed the package for
one architecture, use `make distclean' before reconfiguring for another
architecture.

Installation Names
==================

   By default, `make install' will install the package's files in
`/usr/local/bin', `/usr/local/man', etc.  You can specify an
installation prefix other than `/usr/local' by giving `configure' the
option `--prefix=PATH'.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
give `configure' the option `--exec-prefix=PATH', the package will use
PATH as the prefix for installing programs and libraries.
Documentation and other data files will still use the regular prefix.

   In addition, if you use an unusual directory layout you can give
options like `--bindir=PATH' to specify different values for particular
kinds of files.  Run `configure --help' for a list of the directories
you can set and what kinds of files go in them.

   If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure' the
option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.

Optional Features
=================

   Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).  The
`README' should mention any `--enable-' and `--with-' options that the
package recognizes.

   For packages that use the X Window System, `configure' can usually
find the X include and library files automatically, but if it doesn't,
you can use the `configure' options `--x-includes=DIR' and
`--x-libraries=DIR' to specify their locations.

Specifying the System Type
==========================

   There may be some features `configure' can not figure out
automatically, but needs to determine by the type of host the package
will run on.  Usually `configure' can figure that out, but if it prints
a message saying it can not guess the host type, give it the
`--host=TYPE' option.  TYPE can either be a short name for the system
type, such as `sun4', or a canonical name with three fields:
     CPU-COMPANY-SYSTEM

See the file `config.sub' for the possible values of each field.  If
`config.sub' isn't included in this package, then this package doesn't
need to know the host type.

   If you are building compiler tools for cross-compiling, you can also
use the `--target=TYPE' option to select the type of system they will
produce code for and the `--build=TYPE' option to select the type of
system on which you are compiling the package.

Sharing Defaults
================

   If you want to set default values for `configure' scripts to share,
you can create a site shell script called `config.site' that gives
default values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

Operation Controls
==================

   `configure' recognizes the following options to control how it
operates.

`--cache-file=FILE'
     Use and save the results of the tests in FILE instead of
     `./config.cache'.  Set FILE to `/dev/null' to disable caching, for
     debugging `configure'.

`--help'
     Print a summary of the options to `configure', and exit.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`--version'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`configure' also accepts some other, not widely useful, options.

