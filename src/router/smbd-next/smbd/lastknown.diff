Index: glob.h
===================================================================
--- glob.h	(revision 43158)
+++ glob.h	(working copy)
@@ -14,7 +14,7 @@
 #include "vfs_cache.h"
 #include "smberr.h"
 
-#define KSMBD_VERSION	"3.1.9"
+#define KSMBD_VERSION	"3.2.0"
 
 /* @FIXME clean up this code */
 
Index: smb1pdu.c
===================================================================
--- smb1pdu.c	(revision 43158)
+++ smb1pdu.c	(working copy)
@@ -850,6 +850,8 @@ int smb_handle_negotiate(struct ksmbd_work *work)
 		server_conf.signing == KSMBD_CONFIG_OPT_MANDATORY) {
 		conn->sign = true;
 		neg_rsp->SecurityMode |= SECMODE_SIGN_ENABLED;
+		if (server_conf.signing == KSMBD_CONFIG_OPT_MANDATORY)
+			neg_rsp->SecurityMode |= SECMODE_SIGN_REQUIRED;
 	}
 	neg_rsp->MaxMpxCount = cpu_to_le16(SMB1_MAX_MPX_COUNT);
 	neg_rsp->MaxNumberVcs = cpu_to_le16(SMB1_MAX_VCS);
@@ -5982,6 +5984,9 @@ static int find_first(struct ksmbd_work *work)
 		data_alignment_offset = 4 - params_count % 4;
 
 	memset(&d_info, 0, sizeof(struct ksmbd_dir_info));
+	d_info.smb1_name = kmalloc(NAME_MAX + 1, GFP_KERNEL);
+	if (!d_info.smb1_name)
+		goto err_out;
 	d_info.wptr = (char *)((char *)rsp + sizeof(struct smb_com_trans2_rsp) +
 			params_count + data_alignment_offset);
 
@@ -6045,7 +6050,14 @@ static int find_first(struct ksmbd_work *work)
 			continue;
 
 		ksmbd_kstat.kstat = &kstat;
-		d_info.name = de->name;
+
+		if (de->namelen > NAME_MAX) {
+			ksmbd_err("filename length exceeds 255 bytes.\n");
+			continue;
+		}
+		memcpy(d_info.smb1_name, de->name, de->namelen);
+		d_info.smb1_name[de->namelen] = '\0';
+		d_info.name = (const char *)d_info.smb1_name;
 		d_info.name_len = de->namelen;
 		rc = ksmbd_vfs_readdir_name(work,
 					    &ksmbd_kstat,
@@ -6131,6 +6143,7 @@ static int find_first(struct ksmbd_work *work)
 	inc_rfc1001_len(rsp_hdr, (10 * 2 + d_info.data_count +
 				params_count + 1 + data_alignment_offset));
 	kfree(srch_ptr);
+	kfree(d_info.smb1_name);
 	ksmbd_revert_fsids(work);
 	return 0;
 
@@ -6148,6 +6161,7 @@ err_out:
 		rsp->hdr.Status.CifsError = STATUS_UNEXPECTED_IO_ERROR;
 
 	kfree(srch_ptr);
+	kfree(d_info.smb1_name);
 	ksmbd_revert_fsids(work);
 	return 0;
 }
@@ -6229,6 +6243,9 @@ static int find_next(struct ksmbd_work *work)
 		data_alignment_offset = 4 - params_count % 4;
 
 	memset(&d_info, 0, sizeof(struct ksmbd_dir_info));
+	d_info.smb1_name = kmalloc(NAME_MAX + 1, GFP_KERNEL);
+	if (!d_info.smb1_name)
+		goto err_out;
 	d_info.wptr = (char *)((char *)rsp + sizeof(struct smb_com_trans2_rsp) +
 			params_count + data_alignment_offset);
 
@@ -6279,7 +6296,14 @@ static int find_next(struct ksmbd_work *work)
 			continue;
 
 		ksmbd_kstat.kstat = &kstat;
-		d_info.name = de->name;
+
+		if (de->namelen > NAME_MAX) {
+			ksmbd_err("filename length exceeds 255 bytes.\n");
+			continue;
+		}
+		memcpy(d_info.smb1_name, de->name, de->namelen);
+		d_info.smb1_name[de->namelen] = '\0';
+		d_info.name = (const char *)d_info.smb1_name;
 		d_info.name_len = de->namelen;
 		rc = ksmbd_vfs_readdir_name(work,
 					    &ksmbd_kstat,
@@ -6352,6 +6376,7 @@ static int find_next(struct ksmbd_work *work)
 	inc_rfc1001_len(rsp_hdr, (10 * 2 + d_info.data_count +
 		params_count + 1 + data_alignment_offset));
 	kfree(pathname);
+	kfree(d_info.smb1_name);
 	ksmbd_fd_put(work, dir_fp);
 	return 0;
 
@@ -6370,6 +6395,7 @@ err_out:
 			STATUS_UNEXPECTED_IO_ERROR;
 
 	ksmbd_fd_put(work, dir_fp);
+	kfree(d_info.smb1_name);
 	kfree(pathname);
 	return 0;
 }
Index: smb2pdu.c
===================================================================
--- smb2pdu.c	(revision 43158)
+++ smb2pdu.c	(working copy)
@@ -564,8 +564,10 @@ int smb2_allocate_rsp_buf(struct ksmbd_work *work)
 	size_t sz = small_sz;
 	int cmd = le16_to_cpu(hdr->Command);
 
-	if (cmd == SMB2_IOCTL_HE || cmd == SMB2_QUERY_DIRECTORY_HE)
+	if (cmd == SMB2_IOCTL_HE || cmd == SMB2_QUERY_DIRECTORY_HE) {
 		sz = large_sz;
+		work->set_trans_buf = true;
+	}
 
 	if (cmd == SMB2_QUERY_INFO_HE) {
 		struct smb2_query_info_req *req;
@@ -573,8 +575,10 @@ int smb2_allocate_rsp_buf(struct ksmbd_work *work)
 		req = REQUEST_BUF(work);
 		if (req->InfoType == SMB2_O_INFO_FILE &&
 			(req->FileInfoClass == FILE_FULL_EA_INFORMATION ||
-				req->FileInfoClass == FILE_ALL_INFORMATION))
+				req->FileInfoClass == FILE_ALL_INFORMATION)) {
 			sz = large_sz;
+			work->set_trans_buf = true;
+		}
 	}
 
 	/* allocate large response buf for chained commands */
@@ -581,7 +585,8 @@ int smb2_allocate_rsp_buf(struct ksmbd_work *work)
 	if (le32_to_cpu(hdr->NextCommand) > 0)
 		sz = large_sz;
 
-	if (server_conf.flags & KSMBD_GLOBAL_FLAG_CACHE_TBUF)
+	if (server_conf.flags & KSMBD_GLOBAL_FLAG_CACHE_TBUF &&
+			work->set_trans_buf)
 		work->response_buf = ksmbd_find_buffer(sz);
 	else
 		work->response_buf = ksmbd_alloc_response(sz);
@@ -1762,15 +1767,7 @@ int smb2_session_logoff(struct ksmbd_work *work)
 	ksmbd_close_session_fds(work);
 	ksmbd_conn_wait_idle(conn);
 
-	if (ksmbd_tree_conn_session_logoff(sess)) {
-		struct smb2_logoff_req *req = REQUEST_BUF(work);
-
-		ksmbd_debug(SMB, "Invalid tid %d\n", req->hdr.Id.SyncId.TreeId);
-		rsp->hdr.Status = STATUS_NETWORK_NAME_DELETED;
-		smb2_set_err_rsp(work);
-		return 0;
-	}
-
+	ksmbd_tree_conn_session_logoff(sess);
 	ksmbd_destroy_file_table(&sess->file_table);
 	sess->state = SMB2_SESSION_EXPIRED;
 
@@ -7063,7 +7060,7 @@ static int fsctl_query_allocated_ranges(struct ksm
 	int in_count, int *out_count)
 {
 	struct ksmbd_file *fp;
-	u64 start, length;
+	loff_t start, length;
 	int ret = 0;
 
 	*out_count = 0;
@@ -7077,7 +7074,7 @@ static int fsctl_query_allocated_ranges(struct ksm
 	start = le64_to_cpu(qar_req->file_offset);
 	length = le64_to_cpu(qar_req->length);
 
-	ret = ksmbd_vfs_fiemap(fp, start, length,
+	ret = ksmbd_vfs_fqar_lseek(fp, start, length,
 			qar_rsp, in_count, out_count);
 	if (ret && ret != -E2BIG)
 		*out_count = 0;
Index: vfs_cache.c
===================================================================
--- vfs_cache.c	(revision 43158)
+++ vfs_cache.c	(working copy)
@@ -140,9 +140,7 @@ void ksmbd_fd_set_delete_on_close(struct ksmbd_fil
 		return;
 	}
 
-	fp->delete_on_close = 1;
-	if (file_info == F_CREATED)
-		fp->f_ci->m_flags |= S_DEL_ON_CLS;
+	fp->f_ci->m_flags |= S_DEL_ON_CLS;
 }
 
 static void ksmbd_inode_hash(struct ksmbd_inode *ci)
@@ -266,8 +264,7 @@ static void __ksmbd_inode_close(struct ksmbd_file
 
 	if (atomic_dec_and_test(&ci->m_count)) {
 		write_lock(&ci->m_lock);
-		if ((ci->m_flags & (S_DEL_ON_CLS | S_DEL_PENDING)) ||
-				fp->delete_on_close) {
+		if (ci->m_flags & (S_DEL_ON_CLS | S_DEL_PENDING)) {
 			dentry = filp->f_path.dentry;
 			dir = dentry->d_parent;
 			ci->m_flags &= ~(S_DEL_ON_CLS | S_DEL_PENDING);
Index: vfs.c
===================================================================
--- vfs.c	(revision 43158)
+++ vfs.c	(working copy)
@@ -16,7 +16,6 @@
 #include <linux/blkdev.h>
 #include <linux/fsnotify.h>
 #include <linux/dcache.h>
-#include <linux/fiemap.h>
 #include <linux/slab.h>
 #include <linux/vmalloc.h>
 
@@ -1556,25 +1555,22 @@ int ksmbd_vfs_zero_data(struct ksmbd_work *work,
 #endif
 }
 
-int ksmbd_vfs_fiemap(struct ksmbd_file *fp, u64 start, u64 length,
+int ksmbd_vfs_fqar_lseek(struct ksmbd_file *fp, loff_t start, loff_t length,
 	struct file_allocated_range_buffer *ranges,
 	int in_count, int *out_count)
 {
+	struct file *f = fp->filp;
 	struct inode *inode = FP_INODE(fp);
-	struct super_block *sb = inode->i_sb;
-	struct fiemap_extent_info fieinfo = { 0, };
-	u64 maxbytes = (u64) sb->s_maxbytes, extent_len, end;
+	loff_t maxbytes = (u64)inode->i_sb->s_maxbytes, end;
+	loff_t extent_start, extent_end;
 	int ret = 0;
-	struct file_allocated_range_buffer *range;
-	struct fiemap_extent *extents;
-	int i, range_idx;
 
-	if (!inode->i_op->fiemap)
-		return -EOPNOTSUPP;
-
 	if (start > maxbytes)
 		return -EFBIG;
 
+	if (!in_count)
+		return 0;
+
 	/*
 	 * Shrink request scope to what the fs can actually handle.
 	 */
@@ -1581,91 +1577,41 @@ int ksmbd_vfs_zero_data(struct ksmbd_work *work,
 	if (length > maxbytes || (maxbytes - length) < start)
 		length = maxbytes - start;
 
-	fieinfo.fi_extents_max = 32;
-	extents = kmalloc_array(fieinfo.fi_extents_max,
-			sizeof(struct fiemap_extent), GFP_KERNEL);
-	if (!extents)
-		return -ENOMEM;
-	fieinfo.fi_extents_start = (struct fiemap_extent __user *)extents;
+	if (start + length > inode->i_size)
+		length = inode->i_size - start;
 
-	range_idx = 0;
-	range = ranges + range_idx;
-	range->file_offset = cpu_to_le64(start);
-	range->length = 0;
-
+	*out_count = 0;
 	end = start + length;
-	*out_count = 0;
-
-	while (start < end) {
-		ret = inode->i_op->fiemap(inode, &fieinfo, start, length);
-		if (ret)
-			goto out;
-		else if (fieinfo.fi_extents_mapped == 0) {
-			if (le64_to_cpu(range->length))
-				*out_count = range_idx + 1;
-			else
-				*out_count = range_idx;
-			goto out;
+	while (start < end && *out_count < in_count) {
+		ret = extent_start = f->f_op->llseek(f, start, SEEK_DATA);
+		if (ret < 0) {
+			if (ret == -ENXIO)
+				ret = 0;
+			break;
 		}
+		ret = 0;
 
-		for (i = 0; i < fieinfo.fi_extents_mapped; i++) {
-			if (extents[i].fe_logical <=
-					le64_to_cpu(range->file_offset) +
-					le64_to_cpu(range->length)) {
-				length = end - le64_to_cpu(range->file_offset);
-				extent_len = extents[i].fe_length;
-				if (extents[i].fe_logical <
-					le64_to_cpu(range->file_offset)) {
-					u64 first_half =
-						le64_to_cpu(range->file_offset)
-						- extents[i].fe_logical;
-					if (first_half > extent_len)
-						continue;
-					extent_len -= first_half;
-				}
-				extent_len = min_t(u64, extent_len,
-						length);
-				le64_add_cpu(&range->length,
-						extent_len);
-			} else {
-				if (extents[i].fe_logical >= end)
-					break;
-				/* skip this increment if the range is
-				 * not initialized
-				 */
-				if (range->length)
-					range_idx++;
-				if (range_idx >= in_count) {
-					*out_count = range_idx;
-					ret = -E2BIG;
-					goto out;
-				}
+		if (extent_start >= end)
+			break;
 
-				length = end - extents[i].fe_logical;
-				extent_len = min_t(u64, extents[i].fe_length,
-						length);
+		ret = extent_end = f->f_op->llseek(f, extent_start, SEEK_HOLE);
+		if (ret < 0) {
+			if (ret == -ENXIO)
+				ret = 0;
+			break;
+		} else if (extent_start >= extent_end) {
+			ret = 0;
+			break;
+		}
+		ret = 0;
 
-				range = ranges + range_idx;
-				range->file_offset =
-					cpu_to_le64(extents[i].fe_logical);
-				range->length = cpu_to_le64(extent_len);
-			}
+		ranges[*out_count].file_offset = cpu_to_le64(extent_start);
+		ranges[(*out_count)++].length =
+			cpu_to_le64(min(extent_end, end) - extent_start);
 
-			if ((extents[i].fe_flags & FIEMAP_EXTENT_LAST) ||
-					le64_to_cpu(range->file_offset) +
-					le64_to_cpu(range->length) >= end) {
-				*out_count = range_idx + 1;
-				goto out;
-			}
-		}
-
-		start = le64_to_cpu(range->file_offset) +
-			le64_to_cpu(range->length);
-		length = end - start;
+		start = extent_end;
 	}
 
-out:
-	kfree(extents);
 	return ret;
 }
 
Index: oplock.c
===================================================================
--- oplock.c	(revision 43158)
+++ oplock.c	(working copy)
@@ -667,8 +667,10 @@ static void wait_for_break_ack(struct oplock_info
 	}
 }
 
-static int oplock_break_pending(struct oplock_info *opinfo, int req_op_level)
+static int oplock_break_pending(struct oplock_info *opinfo)
 {
+	int prev_op_level = opinfo->level;
+
 	while  (test_and_set_bit(0, &opinfo->pending_break)) {
 #if LINUX_VERSION_CODE < KERNEL_VERSION(3,17,0)
 		wait_on_bit(&opinfo->pending_break, 0, bit_wait, TASK_UNINTERRUPTIBLE);
@@ -681,7 +683,7 @@ static void wait_for_break_ack(struct oplock_info
 
 		if (opinfo->op_state == OPLOCK_CLOSING)
 			return -ENOENT;
-		else if (!opinfo->is_lease && opinfo->level <= req_op_level)
+		else if (!opinfo->is_lease && opinfo->level <= prev_op_level)
 			return 1;
 	}
 	return 0;
@@ -1073,7 +1075,7 @@ static int oplock_break(struct oplock_info *brk_op
 
 		atomic_inc(&brk_opinfo->breaking_cnt);
 
-		err = oplock_break_pending(brk_opinfo, req_op_level);
+		err = oplock_break_pending(brk_opinfo);
 		if (err)
 			return err < 0 ? err : 0;
 
@@ -1107,7 +1109,7 @@ static int oplock_break(struct oplock_info *brk_op
 		else
 			atomic_dec(&brk_opinfo->breaking_cnt);
 	} else {
-		err = oplock_break_pending(brk_opinfo, req_op_level);
+		err = oplock_break_pending(brk_opinfo);
 		if (err)
 			return err < 0 ? err : 0;
 
Index: vfs.h
===================================================================
--- vfs.h	(revision 43158)
+++ vfs.h	(working copy)
@@ -92,6 +92,9 @@ struct ksmbd_file;
 
 struct ksmbd_dir_info {
 	const char	*name;
+#ifdef CONFIG_SMB_INSECURE_SERVER
+	char		*smb1_name;
+#endif
 	char		*wptr;
 	char		*rptr;
 	int		name_len;
@@ -226,7 +229,7 @@ int ksmbd_vfs_zero_data(struct ksmbd_work *work,
 			 loff_t len);
 
 struct file_allocated_range_buffer;
-int ksmbd_vfs_fiemap(struct ksmbd_file *fp, u64 start, u64 length,
+int ksmbd_vfs_fqar_lseek(struct ksmbd_file *fp, loff_t start, loff_t length,
 			struct file_allocated_range_buffer *ranges,
 			int in_count, int *out_count);
 int ksmbd_vfs_unlink(struct dentry *dir, struct dentry *dentry);
Index: ksmbd_work.c
===================================================================
--- ksmbd_work.c	(revision 43158)
+++ ksmbd_work.c	(working copy)
@@ -38,7 +38,8 @@ struct ksmbd_work *ksmbd_alloc_work_struct(void)
 void ksmbd_free_work_struct(struct ksmbd_work *work)
 {
 	WARN_ON(work->saved_cred_level != 0);
-	if (server_conf.flags & KSMBD_GLOBAL_FLAG_CACHE_TBUF)
+	if (server_conf.flags & KSMBD_GLOBAL_FLAG_CACHE_TBUF &&
+			work->set_trans_buf)
 		ksmbd_release_buffer(RESPONSE_BUF(work));
 	else
 		ksmbd_free_response(RESPONSE_BUF(work));
@@ -66,7 +67,7 @@ int ksmbd_work_pool_init(void)
 					sizeof(struct ksmbd_work), 0,
 					SLAB_HWCACHE_ALIGN, NULL);
 	if (!work_cache)
-		return -EINVAL;
+		return -ENOMEM;
 	return 0;
 }
 
@@ -74,7 +75,7 @@ int ksmbd_workqueue_init(void)
 {
 	ksmbd_wq = alloc_workqueue("ksmbd-io", 0, 0);
 	if (!ksmbd_wq)
-		return -EINVAL;
+		return -ENOMEM;
 	return 0;
 }
 
Index: ksmbd_work.h
===================================================================
--- ksmbd_work.h	(revision 43158)
+++ ksmbd_work.h	(working copy)
@@ -71,6 +71,7 @@ struct ksmbd_work {
 	/* Is this SYNC or ASYNC ksmbd_work */
 	bool                            syncronous:1;
 	bool                            need_invalidate_rkey:1;
+	bool                            set_trans_buf:1;
 
 	unsigned int                    remote_key;
 	/* cancel works */
Index: vfs_cache.h
===================================================================
--- vfs_cache.h	(revision 43158)
+++ vfs_cache.h	(working copy)
@@ -94,7 +94,6 @@ struct ksmbd_file {
 	bool				is_resilient;
 	bool				is_persistent;
 	bool				is_nt_open;
-	bool				delete_on_close;
 	bool				attrib_only;
 
 	char				client_guid[16];
