# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2004-2006 Silicon Graphics, Inc.
# All Rights Reserved.
#
# @configure_input@
#

ifndef _BUILDDEFS_INCLUDED_
_BUILDDEFS_INCLUDED_ = 1

DEBUG = @debug_build@
OPTIMIZER = @opt_build@
MALLOCLIB = @malloc_lib@
LOADERFLAGS = @LDFLAGS@
LTLDFLAGS = @LDFLAGS@
CFLAGS = @CFLAGS@ -D_FILE_OFFSET_BITS=64 -Wno-address-of-packed-member
BUILD_CFLAGS = @BUILD_CFLAGS@ -D_FILE_OFFSET_BITS=64

# make sure we don't pick up whacky LDFLAGS from the make environment and
# only use what we calculate from the configured options above.
LDFLAGS =

LIBRT = @librt@
LIBUUID = @libuuid@
LIBPTHREAD = @libpthread@
LIBTERMCAP = @libtermcap@
LIBEDITLINE = @libeditline@
LIBBLKID = @libblkid@
LIBDEVMAPPER = @libdevmapper@
LIBXFS = $(TOPDIR)/libxfs/libxfs.la
LIBFROG = $(TOPDIR)/libfrog/libfrog.la
LIBXCMD = $(TOPDIR)/libxcmd/libxcmd.la
LIBXLOG = $(TOPDIR)/libxlog/libxlog.la
LIBHANDLE = $(TOPDIR)/libhandle/libhandle.la

PKG_NAME	= @pkg_name@
PKG_USER	= @pkg_user@
PKG_GROUP	= @pkg_group@
PKG_RELEASE	= @pkg_release@
PKG_VERSION	= @pkg_version@
PKG_DISTRIBUTION= @pkg_distribution@

prefix		= @prefix@
exec_prefix	= @exec_prefix@
datarootdir	= @datarootdir@
top_builddir	= @top_builddir@

PKG_SBIN_DIR	= @sbindir@
PKG_ROOT_SBIN_DIR = @root_sbindir@
PKG_ROOT_LIB_DIR= @root_libdir@@libdirsuffix@
PKG_LIB_DIR	= @libdir@@libdirsuffix@
PKG_INC_DIR	= @includedir@/xfs
DK_INC_DIR	= @includedir@/disk
PKG_MAN_DIR	= @mandir@
PKG_DOC_DIR	= @datadir@/doc/@pkg_name@
PKG_LOCALE_DIR	= @datadir@/locale

CC		= @cc@
BUILD_CC	= @BUILD_CC@
AWK		= @awk@
SED		= @sed@
TAR		= @tar@
ZIP		= @zip@
MAKE		= @make@
ECHO		= @echo@
SORT		= @sort@
LN_S		= @LN_S@
SHELL		= @SHELL@
LIBTOOL		= @LIBTOOL@
MAKEDEPEND	= @makedepend@

MSGFMT		= @msgfmt@
MSGMERGE	= @msgmerge@
XGETTEXT	= @xgettext@
LOCALIZED_FILES	= @LOCALIZED_FILES@

RPM		= @rpm@
RPMBUILD	= @rpmbuild@
RPM_VERSION	= @rpm_version@

ENABLE_SHARED	= @enable_shared@
ENABLE_GETTEXT	= @enable_gettext@
ENABLE_EDITLINE	= @enable_editline@
ENABLE_BLKID	= @enable_blkid@
ENABLE_SCRUB	= @enable_scrub@

HAVE_ZIPPED_MANPAGES = @have_zipped_manpages@

HAVE_FADVISE = @have_fadvise@
HAVE_MADVISE = @have_madvise@
HAVE_MINCORE = @have_mincore@
HAVE_SENDFILE = @have_sendfile@
HAVE_GETMNTENT = @have_getmntent@
HAVE_FALLOCATE = @have_fallocate@
HAVE_FIEMAP = @have_fiemap@
HAVE_PREADV = @have_preadv@
HAVE_PWRITEV2 = @have_pwritev2@
HAVE_COPY_FILE_RANGE = @have_copy_file_range@
HAVE_SYNC_FILE_RANGE = @have_sync_file_range@
HAVE_SYNCFS = @have_syncfs@
HAVE_READDIR = @have_readdir@
HAVE_MNTENT = @have_mntent@
HAVE_FLS = @have_fls@
HAVE_FSETXATTR = @have_fsetxattr@
HAVE_MREMAP = @have_mremap@
NEED_INTERNAL_FSXATTR = @need_internal_fsxattr@
NEED_INTERNAL_FSCRYPT_ADD_KEY_ARG = @need_internal_fscrypt_add_key_arg@
HAVE_GETFSMAP = @have_getfsmap@
HAVE_STATFS_FLAGS = @have_statfs_flags@
HAVE_MAP_SYNC = @have_map_sync@
HAVE_DEVMAPPER = @have_devmapper@
HAVE_MALLINFO = @have_mallinfo@
HAVE_LIBATTR = @have_libattr@
HAVE_LIBICU = @have_libicu@
HAVE_OPENAT = @have_openat@
HAVE_FSTATAT = @have_fstatat@
HAVE_SG_IO = @have_sg_io@
HAVE_HDIO_GETGEO = @have_hdio_getgeo@
HAVE_SYSTEMD = @have_systemd@
SYSTEMD_SYSTEM_UNIT_DIR = @systemd_system_unit_dir@
HAVE_CROND = @have_crond@
CROND_DIR = @crond_dir@

GCCFLAGS = -funsigned-char -fno-strict-aliasing -Wall
#	   -Wbitwise -Wno-transparent-union -Wno-old-initializer -Wno-decl

PCFLAGS = -D_GNU_SOURCE $(GCCFLAGS)
ifeq ($(HAVE_UMODE_T),yes)
PCFLAGS += -DHAVE_UMODE_T
endif
DEPENDFLAGS = -D__linux__
ifeq ($(HAVE_FLS),yes)
LCFLAGS+= -DHAVE_FLS
endif
ifeq ($(HAVE_MNTENT),yes)
PCFLAGS+= -DHAVE_MNTENT
endif
ifeq ($(HAVE_FSETXATTR),yes)
PCFLAGS+= -DHAVE_FSETXATTR
endif
ifeq ($(ENABLE_BLKID),yes)
PCFLAGS+= -DENABLE_BLKID
endif
ifeq ($(NEED_INTERNAL_FSXATTR),yes)
PCFLAGS+= -DOVERRIDE_SYSTEM_FSXATTR
endif
ifeq ($(NEED_INTERNAL_FSCRYPT_ADD_KEY_ARG),yes)
PCFLAGS+= -DOVERRIDE_SYSTEM_FSCRYPT_ADD_KEY_ARG
endif
ifeq ($(HAVE_GETFSMAP),yes)
PCFLAGS+= -DHAVE_GETFSMAP
endif
ifeq ($(HAVE_FALLOCATE),yes)
PCFLAGS += -DHAVE_FALLOCATE
endif

LIBICU_LIBS = @libicu_LIBS@
LIBICU_CFLAGS = @libicu_CFLAGS@

SANITIZER_CFLAGS += @addrsan_cflags@ @threadsan_cflags@ @ubsan_cflags@
SANITIZER_LDFLAGS += @addrsan_ldflags@ @threadsan_ldflags@ @ubsan_ldflags@

# Use special ar/ranlib wrappers if we have lto
HAVE_LTO = @have_lto@
ifeq ($(HAVE_LTO),yes)
OPTIMIZER += @lto_cflags@
LOADERFLAGS += @lto_ldflags@
AR = @gcc_ar@
RANLIB = @gcc_ranlib@
endif

GCFLAGS = $(DEBUG) \
	  -DVERSION=\"$(PKG_VERSION)\" -DLOCALEDIR=\"$(PKG_LOCALE_DIR)\"  \
	  -DPACKAGE=\"$(PKG_NAME)\" -I$(TOPDIR)/include -I$(TOPDIR)/libxfs \
	  -I$(TOPDIR)

ifeq ($(ENABLE_GETTEXT),yes)
GCFLAGS += -DENABLE_GETTEXT
endif

BUILD_CFLAGS += $(GCFLAGS) $(PCFLAGS)
# First, Sanitizer, Global, Platform, Local CFLAGS
CFLAGS += $(FCFLAGS) $(SANITIZER_CFLAGS) $(OPTIMIZER) $(GCFLAGS) $(PCFLAGS) $(LCFLAGS)

include $(TOPDIR)/include/buildmacros

endif

#
# For targets that should always be rebuilt,
# define a target that is never up-to-date.
# Targets needing this should depend on $(_FORCE)
_FORCE = __force_build
