#!/bin/sh
######################################################################
# This program is free software; you can redistribute it and/or      #
# modify it under the terms of the GNU General Public License as     #
# published by the Free Software Foundation; either version 3 of the #
# License, or (at your option) any later version.                    #
#                                                                    #
# This program is distributed in the hope that it will be useful,    #
# but WITHOUT ANY WARRANTY; without even the implied warranty of     #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      #
# GNU General Public License for more details.                       #
#                                                                    #
# You should have received a copy of the GNU General Public License  #
# along with this program; if not, write to the                      #
# Free Software Foundation, Inc.,                                    #
# 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA             #
######################################################################
# This file is part of a Milkfish Embedded OpenSER SIP Router Setup  #
# More information can be found at http://www.milkfish.org           #
#                                                                    #
# The Milkfish Router Services - Main Executable Shell Script        #
#                                                                    #
# Built/Version:  20071230                                           #
# Author/Contact: Franz Streibl <fronce@sipwerk.com>                 #
# Copyright (C) 2007 by sipwerk - All rights reserved.               #
#                                                                    #
# Please note that this software is under development and comes with #
# absolutely no warranty, to the extend permitted by applicable law. #
######################################################################

. /usr/lib/milkfish_functions.sh

mf_printhelp () {
    mf_feedback "Usage: milkfish_services <service> [<action> [ <argument1> [ <argument2> ] ] ]"
    echo "Valid <service> options are:"
    echo " "
    echo "audit          : Auditing service for measuring the availability and uptime"
    echo "fwtest         : Firewall test utility performing a quick portscan"
    echo "echotest       : Signaling test utility responding with the outgoing INVITEs SIP/SDP"
    echo "dynsip         : Dynamic SIP service routing personal FQDN calls to the WAN IP address"
    echo "simple         : Send an instant SIP/SIMPLE message - arguments: destination-sip:uri:port message"
    echo "phonebook      : Print short and detailed locally handled user list phonebook"
    echo "sipdb          : Local SIP user database management services"    
    #echo "dyndns         : Dynamic DNS service updating your DDNS service with the WAN IP address"
    echo "pppoe-reconnect: Checks whether a PPPoE reconnect is necessary and performs one if so"
    echo "check          : Check for registration status and service activation at milkfish.org"
    echo "status         : Shows the local Router Status (IP addresses, SER Stats, RTPproxy, ...)"
    #echo "sipstart       : Initialises the Milkfish Environment Processes (Openser and RTPproxy)"
    #echo "sipstop        : Stops the Milkfish Environment Processes (Openser and RTPproxy)"
    #echo "siprestart     : Restarts the Milkfish Environment Processes (Openser and RTPproxy)"
    echo "start          : Activates the Milkfish Services (starts a background process)"
    echo "                 All enabled services will be updated automatically"
    echo "stop           : Stop the Milkfish Services (ends all background processes)"
    echo "                 All enabled services will NOT be updated automatically"
    echo "help           : Show this manual"
    echo " "
    echo "Valid <action> options for the audit service are:"
    echo " "
    echo "router         : Manually updates the router audit once"
    echo "openser        : Manually updates the $SERNAME audit once (if $SERNAME is running)"
    echo "results        : Download and display the actual audit results for this router"
    echo "activate       : Activate the Audit Service at milkfish.org"
    echo "deactivate     : Deactivate the Audit Service at milkfish.org"
    echo " "
    echo "Valid <action> options for the sipdb service are:"
    echo " "
    echo "store          : Stores the volatile SIP user database to flash memory"
    echo "restore        : Restores SIP user database from flash memory"
    echo "flush          : Flushes the volatile SIP user database (not the persistent ones)"
    echo "adduser        : Adds a user to the volatile SIP user database - arguments: username password"
    echo "rmuser         : Removes a user from the volatile SIP user database - argument: username"
    echo "addalias       : Adds an alias to the volatile SIP user database - arguments: alias uri"
    echo "rmalias        : Removes an alias from the volatile SIP user database - argument: alias"
    echo "rmlocation     : Removes an active location from the volatile SIP user database - argument: location"
    echo "                 Locations are associated to every active account, this means"
    echo "                 also to UAs only using the Outbound Proxy feature."
    echo " "
    echo "Valid NVRAM sipdb <action> options are:"
    echo " "
    echo "storenv        : Stores the volatile SIP user database to NVRAM (max. 10 entries)"
    echo "restorenv      : Restores SIP user database from NVRAM"
    echo "flushnv        : Deletes all SIP user database entries inside NVRAM"
    echo " "
    echo "Please use \"milkfish_services openserctl restart\" afterwards for changes to take effect"
    echo " "
    echo "Security Note  : Install the curl packages to enable SSL secured Dynsip Updates and Audit Services"
    echo " "
}

SERNAME="OpenSER"
OPENSERPIDFILE=/var/run/openser.pid
RTPPROXYPIDFILE=/var/run/rtpproxy.pid
TIMESTAMPFILE=/var/log/ip-up.log
SIPSTARTUPSCRIPT=/etc/init.d/S78milkfish_sip
RUNDIR=/var/run
BASENAME=$(basename $0)
LOGGER=$(which logger)

##################################################

AUDITSWITCH=$(mf_load_setting milkfish_audit)
DYNSIPSWITCH=$(mf_load_setting milkfish_dynsip)
PPPTIME=$(mf_load_setting milkfish_ppptime)
USERNAME=$(mf_load_setting milkfish_username)
PASSWORD=$(mf_load_setting milkfish_password)
ROUTERID=$(mf_load_setting milkfish_routerid)
DSUSERNAME=$(mf_load_setting milkfish_dsusername)
DSPASSWORD=$(mf_load_setting milkfish_dspassword)
DSDOMAIN=$(mf_load_setting milkfish_dynsipdomain)
DOMAIN=${DSDOMAIN:-$USERNAME.homesip.net}
DYNSIPURL=$(mf_load_setting milkfish_dynsipurl)
DYNSIPIP="something"
#

DDNSUSERNM=$(mf_load_setting ddns_username)
DDNSPASSWD=$(mf_load_setting ddns_passwd)
DDNSHOSTNM=$(mf_load_setting ddns_hostname)
DDNSSERVER=$(mf_load_setting ddns_server)
DDNSSWITCH=$(mf_load_setting ddns_enable)
DDNSDCACHE=$DYNSIPIP 
#DDNSDCACHE=$(nslookup $DDNSHOSTNM|sed s/[^0-9.]//g|tail -n1)


case $1 in
    h)
	mf_printhelp
	exit 0
      ;;
    -h)
	mf_printhelp
	exit 0
      ;;
    -help)
	mf_printhelp
	exit 0
      ;;
    --help)          
	mf_printhelp
	exit 0
      ;;
    help)
	mf_printhelp
	exit 0
      ;;
    rw)
	[ -e "$2" ] && mf_rw $2 && mf_feedback "Copying $2 to $2..."
	exit 0
      ;;
    reboot)
	mf_reboot
	exit 0
      ;;
    status)
	mf_router_status
	exit 0
      ;;
    sipstart)
	mf_sip_start
	exit 0
      ;;
    sipstop)
	mf_sip_stop
	exit 0
      ;;
    siprestart)
	mf_sip_restart
	exit 0
      ;;
    check)
	mf_settings_check milkfish_username $USERNAME
	mf_settings_check milkfish_password $PASSWORD
	mf_services_check
	exit 0
      ;;
    simple)
	CHECK2=${2:-NULL}
	if [ $CHECK2 = "NULL" ] ; then
	    mf_printhelp
	    echo "ERROR: $CHECK2 is not a valid destination for service $1 - aborting"
	    exit 1
	fi
	mf_feedback "Sending SIMPLE message to $2 ..."
	mf_simple $2 $3 $4 $5 $6 $7 $8 $9 $10 $11 $12 $13 $14 $15 $16 $17 $18 $19 $20 $21 $22 $23
	exit 0
      ;;
    simpledd)
	CHECK2=${2:-NULL}
	if [ $CHECK2 = "NULL" ] ; then
	    mf_printhelp
	    echo "ERROR: $CHECK2 is not a valid destination for service $1 - aborting"
	    exit 1
	fi
	mf_feedback "Sending SIMPLE message to $2 ..."
	mf_simpledd $2 $3 $4 $5 $6 $7 $8 $9 $10 $11 $12 $13 $14 $15 $16 $17 $18 $19 $20 $21 $22 $23
	exit 0
      ;;
    phonebook)
	mf_phonebook
	exit 0
      ;;
    phonebookhtml)
	mf_phonebook_html
	exit 0
      ;;
    phonebookhtmltable)
	mf_phonebook_htmltable
	exit 0
      ;;
    ddactive)
	mf_ddactive
	exit 0
      ;;
    sipdb)
        case $2 in
        store)
	    mf_sipdb_store
	    exit 0
	  ;;
	restore)
	    mf_sipdb_restore
	    exit 0
	  ;;
	flush)
	    mf_sipdb_flush
	    exit 0
	  ;;
        storenv)
	    mf_sipdb_storenv
	    exit 0
	  ;;
	restorenv)
	    mf_sipdb_restorenv
	    exit 0
	  ;;
	restorenvdd)
	    mf_sipdb_restorenvdd
	    exit 0
	  ;;
	flushnv)
	    mf_sipdb_flushnv
	    exit 0
	  ;;
	adduser)
	    CHECK3=${3:-NULL}
	    if [ $CHECK3 = "NULL" ] ; then
		mf_printhelp
		echo "ERROR: $CHECK3 is not a valid argument for action $2 of service $1 - aborting"
		exit 1
	    fi
	    CHECK4=${4:-NULL}
	    if [ $CHECK4 = "NULL" ] ; then
		mf_printhelp
		echo "ERROR: $CHECK4 is not a valid argument for action $2 of service $1 - aborting"
		exit 1
	    fi
	    mf_feedback "Trying to add user $3 with password $4 to user database..."
	    mf_sipdb_adduser $3 $4
	    exit 0
	  ;;
	rmuser)
	    CHECK3=${3:-NULL}
	    if [ $CHECK3 = "NULL" ] ; then
		mf_printhelp
		echo "ERROR: $CHECK3 is not a valid argument for action $2 of service $1 - aborting"
		exit 1
	    fi
	    mf_feedback "Trying to remove user $3 from user database..."
	    mf_sipdb_rmuser $3
	    exit 0
	  ;;
	addalias)
	    CHECK3=${3:-NULL}
	    if [ $CHECK3 = "NULL" ] ; then
		mf_printhelp
		echo "ERROR: $CHECK3 is not a valid argument for action $2 of service $1 - aborting"
		exit 1
	    fi
	    CHECK4=${4:-NULL}
	    if [ $CHECK4 = "NULL" ] ; then
		mf_printhelp
		echo "ERROR: $CHECK4 is not a valid argument for action $2 of service $1 - aborting"
		exit 1
	    fi
	    mf_feedback "Trying to add alias $3 for the uri $4 to user database..."
	    mf_sipdb_addalias $3 sip\\:$4
	    exit 0
	  ;;
	rmalias)
	    CHECK3=${3:-NULL}
	    if [ $CHECK3 = "NULL" ] ; then
		mf_printhelp
		echo "ERROR: $CHECK3 is not a valid argument for action $2 of service $1 - aborting"
		exit 1
	    fi
	    mf_feedback "Trying to remove alias $3 from user database..."
	    mf_sipdb_rmalias $3
	    exit 0
	  ;;
	rmlocation)
	    CHECK3=${3:-NULL}
	    if [ $CHECK3 = "NULL" ] ; then
		mf_printhelp
		echo "ERROR: $CHECK3 is not a valid argument for action $2 of service $1 - aborting"
		exit 1
	    fi
	    mf_feedback "Trying to remove location $3 from user database..."
	    mf_sipdb_rmlocation $3
	    exit 0
	  ;;
	*)
	 CHECK=${2:-NULL}
	 mf_printhelp
	 echo "ERROR: $CHECK is not a valid action for service $1 - aborting"
	 exit 1
	  ;;
	esac
	exit 0
      ;;    
    imdb)
        case $2 in
	store)
	    mf_imdb_store
	    exit 0
	  ;;
	*)
	 CHECK=${2:-NULL}
	 mf_printhelp
	 echo "ERROR: $CHECK is not a valid action for service $1 - aborting"
	 exit 1
	  ;;
	esac
	exit 0
      ;;    
    openserctl)
	CHECK=${2:-NULL}
	if [ $CHECK = "NULL" ] ; then
	    mf_feedback "ERROR: $CHECK is not a valid action for service $1 - aborting"
	    exit 1
	fi
	milkfish_services audit openser
	mf_openserctl $2
	exit 0
      ;;
    backup)
	mf_backup
	exit 0
      ;;
    audit)
	mf_settings_check milkfish_username $USERNAME
	mf_settings_check milkfish_password $PASSWORD
	mf_switch_check milkfish_audit ${AUDITSWITCH:-off} Audit ${3:-doexit}
        case $2 in
	activate)
	    mf_audit_activate
	    exit 0
	 ;;
	deactivate)
	    mf_audit_deactivate
	    exit 0
	 ;;
        router)
        if [ $(which curl) ] ; then
	    mf_routeraudit_curl $3
        else 
    	    mf_routeraudit_wget $3
        fi
        exit 0
         ;;
        openser)
          if [ $(which curl) ] ; then
            mf_seraudit_curl
          else
            mf_seraudit_wget
          fi 
         exit 0
         ;;
	results)
	  #mf_feedback "ERROR: Not implemented yet."
	  mf_audit_results
	  exit 0
	 ;;
	*)
	 CHECK=${2:-NULL}
	 mf_feedback "ERROR: $CHECK is not a valid action for service $1 - aborting"
	 exit 1
	 ;;
	esac
	;;
    fwtest)
	if [ $(which curl) ] ; then
	    mf_fwtest_curl
	else
	    mf_fwtest_wget
	fi
	exit 0
	;;
    echotest)
	if [ $(which curl) ] ; then
	    mf_echotest_curl
	else
	    mf_echotest_wget
	fi
	exit 0
	;;
    dynsip)
	mf_settings_check milkfish_username $USERNAME
	mf_settings_check milkfish_password $PASSWORD
	mf_switch_check milkfish_dynsip ${DYNSIPSWITCH:-off} Homesip doexit
	mf_dynsip_update verbose
	exit 0
	;;
    dyndns)
	mf_settings_check milkfish_username $USERNAME
	mf_settings_check milkfish_password $PASSWORD
	mf_switch_check ddns_enable ${DDNSSWITCH:-off} DDNS doexit
	mf_feedback "ERROR: Not implemented yet."
	exit 0
	#mf_ddns_wget
	;;
    pppoe-reconnect)
	mf_ppptime
	exit 0
	;;
    stop)
        mf_feedback "Stopping..."
	[ -e "$RUNDIR/mf_services.lock" ] && echo "NOTE: Removing lockfile..." && rm $RUNDIR/mf_services.lock
        kill -TERM $(ps | grep milkfish_services | grep -v "grep milkfish_services" | awk '{print $1}')
        exit 0
	;;
    start)
	mf_settings_check milkfish_username $USERNAME
	mf_settings_check milkfish_password $PASSWORD
	if [ -e "$RUNDIR/mf_services.lock" ]; then
	  mf_feedback "NOTE: Lockfile found - Services seem to be running already. Aborting."
	  exit 1
	else
	  touch $RUNDIR/mf_services.lock
	fi
	mf_printdaemon
	;;
    *)
#        AUDITPRCS=$(ps | grep milkfish_services | wc -l | awk '{print $1}' )
#        if [ $AUDITPRCS -gt 4 ]; then
#	  mf_printhelp
#	  #mf_feedback "NOTE: Running as daemon"
#	  echo "NOTE: Running as daemon"
#	  exit 1
#	fi
#	if [ -e "$RUNDIR/mf_services.lock" ]; then
#	  mf_printhelp
#	  mf_feedback "NOTE: Lockfile found - Services seem to be running already. Aborting."
#	  exit 1
#	else
#	  touch $RUNDIR/mf_services.lock
#	fi
	mf_printhelp
#	mf_printdaemon
	exit 0
	;;
esac

#mf_settings_check milkfish_username $USERNAME
#mf_settings_check milkfish_password $PASSWORD
##mf_settings_check milkfish_ $USERNAME


#exit
DLOOPS=0
ALOOPS=1
PLOOPS=3
[ "$DYNSIPSWITCH" = "on" ] && DYNSIPIP=$(nslookup $DOMAIN|sed s/[^0-9.]//g|tail -n1)
while :; do
  {
# Audit Section
    if [ $ALOOPS -le 0 ]; then
	AUDITSWITCH=$(mf_load_setting milkfish_audit)
        if [ $AUDITSWITCH = "on" ] ; then
            if [ $(which curl) ] ; then
		mf_logging "Auditing router via https"
                ALOOPS=$(mf_routeraudit_curl silent | awk '{print $9}');
		if [ "$ALOOPS" != "badauth" ] ; then
    		    if [ $ALOOPS ] ; then
    	    		AUDITPRCS=$(mf_ser_procs)
			if [ $AUDITPRCS -gt 4 ]; then
			    mf_logging "Auditing SER via https"
			    mf_seraudit_curl >> /dev/null;
			fi
		    fi
		else
		    mf_save_setting milkfish_audit=off
		fi
	    else
		mf_logging "Auditing router via http"
        	ALOOPS=$(mf_routeraudit_wget silent | awk '{print $9}');
		#echo "$ALOOPS 1"
		if [ "$ALOOPS" != "badauth" ] ; then
	    	    if [ "$ALOOPS" ] ; then
			AUDITPRCS=$(mf_ser_procs)
			if [ $AUDITPRCS -gt 4 ] ; then
			    mf_logging "Auditing SER via http"
			    mf_seraudit_wget >> /dev/null;
			fi
		    fi
		else
		    mf_save_setting milkfish_audit=off
		fi
    	    fi    
	fi
	if [ "$ALOOPS" != "badauth" ] ; then
	    if [ -z $ALOOPS ]; then
		ALOOPS=5
	    else
		if [ $ALOOPS -lt 1 ]; then
		    ALOOPS=5
		fi
	    fi
	else
	    ALOOPS=5
	fi
    else
	let "ALOOPS--"
    fi
    
# Homesip Section    
    if [ $DLOOPS -le 0 ]; then
	DYNSIPSWITCH=$(mf_load_setting milkfish_dynsip)
        if [ $DYNSIPSWITCH = "on" ] ; then
	    mf_dynsip_update >> /dev/null
	fi
	DLOOPS=5
    else
	let "DLOOPS--"
    fi

# PPPoE Section    
    if [ $PLOOPS -le 0 ]; then
	mf_logging "PPPoE reconnect check"
	mf_ppptime >> /dev/null
	PLOOPS=50
    else
	let "PLOOPS--"
    fi

# Looptime Unit Section
    sleep 60
  }
#  while [ $LOOPS -gt 0 ]; do
#  {
#   let "LOOPS--"
#   trap "exit 2" 0
#  }
#  done;  
done &
