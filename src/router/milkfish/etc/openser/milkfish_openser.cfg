######################################################################
# This program is free software; you can redistribute it and/or      #
# modify it under the terms of the GNU General Public License as     #
# published by the Free Software Foundation; either version 2 of the #
# License, or (at your option) any later version.                    #
#                                                                    #
# This program is distributed in the hope that it will be useful,    #
# but WITHOUT ANY WARRANTY; without even the implied warranty of     #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      #
# GNU General Public License for more details.                       #
#                                                                    #
# You should have received a copy of the GNU General Public License  #
# along with this program; if not, write to the                      #
# Free Software Foundation, Inc.,                                    #
# 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA             #
######################################################################
# This file is part of a Milkfish Embedded OpenSER SIP Router Setup  #
# More information can be found at http://www.milkfish.org           #
#                                                                    #
# The Milkfish Embedded OpenSER - Main Configuration File            #
#                                                                    #
# Built/Version:  20071215                                           #
# Author/Contact: Michael Poehnl <budrus@sipwerk.com>                #
# Copyright (C) 2007 by sipwerk - All rights reserved.               #
#                                                                    #
# Please note that this software is under development and comes with #
# absolutely no warranty, to the extend permitted by applicable law. #
######################################################################
#
# $Id: openser.cfg,v 1.5 2005/10/28 19:45:33 bogdan_iancu Exp $
#
# simple quick-start config script
#

# ----------- global configuration parameters ------------------------

debug=3            # debug level (cmd line: -dddddddddd)
fork=yes
log_stderror=no    # (cmd line: -E)

/* Uncomment these lines to enter debugging mode 
fork=no
log_stderror=yes
*/

check_via=no	# (cmd. line: -v)
dns=no          # (cmd. line: -r)
rev_dns=no      # (cmd. line: -R)
# port must be 5060!
port=5060
#children=2
listen=udp:br0:5060 #lan
listen=udp:ppp0:5060 #wan
#listen=tcp:ppp0:5061 
disable_tcp=yes
fifo="/tmp/openser_fifo"

mhomed=1

#
# uncomment the following lines for TLS support
#disable_tls = 0
#listen = tls:your_IP:5061
#tls_verify = 1
#tls_require_certificate = 0
#tls_method = TLSv1
#tls_certificate = "/usr/etc/openser/tls/user/user-cert.pem"
#tls_private_key = "/usr/etc/openser/tls/user/user-privkey.pem"
#tls_ca_list = "/usr/etc/openser/tls/user/user-calist.pem"

# ------------------ module loading ----------------------------------

# Uncomment this if you want to use SQL database
loadmodule "/usr/lib/openser/modules/dbtext.so"
loadmodule "/usr/lib/openser/modules/sl.so"
loadmodule "/usr/lib/openser/modules/tm.so"
loadmodule "/usr/lib/openser/modules/rr.so"
loadmodule "/usr/lib/openser/modules/maxfwd.so"
loadmodule "/usr/lib/openser/modules/usrloc.so"
loadmodule "/usr/lib/openser/modules/registrar.so"
loadmodule "/usr/lib/openser/modules/textops.so"
loadmodule "/usr/lib/openser/modules/exec.so"
loadmodule "/usr/lib/openser/modules/milkfish_nathelper.so"

# Uncomment this if you want digest authentication
# mysql.so must be loaded !
loadmodule "/usr/lib/openser/modules/auth.so"
loadmodule "/usr/lib/openser/modules/auth_db.so"

# ----------------- setting module-specific parameters ---------------

# -- usrloc params --

#modparam("usrloc", "db_mode",   0)

# Uncomment this if you want to use SQL database 
# for persistent storage and comment the previous line
modparam("usrloc", "db_mode", 2)
modparam("usrloc|auth_db", "db_url", "dbtext:///var/openser/dbtext")

modparam("auth_db", "calculate_ha1", 1)
modparam("auth_db", "password_column", "password")
modparam("auth_db", "user_column", "username")
modparam("auth_db", "domain_column", "domain")
# -- auth params --
# Uncomment if you are using auth module
#
#modparam("auth_db", "calculate_ha1", yes)
#
# If you set "calculate_ha1" parameter to yes (which true in this config), 
# uncomment also the following parameter)
#
#modparam("auth_db", "password_column", "password")

# -- rr params --
# add value to ;lr param to make some broken UAs happy
modparam("rr", "enable_full_lr", 1)

# -------------------------  request routing logic -------------------
#alias=
# main routing logic

route{

        exec_msg("/usr/sbin/mf_sip_tracer.sh");

	# initial sanity checks -- messages with
	# max_forwards==0, or excessively long requests
	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	};

	if (msg:len >=  2048 ) {
		sl_send_reply("513", "Message too big");
		exit;
	};
	
        # check for Registrations
        if (method=="REGISTER") 
        {                             
                if (uri==myself)
                {
                        # wants to register only at router, no external SIP provider  
                        # log(1, "internal REGISTER\n");
                        # make entry at local registrar, account with password is needed
        		if (!www_authorize("", "subscriber")) {
	            		www_challenge("", "0");
			        exit;
		        };           
                        save("location");
                }
                else    
                {       
                        # wants to register at external SIP provider 
                        # log(1, "external REGISTER\n");
                        # check if user is already registered at internal registrar 
                        if (!lookup("location"))
                        {
                                # if not do a drive-by registration
                                # for registration at internal registrar
                                # without a reply 
                                save_noreply("location");       
                        };
			# Workaround for Fritz box clients
			remove_hf("Route");
                        # Fixing of private address in contact hf
                        # address is wan address, port is default sip port 5060
                        fix_nated_contact("217.189.167.187"); 
                        route(1);
                };
                return;
                             
        }  
        else
	{
        	# we record-route all messages -- to make sure that
	        # subsequent messages will go through our proxy; that's
	        # particularly good if upstream and downstream entities
	        # use different transport protocol	
		record_route();
	};

        # Check if package originates from LAN 
        if (src_ip==192.168.1.1/255.255.255.0)
        {
                if (loose_route()) {
                         # mark routing logic in request
                         # log(1, "loose route\n");
                         append_hf("P-hint: rr-enforced\r\n");
                         route(1);
                };

                # log(1, "incoming package from lan\n");
                if (lookup("location") or lookup("aliases"))
                {
                        # log(1, "contact in local database\n");
                        if (uri=~"^sip:.*1.2.3")
                        {
                                # at least one command here
                                log(1, "internal call\n");
                        }
                        else
                        {
                                # Fixing of private address in contact hf
                                # address is wan address, port is default sip port 5060
                                fix_nated_contact("217.189.167.187");
                                # substitute local addresses in from header with wan address or milkfish_fromdomain
                                subst('/^From:(.*)sip:(.+)@1.2.3[0-9.]*(.*)$/From:\1sip:\2@homesip.net\3/ig');
                                if (method=="INVITE")
                                {
                                        # log(1, "call from lan to wan\n");
                                        setflag(5);
                                        force_rtp_proxy("FAIE");
                                        # log(1, "forcing RTP proxy IE\n");
                                        t_on_reply("1");
                                };
                               
                        };
                }
                else
                {
                        # log(1, "contact NOT in local database\n");
			if (uri=~"^sip:\*1\*")
			{
			        # log(1, "sipbroker call\n");
				strip(2);
				rewritehost("sipbroker.com");
			};			
                        if (uri==myself) 
                        {
                                # log(1, "contact not found\n");
			        sl_send_reply("404", "Not Found");
			        return;
		        }
                        else
                        {       
                                # Fixing of private address in contact hf
                                # address is wan address, port is default sip port 5060
                                fix_nated_contact("217.189.167.187");
                                # substitute local addresses in from header with wan address or milkfish_fromdomain
                                subst('/^From:(.*)sip:(.+)@1.2.3[0-9.]*(.*)$/From:\1sip:\2@homesip.net\3/ig'); 
                                if (method=="INVITE")
                                {
                                        setflag(5);
                                        force_rtp_proxy("FAIE");
                                        # log(1, "forcing RTP proxy IE\n");
                                        t_on_reply("1");   
                                }; 
                        };        
                };                      
        }
        else
        {
                # log(1, "incoming package from wan\n");
                if (uri==myself)
                {
                        if (lookup("location") or lookup("aliases"))
                        {       
                                # log(1, "contact in local database\n");
                                if (method=="INVITE" and uri=~"^sip:.*1.2.3")
                                {
                                        # log(1, "call from wan to lan\n");
                                        setflag(5);
                                        force_rtp_proxy("FAEI");
                                        # log(1, "forcing RTP proxy EI\n");
                                        t_on_reply("1");   
                                };                                        
                        }
                        else
                        {
                                # log(1, "contact not found\n");
			        sl_send_reply("404", "Not Found");
			        return;
		        }; 
                };                               
        
        };
        route(1);

}


onreply_route[1]
{
        # Check if package originates from LAN 
        if (src_ip==192.168.1.1/255.255.255.0)
        {
                # log(1, "outgoing reply\n");
                # Fixing of private address in contact hf
                # address is wan address, port is default sip port 5060
                fix_nated_contact("217.189.167.187");
                if (isflagset(5) && status =~ "(183)|(180)|2[0-9][0-9]")
                {
                        force_rtp_proxy("FAIE");
                };
        }
	else
        {
                # log(1, "incoming reply\n");
                if (isflagset(5) && status =~ "(183)|(180)|2[0-9][0-9]")
                {                
                        force_rtp_proxy("FAEI");
                };
        };
}

route[1] {
	# send it out now; use stateful forwarding as it works reliably
	# even for UDP2TCP
	if (!t_relay()) {
		sl_reply_error();
	};
	exit;
}

