#!/bin/sh -x

/usr/bin/killall gpsd
/usr/bin/killall gpsi
/usr/bin/killall gpspipegpsi

ln -s /usr/bin/gpspipe /tmp/gpspipegpsi

GPS_NEED_SETUP=0
if [ "$(nvram get gps)" = "1" ]; then
		GPS_NEED_SETUP=1
elif [ "$(nvram get gps_gpsd)" = "1" ]; then
		GPS_NEED_SETUP=1
fi

atc(){
	dev="$1"; shift;
	cmd="$*";
	COMGTATC="$cmd" comgt -s /etc/comgt/atcommand.comgt -d "$dev";
}

sierra_get_vendprod(){
	cd /sys/bus/usb/devices
	for i in * ; do 
		vid="$(cat $i/idVendor)"
		[ "$vid" != "1199" ] && continue;
		pid="$(cat $i/idProduct)"
		echo "$vid:$pid"
		return
	done
}

sierra_enable_gps_antenna_power(){
	vendprod="$(sierra_get_vendprod)"
	case $vendprod in
		1199:9071) #mc7455
			logger -t "gpsi" "setting AT+WANT=1 on /dev/ttyUSB2"
			atc '/dev/ttyUSB2' 'AT+WANT=1'
			;;
		1199:68c0) #mc7304
			logger -t "gpsi" "setting AT+WANTGNSSPWR=1 on /dev/ttyUSB2"
			atc '/dev/ttyUSB2' 'AT+WANTGNSSPWR=1'
			;;
	esac
}

waitto=60
wait_for_chardev(){
	to=0
	while [ ! -c "$*" ] ; do
		sleep 1
		to="$((to+1))"
		[ "$to" -gt "$waitto" ] && return 1
	done
}

if [ x$GPS_NEED_SETUP = x1 ]; then
	BOARD=$(nvram get DD_BOARD2 | cut -c11-17)
	if test -z $BOARD
	then
        BOARD=$(nvram get DD_BOARD | cut -c11-17) 
	fi                                             
	if [ x$BOARD = xCambria ]; then                     
        TTY=/dev/ttyS1
        BAUD=4800
	elif [ x$BOARD = xLaguna ] ; then
        TTY=/dev/ttyS2
        BAUD=9600
	elif [ x$BOARD = xVentana ] ; then
        TTY=/dev/ttymxc4
	    if [ x$(nvram get DD_BOARD | cut -c19-22) = xGW51 ] ; then
    		TTY=/dev/ttymxc0
    	    fi
        BAUD=4800
	elif [ x$(nvram get DD_BOARD | cut -c1-7) = xOctagon ] ; then
        TTY=/dev/ttyS1
        BAUD=9600
	else                  
        TTY=/dev/tts/0
        BAUD=4800
	fi           
	if [ "$(nvram get gps_sierra)" = "1" ]; then
		insmod usbserial
		insmod usb_wwan
		insmod qcserial.ko
		insmod option.ko

		TTY=$(nvram get gps_tty )

		wait_for_chardev "$TTY" && {
			sleep 5
			sierra_enable_gps_antenna_power
			stty raw -F ${TTY}
			echo \$GPS_START >${TTY}
		}
	else
		/bin/stty ${BAUD} -echo -echoe -echok -echoctl -echoke -ignbrk -ixon -opost < ${TTY}
	fi
fi

if [ "$(nvram get gps_gpsd)" = "1" ]; then
	/usr/bin/killall gpsd
	GPSDPORT=$(nvram get gps_gpsd_port )
	if test -z $GPSDPORT 
	then
		GPSDPORT=2947
		nvram set gps_gpsd_port=2947
	fi
	GPSDINTERVAL=$(nvram get gps_gpsd_interval )
	if test -z $GPSDINTERVAL 
	then
		GPSDINTERVAL=30
		nvram set gps_gpsd_interval=30
	fi

	if [ -f /etc/config/gpsi_startraw ]
	then
		#/usr/sbin/gpsd -n -i ${GPSDINTERVAL} -R -S ${GPSDPORT} ${TTY}
		/usr/sbin/gpsd -n -R -S ${GPSDPORT} ${TTY}
		#/tmp/gpsd -n -R -S ${GPSDPORT} ${TTY}
	else
		/usr/sbin/gpsd -n -S ${GPSDPORT} ${TTY}
	fi
fi

if [ "$(nvram get gps)" = "1" ]; then

nvram set gps_status=0
nvram set gps_status_text="GPS no signal GPSD port ${GPSDPORT}"
nvram set gps_lat=""
nvram set gps_lat_e=""
nvram set gps_lon=""
nvram set gps_lon_e=""
nvram set gps_lat_text=""
nvram set gps_lon_text=""
nvram set gps_sat=""
nvram set gps_alt=""

if [ "$(nvram get gps_type)" = "gateworks" ]; then
	/usr/sbin/gpio enable 5
fi

/bin/cat >/tmp/gpsi << "EOF"
#!/bin/sh
TTY=$(nvram get gps_tty )
WAITTIME=20
GPSD=$(nvram get gps_gpsd) 
if [ x$GPSD = x1 ]
then
	GPSDPORT=$(nvram get gps_gpsd_port )
	if test -z $GPSDPORT 
	then
		GPSDPORT=2947
	fi
	GPSDINTERVAL=$(nvram get gps_gpsd_interval )
	WAITTIME=$((${GPSDINTERVAL} + 2))
	COMMAND="cat /tmp/gpsd.gpgga"
	AWK_ADD="-v gpsdport=${GPSDPORT}"
else
	COMMAND="cat ${TTY}"
fi

while true 
do
GPSDF=$(nvram get gps_fixed) 
if [ x${GPSDF} = x1 ]
then
		nvram get gps_fixed_json >/tmp/nsmd.gps.json
		AWK_ADD_TEMP="${AWK_ADD} -v gpsfixed=1"
else
		AWK_ADD_TEMP="${AWK_ADD} -v gpsfixed=0"
fi
if [ x$GPSD = x1 ]
then
 /tmp/gpsd-helper.sh ${GPSDPORT} >/dev/null 2>&1
 ERR=$?
 if [ x$ERR = x1 ]
 then
	mkdir -p /tmp/gpsdlog
	touch /tmp/gpsdlog/`date '+%Y%d%m%H%M'`
	killall -9 gpsd
	killall -9 gpspipegpsi
    if [ -f /etc/config/gpsi_startraw ]
    then
	/usr/sbin/gpsd -n -R -S ${GPSDPORT} ${TTY}
	#/tmp/gpsd -n -R -S ${GPSDPORT} ${TTY}
    else
	/usr/sbin/gpsd -n -S ${GPSDPORT} ${TTY}
    fi
 fi
fi
export COMMAND
export AWK_ADD_TEMP
/tmp/gpsi.sub >/dev/null 2>&1
ERR=$?
if [ x$GPSD = x1 ]
then
 if [ x$ERR = x137 ]
 then
  mkdir -p /tmp/gpsdlog
  touch /tmp/gpsdlog/`date '+%Y%d%m%H%M'`
  killall -9 gpsd
  if [ -f /etc/config/gpsi_startraw ]
  then
	/usr/sbin/gpsd -n -R -S ${GPSDPORT} ${TTY}
  else
	/usr/sbin/gpsd -n -S ${GPSDPORT} ${TTY}
  fi
 fi
fi
#40 sekunden warten, wenn erfolgreich ausgelesen
cp /tmp/gpsd.gpgga /tmp/gpsd.gpgga.stat
sleep ${WAITTIME}
done
EOF
/bin/cat >/tmp/gpsi.sub << "EOF"
#!/bin/sh
if [ -z $XTIMEOUT ]
then
        XTIMEOUT=5
fi
( sleep $XTIMEOUT; kill -9 $$ ) &
exec $COMMAND |  awk -F "," ${AWK_ADD_TEMP} '
function getgpstext(pos,extra)
	{
	deg=(int( int(pos)/100) )
	min=int( pos - deg*100 )
	sec=60*( pos - deg*100 - min)
	#der einfache tick
	tick=39
	return(sprintf("%2dd %s%c %.2f%c%c %s",deg,min,tick,sec,tick,tick,extra))
	}

function setnvram(var,val)
	{
	printf("/usr/sbin/nvram set %s=\"%s\"\n",var,val);
	}

function setjson(fixed,lat,lat_e,lon,lon_e,status,sat,alt,ts)
	{
	if (fixed == 0) {
		F="/tmp/nsmd.gps.json";
		XX="\"";
		latsign="";
		lonsign=""
		if (lat_e == "S") latsign="-";
		if (lon_e == "W") lonsign="-"
		printf "{" >F;
		printf XX "gps_fixed" XX ":" fixed"," >>F; 
		printf XX "gps_status" XX ":" status"," >>F; 
		printf XX "gps_sat" XX ":" sat"," >>F; 
		printf XX "gps_lat" XX ":" XX "" latsign "" lat "" XX "," >>F; 
		printf XX "gps_lon" XX ":" XX "" lonsign "" lon "" XX "," >>F; 
		printf XX "gps_alt" XX ":" alt"," >>F; 
		printf XX "gps_ts" XX ":" XX "" ts "" XX >>F; 
		printf "}" >>F;
		}
	}
{
if ($1 == "$GPGGA")
	{
	if (int($7) > 0)
		{
		setnvram("gps_status",int($7))
		if ( gpsdport >0 )
			setnvram("gps_status_text","GPS sync GPSD port "gpsdport)
		else
			setnvram("gps_status_text","GPS sync")

		setnvram("gps_lat",$3)
		setnvram("gps_lat_e",$4)

		setnvram("gps_lon",$5)
		setnvram("gps_lon_e",$6)

		setnvram("gps_lat_text",getgpstext($3,$4) )
		setnvram("gps_lon_text",getgpstext($5,$6) )
		setnvram("gps_sat",int($8))
		setnvram("gps_alt",int($10))
		if ($2 != "") 
			setnvram("gps_ts",$2)
		else 
			setnvram("gps_ts","-1")
		setjson(gpsfixed,$3,$4,$5,$6,int($7),int($8),int($10),$2)
		exit
		}
	else if (int($7) == 0)
		{
		setnvram("gps_status",int($7))
		if ( gpsdport >0 )
			setnvram("gps_status_text","GPS no signal GPSD port "gpsdport)
		else
			setnvram("gps_status_text","GPS no signal")
		setnvram("gps_lat","");
		setnvram("gps_lat_e","");
		setnvram("gps_lon","");
		setnvram("gps_lon_e","");
		setnvram("gps_lat_text","");
		setnvram("gps_lon_text","");
		setnvram("gps_sat","");
		setnvram("gps_alt","");
		if ($2 != "") 
			setnvram("gps_ts",$2)
		else 
			setnvram("gps_ts","-1")
		setjson(gpsfixed,$3,$4,$5,$6,int($7),int($8),int($10),$2)
		exit
		}
	}
}' >/tmp/gpsd-nvram-updater-temp.$$
sh /tmp/gpsd-nvram-updater-temp.$$
rm /tmp/gpsd-nvram-updater-temp.$$
EOF
/bin/cat >/tmp/gpsd-helper.sh << "EOF"
#!/bin/sh
if [ ! -f /tmp/gpsd.gpgga ]
then
	exit 1
fi
if cmp -s /tmp/gpsd.gpgga /tmp/gpsd.gpgga.stat
then
        exit 1
fi
exit 0
EOF
/bin/chmod 755 /tmp/gpsi
/bin/chmod 755 /tmp/gpsd-helper.sh
/bin/chmod 755 /tmp/gpsi.sub
/tmp/gpsi >/dev/null 2>&1 &
elif [ "$(nvram get gps_gpsd)" = "1" ]; then
nvram set gps_status=0
nvram set gps_status_text="GPSD only mode port ${GPSDPORT}"
nvram set gps_lat=""
nvram set gps_lat_e=""
nvram set gps_lon=""
nvram set gps_lon_e=""
nvram set gps_lat_text=""
nvram set gps_lon_text=""
nvram set gps_sat=""
nvram set gps_alt=""
nvram set gps_ts=""
fi
