Index: spiflash_selfmap.c
===================================================================
--- spiflash_selfmap.c	(revision 9309)
+++ spiflash_selfmap.c	(working copy)
@@ -156,6 +156,7 @@
         { name: "RedBoot", offset: 0, size: 0x30000, },//, mask_flags: MTD_WRITEABLE, },
         { name: "linux", offset: 0x30000, size: 0x390000, },
         { name: "rootfs", offset: 0x0, size: 0x2b0000,}, //must be detected
+        { name: "ddwrt", offset: 0x0, size: 0x2b0000,}, //must be detected
         { name: "nvram", offset: 0x3d0000, size: 0x10000, },
         { name: "FIS Directory", offset: 0x3e0000, size: 0x10000, },
         { name: "board_config", offset: 0x3f0000, size: 0x10000, },
@@ -673,6 +674,9 @@
 	char *buf;
 	struct fis_image_desc *fis;  
 	unsigned char *p;
+	struct squashfs_super_block *sb;
+	size_t rootsize;
+	size_t len;
 	spidata->mmraddr = ioremap_nocache(SPI_FLASH_MMR, SPI_FLASH_MMR_SIZE);
 	spin_lock_init(&spidata->mutex);
 	init_waitqueue_head(&spidata->wq);
@@ -727,16 +731,27 @@
 	    if (*((__u32 *) buf) == SQUASHFS_MAGIC) 
 		{
 		printk(KERN_EMERG "\nfound squashfs at %X\n",offset);
+		sb = (struct squashfs_super_block *) buf;
 		dir_parts[2].offset = offset;
-		dir_parts[5].offset = mtd->size-mtd->erasesize; // board config
+		
+		dir_parts[2].size = sb->bytes_used;
+		len = dir_parts[2].offset + dir_parts[2].size;
+		len +=  (mtd->erasesize - 1);
+		len &= ~(mtd->erasesize - 1);
+		dir_parts[2].size = len - dir_parts[2].offset;
+
+		
+		
+		
+		dir_parts[6].offset = mtd->size-mtd->erasesize; // board config
+		dir_parts[6].size = mtd->erasesize;
+		dir_parts[5].offset = dir_parts[5].offset-mtd->erasesize; //fis config
 		dir_parts[5].size = mtd->erasesize;
-		dir_parts[4].offset = dir_parts[5].offset-mtd->erasesize; //fis config
+		dir_parts[4].offset = dir_parts[4].offset-mtd->erasesize; //nvram
 		dir_parts[4].size = mtd->erasesize;
-		dir_parts[3].offset = dir_parts[4].offset-mtd->erasesize; //nvram
-		dir_parts[3].size = mtd->erasesize;
-		dir_parts[2].size = dir_parts[3].offset-offset; //size of rootfs aligned to nvram offset
+		rootsize = dir_parts[3].offset-offset; //size of rootfs aligned to nvram offset
 		//now scan for linux offset
-		p=(unsigned char*)(0xa8000000+dir_parts[4].offset);
+		p=(unsigned char*)(0xa8000000+dir_parts[5].offset);
 		fis = (struct fis_image_desc*)p;
 		while(1)
 		{
@@ -748,14 +763,14 @@
 		    {
 		    printk(KERN_EMERG "found RedBoot partition at [0x%08lX]\n",fis->flash_base);
 		    dir_parts[0].size=fis->size;
-		    dir_parts[6].offset=dir_parts[0].size;
+		    dir_parts[7].offset=dir_parts[0].size;
 		    }
 		if (!strcmp(fis->name,"linux") || !strncmp(fis->name,"vmlinux",7) || !strcmp(fis->name,"kernel"))
 		    {
 		    printk(KERN_EMERG "found linux partition at [0x%08lX]\n",fis->flash_base);
 		    dir_parts[1].offset=fis->flash_base&(mtd->size-1);
-		    dir_parts[1].size=dir_parts[2].offset-dir_parts[1].offset+dir_parts[2].size;
-		    dir_parts[6].size=dir_parts[1].size+dir_parts[3].size; // linux + nvram = phy size
+		    dir_parts[1].size=dir_parts[2].offset-dir_parts[1].offset+rootsize;
+		    dir_parts[7].size=dir_parts[1].size+dir_parts[3].size; // linux + nvram = phy size
 		    }
 		p+=sizeof(struct fis_image_desc);
 		fis = (struct fis_image_desc*)p;
@@ -766,7 +781,7 @@
 	    buf+=mtd->erasesize;
 	    }
 	def:;
-	result = add_mtd_partitions(mtd, dir_parts, 7);
+	result = add_mtd_partitions(mtd, dir_parts, 8);
 	spidata->mtd = mtd;
 	
    	return (result);
