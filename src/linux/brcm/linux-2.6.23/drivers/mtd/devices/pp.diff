--- spiflash_selfmap.c	2008-02-29 09:21:01.539605230 +0100
+++ spiflash.c	2008-02-29 09:20:17.213714411 +0100
@@ -201,7 +217,6 @@
 	sysRegWrite(AR5315_GPIO_DO, reg);
 }
 
-
 #define SET_SPI_ACTIVITY()						\
 {												\
 }
@@ -220,7 +235,6 @@
 
 
 
-
 /***************************************************************************************************/
 
 static __u32
@@ -360,7 +374,12 @@
 spiflash_erase (struct mtd_info *mtd,struct erase_info *instr)
 {
 	struct opcodes *ptr_opcode;
-	u32 temp, reg;
+	__u32 temp, reg;
+	int finished = 0;
+
+#ifdef SPIFLASH_DEBUG
+   	printk (KERN_DEBUG "%s(addr = 0x%.8x, len = %d)\n",__FUNCTION__,instr->addr,instr->len);
+#endif
 
    	/* sanity checks */
    	if (instr->addr + instr->len > mtd->size) return (-EINVAL);
@@ -368,25 +387,27 @@
 	if (!spiflash_wait_ready(FL_ERASING))
 		return -EINTR;
 
-	spiflash_sendcmd(SPI_WRITE_ENABLE, 0);
-	busy_wait((reg = spiflash_regread32(SPI_FLASH_CTL)) & SPI_CTL_BUSY, 0);
-	reg = spiflash_regread32(SPI_FLASH_CTL);
-
 	ptr_opcode = &stm_opcodes[SPI_SECTOR_ERASE];
+
 	temp = ((__u32)instr->addr << 8) | (__u32)(ptr_opcode->code);
+	spiflash_sendcmd(SPI_WRITE_ENABLE,0);
+	busy_wait((reg = spiflash_regread32(SPI_FLASH_CTL)) & SPI_CTL_BUSY, 0);
+
 	spiflash_regwrite32(SPI_FLASH_OPCODE, temp);
 
 	reg = (reg & ~SPI_CTL_TX_RX_CNT_MASK) | ptr_opcode->tx_cnt | SPI_CTL_START;
 	spiflash_regwrite32(SPI_FLASH_CTL, reg);
 
-	
 	busy_wait(spiflash_sendcmd(SPI_RD_STATUS, 0) & SPI_STATUS_WIP, 20);
 	spiflash_done();
 
    	instr->state = MTD_ERASE_DONE;
    	if (instr->callback) instr->callback (instr);
 
-   	return 0;
+#ifdef SPIFLASH_DEBUG
+   	printk (KERN_DEBUG "%s return\n",__FUNCTION__);
+#endif
+   	return (0);
 }
 
 static int 
@@ -510,6 +531,8 @@
 	reg      = (reg & ~SPI_CTL_TX_RX_CNT_MASK) | 0x8 | SPI_CTL_START;
 
 	/* wait and mark our activity */
+	if (!spiflash_wait_ready(FL_WRITING))
+		return -EINTR;
 	SET_SPI_ACTIVITY();
 	chip_select(0);
 
@@ -557,9 +580,10 @@
 	chip_select(1);
 	/* clean our activity */
 	CLEAR_SPI_ACTIVITY();
+	
 
 	busy_wait(spiflash_sendcmd(SPI_RD_STATUS, 0) & SPI_STATUS_WIP, 20);
-
+	spiflash_done();
 	return;
 }
 
@@ -581,6 +605,8 @@
 	/* write the flash with known pattern */
 	for (i=0; i<256; i++) buffer[i] = (unsigned char)i;
 	page_write(block, buffer);
+	if (!spiflash_wait_ready(FL_WRITING))
+		return -EINTR;
 
 	/* wait and mark our activity */
 	SET_SPI_ACTIVITY();
@@ -627,7 +653,7 @@
 	udelay(10);
 
 	busy_wait(spiflash_sendcmd(SPI_RD_STATUS, 0) & SPI_STATUS_WIP, 20);
-	
+	spiflash_done();
 	printk("SPI flash write test done (%d)!, page programming is %s!\n", i, i<8 ? "disabled":"enabled");
 	return (i<8 ? 1:0);
 }
