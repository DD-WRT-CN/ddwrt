Index: ar2313.c
===================================================================
--- ar2313.c	(revision 9244)
+++ ar2313.c	(working copy)
@@ -167,8 +167,9 @@
 static void ar2313_tx_timeout (struct net_device *dev);
 #endif
 static void ar2313_halt (struct net_device *dev);
-static void rx_tasklet_func (unsigned long data);
 static void ar2313_multicast_list (struct net_device *dev);
+static void ar2313_tx_int(struct net_device *dev);
+static int ar2313_rx(struct net_device *dev, int budget);
 
 #ifndef ERR
 #define ERR(fmt, args...) printk("%s: " fmt, __func__, ##args)
@@ -281,8 +282,52 @@
 }
 #endif
 
+int
+ae2313_poll(struct net_device *dev, int *budget)
+{
+	struct ar2313_private *sp = dev->priv;
+	unsigned long flags;
+	int done;
+	int orig_budget = *budget;
+	int work_done;
 
+	sp->dma_regs->intr_ena &= ~(DMA_STATUS_RI | DMA_STATUS_TI);
+	if (sp->unloading) {
+		return 1;
+	}
 
+	spin_lock_irqsave(&sp->lock, flags);
+	ar2313_tx_int(dev);
+       	spin_unlock_irqrestore(&sp->lock, flags);
+
+	/* run RX thread, within the bounds set by NAPI.
+	 * All RX "locking" is done by ensuring outside
+	 * code synchronizes with dev->poll()
+	 */
+	done = 1;
+       	if (orig_budget > dev->quota)
+       		orig_budget = dev->quota;
+
+       	work_done = ar2313_rx(dev, orig_budget);
+
+       	*budget -= work_done;
+       	dev->quota -= work_done;
+
+       	if (work_done >= orig_budget)
+       		done = 0;
+
+	/* if no more work, tell net stack and NIC we're done */
+	if (done) {
+		spin_lock_irqsave(&sp->lock, flags);
+		__netif_rx_complete(dev);
+		sp->dma_regs->intr_ena |= (DMA_STATUS_RI | DMA_STATUS_TI);
+		spin_unlock_irqrestore(&sp->lock, flags);
+	}
+
+	return (done ? 0 : 1);
+}
+
+
 int __init
 ar2313_probe (struct platform_device *pdev)
 {
@@ -337,8 +382,8 @@
   // SAMEER: do we need this?
   dev->features |= NETIF_F_SG | NETIF_F_HIGHDMA;
 
-  tasklet_init (&sp->rx_tasklet, rx_tasklet_func, (unsigned long) dev);
-  tasklet_disable (&sp->rx_tasklet);
+  dev->poll = ae2313_poll;
+  dev->weight = 64;
 
   sp->eth_regs =
     ioremap_nocache (virt_to_phys (ar_eth_base), sizeof (*sp->eth_regs));
@@ -590,27 +635,13 @@
   sp->eth_regs->mac_control = recognise;
 }
 
-static void
-rx_tasklet_cleanup (struct net_device *dev)
-{
-  struct ar2313_private *sp = dev->priv;
 
-  /* 
-   * Tasklet may be scheduled. Need to get it removed from the list
-   * since we're about to free the struct.
-   */
-
-  sp->unloading = 1;
-  tasklet_enable (&sp->rx_tasklet);
-  tasklet_kill (&sp->rx_tasklet);
-}
-
 static int __exit
 ar2313_remove (struct platform_device *pdev)
 {
   struct net_device *dev = platform_get_drvdata (pdev);
-  rx_tasklet_cleanup (dev);
   ar2313_init_cleanup (dev);
+  free_irq(dev->irq, dev);
   unregister_netdev (dev);
   kfree (dev);
   return 0;
@@ -1398,9 +1429,8 @@
       goto init_error;
     }
 
+  disable_irq(dev->irq);
 
-  tasklet_enable (&sp->rx_tasklet);
-
   return 0;
 
 init_error:
@@ -1483,7 +1513,7 @@
 #define AR2313_MAX_PKTS_PER_CALL        64
 
 static int
-ar2313_rx_int (struct net_device *dev)
+ar2313_rx (struct net_device *dev,int budget)
 {
   struct ar2313_private *sp = dev->priv;
   struct sk_buff *skb, *skb_new;
@@ -1491,7 +1521,7 @@
   unsigned int status;
   u32 idx;
   int pkts = 0;
-  int rval;
+  int received = 0;
 #if DO_VLAN
 	int vlan_id;
 #endif
@@ -1500,7 +1530,7 @@
 
   /* process at most the entire ring and then wait for another interrupt 
    */
-  while (1)
+  while (budget > 0)
     {
 
       rxdesc = &sp->rx_ring[idx];
@@ -1508,13 +1538,11 @@
       if (status & DMA_RX_OWN)
 	{
 	  /* SiByte owns descriptor or descr not yet filled in */
-	  rval = 0;
 	  break;
 	}
 
       if (++pkts > AR2313_MAX_PKTS_PER_CALL)
 	{
-	  rval = 1;
 	  break;
 	}
 #if DEBUG_RX
@@ -1525,8 +1553,7 @@
       printk ("RX descr  %08x\n", rxdesc->descr);
 #endif
 
-      if ((status & (DMA_RX_ERROR | DMA_RX_ERR_LENGTH)) &&
-	  (!(status & DMA_RX_LONG)))
+      if (status & (DMA_RX_ERROR | DMA_RX_ERR_LENGTH | DMA_RX_ERR_DESC | DMA_RX_ERR_RUNT | DMA_RX_ERR_COL | DMA_RX_ERR_MII | DMA_RX_ERR_CRC))
 	{
 #if DEBUG_RX
 	  printk ("%s: rx ERROR %08x\n", __FUNCTION__, status);
@@ -1547,17 +1574,21 @@
 	    sp->stats.rx_over_errors++;
 
 	}
-      else
+      else if (status & (DMA_RX_LS | DMA_RX_FS))
 	{
+	  int length = 0;
 	  /* alloc new buffer. */
 	  skb_new = dev_alloc_skb (AR2313_BUFSIZE + RX_OFFSET + 128);
 	  if (skb_new != NULL)
 	    {
 
 	      skb = sp->rx_skb[idx];
+	      if (status & DMA_RX_LS)
+	    	length = ((status >> DMA_RX_LEN_SHIFT) & 0x3fff) - CRC_LEN;
+	      else
+	        length = AR2313_BUFSIZE;
 	      /* set skb */
-	      skb_put (skb,
-		       ((status >> DMA_RX_LEN_SHIFT) & 0x3fff) - CRC_LEN);
+	      skb_put (skb,length);
 
 	      sp->stats.rx_bytes += skb->len;
 	      skb->protocol = eth_type_trans (skb, dev);
@@ -1568,7 +1599,7 @@
 					vlan_hwaccel_rx(skb, sp->vlgrp, vlan_id);
 				} else
 #endif
-	      netif_rx (skb);
+	      netif_receive_skb(skb);
 
 	      skb_new->dev = dev;
 	      /* 16 bit align */
@@ -1578,6 +1609,8 @@
 
 	      sp->stats.rx_packets++;
 	      sp->rx_skb[idx] = skb_new;
+	      --budget;
+	      ++received;
 	    }
 	  else
 	    {
@@ -1594,7 +1627,7 @@
 
   sp->cur_rx = idx;
 
-  return rval;
+  return received;
 }
 
 
@@ -1665,40 +1698,7 @@
 }
 
 
-static void
-rx_tasklet_func (unsigned long data)
-{
-  struct net_device *dev = (struct net_device *) data;
-  struct ar2313_private *sp = dev->priv;
 
-  if (sp->unloading)
-    {
-      return;
-    }
-
-  if (ar2313_rx_int (dev))
-    {
-      tasklet_hi_schedule (&sp->rx_tasklet);
-    }
-  else
-    {
-      unsigned long flags;
-      spin_lock_irqsave (&sp->lock, flags);
-      sp->dma_regs->intr_ena |= DMA_STATUS_RI;
-      spin_unlock_irqrestore (&sp->lock, flags);
-    }
-}
-
-static void
-rx_schedule (struct net_device *dev)
-{
-  struct ar2313_private *sp = dev->priv;
-
-  sp->dma_regs->intr_ena &= ~DMA_STATUS_RI;
-
-  tasklet_hi_schedule (&sp->rx_tasklet);
-}
-
 static irqreturn_t
 ar2313_interrupt (int irq, void *dev_id)
 {
@@ -1721,16 +1721,9 @@
        * Don't schedule rx processing if interrupt
        * is already disabled.
        */
-      if (status & enabled & DMA_STATUS_RI)
-	{
-	  /* receive interrupt */
-	  rx_schedule (dev);
+      if (netif_rx_schedule_prep(dev)) {
+    	    __netif_rx_schedule(dev);
 	}
-      if (status & DMA_STATUS_TI)
-	{
-	  /* transmit interrupt */
-	  ar2313_tx_int (dev);
-	}
     }
 
   if (status & DMA_STATUS_AIS)
@@ -1760,6 +1753,9 @@
   netif_start_queue (dev);
 
   sp->eth_regs->mac_control |= MAC_CONTROL_RE;
+  
+  enable_irq(dev->irq);
+  sp->unloading = 0;
 
   return 0;
 }
@@ -1770,7 +1766,6 @@
   struct ar2313_private *sp = dev->priv;
   int j;
 
-  tasklet_disable (&sp->rx_tasklet);
 
   /* kill the MAC */
   sp->eth_regs->mac_control &= ~(MAC_CONTROL_RE |	/* disable Receives */
@@ -1813,7 +1808,7 @@
 static int
 ar2313_close (struct net_device *dev)
 {
-#if 0
+  struct ar2313_private *sp = dev->priv;
   /* 
    * Disable interrupts
    */
@@ -1825,6 +1820,8 @@
    * by the first irq.
    */
   netif_stop_queue (dev);
+  sp->unloading = 1;
+#if 0
 
   /* stop the MAC and DMA engines */
   ar2313_halt (dev);
