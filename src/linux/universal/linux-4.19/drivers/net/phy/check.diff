Index: ar8216.c
===================================================================
--- ar8216.c	(revision 37981)
+++ ar8216.c	(working copy)
@@ -49,12 +49,6 @@
 		.name = (_n),	\
 	}
 
-#define AR8216_MIB_RXB_ID	14	/* RxGoodByte */
-#define AR8216_MIB_TXB_ID	29	/* TxByte */
-
-#define AR8236_MIB_RXB_ID	15	/* RxGoodByte */
-#define AR8236_MIB_TXB_ID	31	/* TxByte */
-
 static const struct ar8xxx_mib_desc ar8216_mibs[] = {
 	MIB_DESC(1, AR8216_STATS_RXBROAD, "RxBroad"),
 	MIB_DESC(1, AR8216_STATS_RXPAUSE, "RxPause"),
@@ -183,7 +177,7 @@
 	if (ret & BMCR_ANENABLE)
 		return 0;
 
-	dev_info(&phydev->dev, "ANEG disabled, re-enabling ...\n");
+	dev_info(&phydev->mdio.dev, "ANEG disabled, re-enabling ...\n");
 	ret |= BMCR_ANENABLE | BMCR_ANRESTART;
 	return phy_write(phydev, MII_BMCR, ret);
 }
@@ -301,7 +295,18 @@
 
 	return ret;
 }
+void
+ar8xxx_phy_dbg_read(struct ar8xxx_priv *priv, int phy_addr,
+           u16 dbg_addr, u16 *dbg_data)
+{
+       struct mii_bus *bus = priv->mii_bus;
 
+       mutex_lock(&bus->mdio_lock);
+       bus->write(bus, phy_addr, MII_ATH_DBG_ADDR, dbg_addr);
+       *dbg_data = bus->read(bus, phy_addr, MII_ATH_DBG_DATA);
+       mutex_unlock(&bus->mdio_lock);
+}
+
 void
 ar8xxx_phy_dbg_write(struct ar8xxx_priv *priv, int phy_addr,
 		     u16 dbg_addr, u16 dbg_data)
@@ -755,7 +760,6 @@
 	u16 r2, page;
 	u16 r1_func0, r1_func1, r1_func2;
 	u32 t, val0, val1, val2;
-	int i;
 
 	split_addr(AR8216_REG_ATU_FUNC0, &r1_func0, &r2, &page);
 	r2 |= 0x10;
@@ -791,12 +795,7 @@
 		if (!*status)
 			break;
 
-		i = 0;
-		t = AR8216_ATU_PORT0;
-		while (!(val2 & t) && ++i < priv->dev.ports)
-			t <<= 1;
-
-		a->port = i;
+		a->portmap = (val2 & AR8216_ATU_PORTS) >> AR8216_ATU_PORTS_S;
 		a->mac[0] = (val0 & AR8216_ATU_ADDR5) >> AR8216_ATU_ADDR5_S;
 		a->mac[1] = (val0 & AR8216_ATU_ADDR4) >> AR8216_ATU_ADDR4_S;
 		a->mac[2] = (val1 & AR8216_ATU_ADDR3) >> AR8216_ATU_ADDR3_S;
@@ -1522,8 +1521,12 @@
 		 */
 		for (j = 0; j < i; ++j) {
 			a1 = &priv->arl_table[j];
-			if (a->port == a1->port && !memcmp(a->mac, a1->mac, sizeof(a->mac)))
-				goto duplicate;
+			if (!memcmp(a->mac, a1->mac, sizeof(a->mac))) {
+				/* ignore ports already seen in former entry */
+				a->portmap &= ~a1->portmap;
+				if (!a->portmap)
+					goto duplicate;
+			}
 		}
 	}
 
@@ -1540,7 +1543,7 @@
 	for (j = 0; j < priv->dev.ports; ++j) {
 		for (k = 0; k < i; ++k) {
 			a = &priv->arl_table[k];
-			if (a->port != j)
+			if (!(a->portmap & BIT(j)))
 				continue;
 			len += snprintf(buf + len, sizeof(priv->arl_buf) - len,
 					"Port %d: MAC %02x:%02x:%02x:%02x:%02x:%02x\n",
@@ -1592,56 +1595,6 @@
 	return ret;
 }
 
-int
-ar8xxx_sw_get_port_stats(struct switch_dev *dev, int port,
-			struct switch_port_stats *stats)
-{
-	struct ar8xxx_priv *priv = swdev_to_ar8xxx(dev);
-	u64 *mib_stats;
-	int ret;
-	int mib_txb_id, mib_rxb_id;
-
-	if (!ar8xxx_has_mib_counters(priv))
-		return -EOPNOTSUPP;
-
-	if (port >= dev->ports)
-		return -EINVAL;
-
-	switch (priv->chip_ver) {
-		case AR8XXX_VER_AR8216:
-			mib_txb_id = AR8216_MIB_TXB_ID;
-			mib_rxb_id = AR8216_MIB_RXB_ID;
-			break;
-		case AR8XXX_VER_AR8236:
-		case AR8XXX_VER_AR8316:
-		case AR8XXX_VER_AR8327:
-		case AR8XXX_VER_AR8337:
-			mib_txb_id = AR8236_MIB_TXB_ID;
-			mib_rxb_id = AR8236_MIB_RXB_ID;
-			break;
-		default:
-			return -EOPNOTSUPP;
-	}
-
-	mutex_lock(&priv->mib_lock);
-	ret = ar8xxx_mib_capture(priv);
-	if (ret)
-		goto unlock;
-
-	ar8xxx_mib_fetch_port_stat(priv, port, false);
-
-	mib_stats = &priv->mib_stats[port * priv->chip->num_mibs];
-
-	stats->tx_bytes = mib_stats[mib_txb_id];
-	stats->rx_bytes = mib_stats[mib_rxb_id];
-
-	ret = 0;
-
-unlock:
-	mutex_unlock(&priv->mib_lock);
-	return ret;
-}
-
 static const struct switch_attr ar8xxx_sw_attr_globals[] = {
 	{
 		.type = SWITCH_TYPE_INT,
@@ -1757,11 +1710,20 @@
 	.apply_config = ar8xxx_sw_hw_apply,
 	.reset_switch = ar8xxx_sw_reset_switch,
 	.get_port_link = ar8xxx_sw_get_port_link,
-//	.get_port_stats = ar8xxx_sw_get_port_stats,
+/* The following op is disabled as it hogs the CPU and degrades performance.
+   An implementation has been attempted in 4d8a66d but reading MIB data is slow
+   on ar8xxx switches.
+
+   The high CPU load has been traced down to the ar8xxx_reg_wait() call in
+   ar8xxx_mib_op(), which has to usleep_range() till the MIB busy flag set by
+   the request to update the MIB counter is cleared. */
+#if 0
+	.get_port_stats = ar8xxx_sw_get_port_stats,
+#endif
 };
 
 static const struct ar8xxx_chip ar8216_chip = {
-//	.caps = AR8XXX_CAP_MIB_COUNTERS,
+	.caps = AR8XXX_CAP_MIB_COUNTERS,
 
 	.reg_port_stats_start = 0x19000,
 	.reg_port_stats_length = 0xa0,
@@ -1791,7 +1753,7 @@
 };
 
 static const struct ar8xxx_chip ar8236_chip = {
-//	.caps = AR8XXX_CAP_MIB_COUNTERS,
+	.caps = AR8XXX_CAP_MIB_COUNTERS,
 
 	.reg_port_stats_start = 0x20000,
 	.reg_port_stats_length = 0x100,
@@ -1821,7 +1783,7 @@
 };
 
 static const struct ar8xxx_chip ar8316_chip = {
-	.caps = AR8XXX_CAP_GIGE, // | AR8XXX_CAP_MIB_COUNTERS,
+	.caps = AR8XXX_CAP_GIGE | AR8XXX_CAP_MIB_COUNTERS,
 
 	.reg_port_stats_start = 0x20000,
 	.reg_port_stats_length = 0x100,
@@ -2059,7 +2021,7 @@
 
 	priv->phy = phydev;
 
-	if (phydev->addr != 0) {
+	if (phydev->mdio.addr != 0) {
 		if (chip_is_ar8316(priv)) {
 			/* switch device has been initialized, reinit */
 			priv->dev.ports = (AR8216_NUM_PORTS - 1);
@@ -2087,8 +2049,6 @@
 	return 0;
 }
 
-void shift_register_set(u_int32_t index, u_int32_t val2);
-
 static bool
 ar8xxx_check_link_states(struct ar8xxx_priv *priv)
 {
@@ -2109,14 +2069,7 @@
 		/* flush ARL entries for this port if it went down*/
 		if (!link_new)
 			priv->chip->atu_flush_port(priv, i);
-		
-		#ifdef CONFIG_ARCHERC7V4
-		    if (i > 1) {
-		    shift_register_set(1 + i, !link_new);
-		    }
-		#endif
-
-		dev_info(&priv->phy->dev, "Port %d is %s\n",
+		dev_info(&priv->phy->mdio.dev, "Port %d is %s\n",
 			 i, link_new ? "up" : "down");
 	}
 
@@ -2135,10 +2088,10 @@
 	if (phydev->state == PHY_CHANGELINK)
 		ar8xxx_check_link_states(priv);
 
-	if (phydev->addr != 0)
+	if (phydev->mdio.addr != 0)
 		return genphy_read_status(phydev);
 
-	ar8216_read_port_link(priv, phydev->addr, &link);
+	ar8216_read_port_link(priv, phydev->mdio.addr, &link);
 	phydev->link = !!link.link;
 	if (!phydev->link)
 		return 0;
@@ -2160,7 +2113,8 @@
 
 	phydev->state = PHY_RUNNING;
 	netif_carrier_on(phydev->attached_dev);
-	phydev->adjust_link(phydev->attached_dev);
+	if (phydev->adjust_link)
+		phydev->adjust_link(phydev->attached_dev);
 
 	return 0;
 }
@@ -2168,7 +2122,7 @@
 static int
 ar8xxx_phy_config_aneg(struct phy_device *phydev)
 {
-	if (phydev->addr == 0)
+	if (phydev->mdio.addr == 0)
 		return 0;
 
 	return genphy_config_aneg(phydev);
@@ -2223,15 +2177,15 @@
 	int ret;
 
 	/* skip PHYs at unused adresses */
-	if (phydev->addr != 0 && phydev->addr != 4)
+	if (phydev->mdio.addr != 0 && phydev->mdio.addr != 3 && phydev->mdio.addr != 4)
 		return -ENODEV;
 
-	if (!ar8xxx_is_possible(phydev->bus))
+	if (!ar8xxx_is_possible(phydev->mdio.bus))
 		return -ENODEV;
 
 	mutex_lock(&ar8xxx_dev_list_lock);
 	list_for_each_entry(priv, &ar8xxx_dev_list, list)
-		if (priv->mii_bus == phydev->bus)
+		if (priv->mii_bus == phydev->mdio.bus)
 			goto found;
 
 	priv = ar8xxx_create();
@@ -2240,7 +2194,7 @@
 		goto unlock;
 	}
 
-	priv->mii_bus = phydev->bus;
+	priv->mii_bus = phydev->mdio.bus;
 
 	ret = ar8xxx_probe_switch(priv);
 	if (ret)
@@ -2261,7 +2215,7 @@
 found:
 	priv->use_count++;
 
-	if (phydev->addr == 0) {
+	if (phydev->mdio.addr == 0) {
 		if (ar8xxx_has_gige(priv)) {
 			phydev->supported = SUPPORTED_1000baseT_Full;
 			phydev->advertising = ADVERTISED_1000baseT_Full;
@@ -2282,6 +2236,8 @@
 			phydev->supported |= SUPPORTED_1000baseT_Full;
 			phydev->advertising |= ADVERTISED_1000baseT_Full;
 		}
+		if (priv->chip->phy_rgmii_set)
+			priv->chip->phy_rgmii_set(priv, phydev);
 	}
 
 	phydev->priv = priv;
@@ -2342,7 +2298,6 @@
 	ar8xxx_free(priv);
 }
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,14,0)
 static int
 ar8xxx_phy_soft_reset(struct phy_device *phydev)
 {
@@ -2349,37 +2304,22 @@
 	/* we don't need an extra reset */
 	return 0;
 }
-#endif
 
-static struct phy_driver ar8xxx_phy_driver = {
-	.phy_id		= 0x004d0000,
-	.name		= "Atheros AR8216/AR8236/AR8316",
-	.phy_id_mask	= 0xffff0000,
-	.features	= PHY_BASIC_FEATURES,
-	.probe		= ar8xxx_phy_probe,
-	.remove		= ar8xxx_phy_remove,
-	.detach		= ar8xxx_phy_detach,
-	.config_init	= ar8xxx_phy_config_init,
-	.config_aneg	= ar8xxx_phy_config_aneg,
-	.read_status	= ar8xxx_phy_read_status,
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,14,0)
-	.soft_reset	= ar8xxx_phy_soft_reset,
-#endif
-	.driver		= { .owner = THIS_MODULE },
+static struct phy_driver ar8xxx_phy_driver[] = {
+	{
+		.phy_id		= 0x004d0000,
+		.name		= "Atheros AR8216/AR8236/AR8316",
+		.phy_id_mask	= 0xffff0000,
+		.features	= PHY_BASIC_FEATURES,
+		.probe		= ar8xxx_phy_probe,
+		.remove		= ar8xxx_phy_remove,
+		.detach		= ar8xxx_phy_detach,
+		.config_init	= ar8xxx_phy_config_init,
+		.config_aneg	= ar8xxx_phy_config_aneg,
+		.read_status	= ar8xxx_phy_read_status,
+		.soft_reset	= ar8xxx_phy_soft_reset,
+	}
 };
 
-int __init
-ar8xxx_init(void)
-{
-	return phy_driver_register(&ar8xxx_phy_driver);
-}
-
-void __exit
-ar8xxx_exit(void)
-{
-	phy_driver_unregister(&ar8xxx_phy_driver);
-}
-
-module_init(ar8xxx_init);
-module_exit(ar8xxx_exit);
+module_phy_driver(ar8xxx_phy_driver);
 MODULE_LICENSE("GPL");
Index: ar8216.h
===================================================================
--- ar8216.h	(revision 37981)
+++ ar8216.h	(working copy)
@@ -112,6 +112,7 @@
 
 #define AR8216_REG_ATU_FUNC2		0x0058
 #define   AR8216_ATU_PORTS		BITS(0, 6)
+#define   AR8216_ATU_PORTS_S		0
 #define   AR8216_ATU_PORT0		BIT(0)
 #define   AR8216_ATU_PORT1		BIT(1)
 #define   AR8216_ATU_PORT2		BIT(2)
@@ -367,7 +368,7 @@
 };
 
 struct arl_entry {
-	u8 port;
+	u16 portmap;
 	u8 mac[6];
 };
 
@@ -412,6 +413,7 @@
 	void (*get_arl_entry)(struct ar8xxx_priv *priv, struct arl_entry *a,
 			      u32 *status, enum arl_op op);
 	int (*sw_hw_apply)(struct switch_dev *dev);
+	void (*phy_rgmii_set)(struct ar8xxx_priv *priv, struct phy_device *phydev);
 
 	const struct ar8xxx_mib_desc *mib_decs;
 	unsigned num_mibs;
@@ -477,6 +479,9 @@
 ar8xxx_rmw(struct ar8xxx_priv *priv, int reg, u32 mask, u32 val);
 
 void
+ar8xxx_phy_dbg_read(struct ar8xxx_priv *priv, int phy_addr,
+		u16 dbg_addr, u16 *dbg_data);
+void
 ar8xxx_phy_dbg_write(struct ar8xxx_priv *priv, int phy_addr,
 		     u16 dbg_addr, u16 dbg_data);
 void
@@ -567,9 +572,6 @@
 				   const struct switch_attr *attr,
 				   struct switch_val *val);
 int
-ar8xxx_sw_get_port_stats(struct switch_dev *dev, int port,
-			struct switch_port_stats *stats);
-int
 ar8216_wait_bit(struct ar8xxx_priv *priv, int reg, u32 mask, u32 val);
 
 static inline struct ar8xxx_priv *
Index: ar8327.c
===================================================================
--- ar8327.c	(revision 37981)
+++ ar8327.c	(working copy)
@@ -128,6 +128,49 @@
 }
 
 static void
+ar8327_phy_rgmii_set(struct ar8xxx_priv *priv, struct phy_device *phydev)
+{
+	u16 phy_val = 0;
+	int phyaddr = phydev->mdio.addr;
+	struct device_node *np = phydev->mdio.dev.of_node;
+
+	if (!np)
+		return;
+
+	if (!of_property_read_bool(np, "qca,phy-rgmii-en")) {
+		pr_err("ar8327: qca,phy-rgmii-en is not specified\n");
+		return -EINVAL;
+	}
+	ar8xxx_phy_dbg_read(priv, phyaddr,
+				AR8327_PHY_MODE_SEL, &phy_val);
+	phy_val |= AR8327_PHY_MODE_SEL_RGMII;
+	ar8xxx_phy_dbg_write(priv, phyaddr,
+				AR8327_PHY_MODE_SEL, phy_val);
+
+	/* set rgmii tx clock delay if needed */
+	if (!of_property_read_bool(np, "qca,txclk-delay-en")) {
+		pr_err("ar8327: qca,txclk-delay-en is not specified\n");
+		return -EINVAL;
+	}
+	ar8xxx_phy_dbg_read(priv, phyaddr,
+				AR8327_PHY_SYS_CTRL, &phy_val);
+	phy_val |= AR8327_PHY_SYS_CTRL_RGMII_TX_DELAY;
+	ar8xxx_phy_dbg_write(priv, phyaddr,
+				AR8327_PHY_SYS_CTRL, phy_val);
+
+	/* set rgmii rx clock delay if needed */
+	if (!of_property_read_bool(np, "qca,rxclk-delay-en")) {
+		pr_err("ar8327: qca,rxclk-delay-en is not specified\n");
+		return -EINVAL;
+	}
+	ar8xxx_phy_dbg_read(priv, phyaddr,
+				AR8327_PHY_TEST_CTRL, &phy_val);
+	phy_val |= AR8327_PHY_TEST_CTRL_RGMII_RX_DELAY;
+	ar8xxx_phy_dbg_write(priv, phyaddr,
+				AR8327_PHY_TEST_CTRL, phy_val);
+}
+
+static void
 ar8327_phy_fixup(struct ar8xxx_priv *priv, int phy)
 {
 	switch (priv->chip_rev) {
@@ -506,14 +549,6 @@
 	ar8xxx_write(priv, AR8327_REG_PAD0_MODE, t);
 
 	t = ar8327_get_pad_cfg(pdata->pad5_cfg);
-	if (chip_is_ar8337(priv)) {
-		/*
-		 * Workaround: RGMII RX delay setting needs to be
-		 * always specified for AR8337 to avoid port 5
-		 * RX hang on high traffic / flood conditions
-		 */
-		t |= AR8327_PAD_RGMII_RXCLK_DELAY_EN;
-	}
 	ar8xxx_write(priv, AR8327_REG_PAD5_MODE, t);
 	t = ar8327_get_pad_cfg(pdata->pad6_cfg);
 	ar8xxx_write(priv, AR8327_REG_PAD6_MODE, t);
@@ -627,11 +662,11 @@
 	if (!priv->chip_data)
 		return -ENOMEM;
 
-	if (priv->phy->dev.of_node)
-		ret = ar8327_hw_config_of(priv, priv->phy->dev.of_node);
+	if (priv->phy->mdio.dev.of_node)
+		ret = ar8327_hw_config_of(priv, priv->phy->mdio.dev.of_node);
 	else
 		ret = ar8327_hw_config_pdata(priv,
-					     priv->phy->dev.platform_data);
+					     priv->phy->mdio.dev.platform_data);
 
 	if (ret)
 		return ret;
@@ -678,39 +713,6 @@
 	/* Disable EEE on all phy's due to stability issues */
 	for (i = 0; i < AR8XXX_NUM_PHYS; i++)
 		data->eee[i] = false;
-
-	if (chip_is_ar8337(priv)) {
-		/* Update HOL registers with values suggested by QCA switch team */
-		for (i = 0; i < AR8327_NUM_PORTS; i++) {
-			if (i == AR8216_PORT_CPU || i == 5 || i == 6) {
-				t = 0x3 << AR8327_PORT_HOL_CTRL0_EG_PRI0_BUF_S;
-				t |= 0x4 << AR8327_PORT_HOL_CTRL0_EG_PRI1_BUF_S;
-				t |= 0x4 << AR8327_PORT_HOL_CTRL0_EG_PRI2_BUF_S;
-				t |= 0x4 << AR8327_PORT_HOL_CTRL0_EG_PRI3_BUF_S;
-				t |= 0x6 << AR8327_PORT_HOL_CTRL0_EG_PRI4_BUF_S;
-				t |= 0x8 << AR8327_PORT_HOL_CTRL0_EG_PRI5_BUF_S;
-				t |= 0x1e << AR8327_PORT_HOL_CTRL0_EG_PORT_BUF_S;
-			} else {
-				t = 0x3 << AR8327_PORT_HOL_CTRL0_EG_PRI0_BUF_S;
-				t |= 0x4 << AR8327_PORT_HOL_CTRL0_EG_PRI1_BUF_S;
-				t |= 0x6 << AR8327_PORT_HOL_CTRL0_EG_PRI2_BUF_S;
-				t |= 0x8 << AR8327_PORT_HOL_CTRL0_EG_PRI3_BUF_S;
-				t |= 0x19 << AR8327_PORT_HOL_CTRL0_EG_PORT_BUF_S;
-			}
-			ar8xxx_write(priv, AR8327_REG_PORT_HOL_CTRL0(i), t);
-
-			t = 0x6 << AR8327_PORT_HOL_CTRL1_ING_BUF_S;
-			t |= AR8327_PORT_HOL_CTRL1_EG_PRI_BUF_EN;
-			t |= AR8327_PORT_HOL_CTRL1_EG_PORT_BUF_EN;
-			t |= AR8327_PORT_HOL_CTRL1_WRED_EN;
-			ar8xxx_rmw(priv, AR8327_REG_PORT_HOL_CTRL1(i),
-				   AR8327_PORT_HOL_CTRL1_ING_BUF |
-				   AR8327_PORT_HOL_CTRL1_EG_PRI_BUF_EN |
-				   AR8327_PORT_HOL_CTRL1_EG_PORT_BUF_EN |
-				   AR8327_PORT_HOL_CTRL1_WRED_EN,
-				   t);
-		}
-	}
 }
 
 static void
@@ -1092,7 +1094,6 @@
 		pr_err("ar8327: timeout waiting for atu to become ready\n");
 }
 
-#if 0
 static void ar8327_get_arl_entry(struct ar8xxx_priv *priv,
 				 struct arl_entry *a, u32 *status, enum arl_op op)
 {
@@ -1099,8 +1100,7 @@
 	struct mii_bus *bus = priv->mii_bus;
 	u16 r2, page;
 	u16 r1_data0, r1_data1, r1_data2, r1_func;
-	u32 t, val0, val1, val2;
-	int i;
+	u32 val0, val1, val2;
 
 	split_addr(AR8327_REG_ATU_DATA0, &r1_data0, &r2, &page);
 	r2 |= 0x10;
@@ -1137,12 +1137,7 @@
 		if (!*status)
 			break;
 
-		i = 0;
-		t = AR8327_ATU_PORT0;
-		while (!(val1 & t) && ++i < AR8327_NUM_PORTS)
-			t <<= 1;
-
-		a->port = i;
+		a->portmap = (val1 & AR8327_ATU_PORTS) >> AR8327_ATU_PORTS_S;
 		a->mac[0] = (val0 & AR8327_ATU_ADDR0) >> AR8327_ATU_ADDR0_S;
 		a->mac[1] = (val0 & AR8327_ATU_ADDR1) >> AR8327_ATU_ADDR1_S;
 		a->mac[2] = (val0 & AR8327_ATU_ADDR2) >> AR8327_ATU_ADDR2_S;
@@ -1152,7 +1147,6 @@
 		break;
 	}
 }
-#endif
 
 static int
 ar8327_sw_hw_apply(struct switch_dev *dev)
@@ -1463,11 +1457,20 @@
 	.apply_config = ar8327_sw_hw_apply,
 	.reset_switch = ar8xxx_sw_reset_switch,
 	.get_port_link = ar8xxx_sw_get_port_link,
-//	.get_port_stats = ar8xxx_sw_get_port_stats,
+/* The following op is disabled as it hogs the CPU and degrades performance.
+   An implementation has been attempted in 4d8a66d but reading MIB data is slow
+   on ar8xxx switches.
+
+   The high CPU load has been traced down to the ar8xxx_reg_wait() call in
+   ar8xxx_mib_op(), which has to usleep_range() till the MIB busy flag set by
+   the request to update the MIB counter is cleared. */
+#if 0
+	.get_port_stats = ar8xxx_sw_get_port_stats,
+#endif
 };
 
 const struct ar8xxx_chip ar8327_chip = {
-	.caps = AR8XXX_CAP_GIGE, // | AR8XXX_CAP_MIB_COUNTERS,
+	.caps = AR8XXX_CAP_GIGE | AR8XXX_CAP_MIB_COUNTERS,
 	.config_at_probe = true,
 	.mii_lo_first = true,
 
@@ -1491,10 +1494,9 @@
 	.atu_flush_port = ar8327_atu_flush_port,
 	.vtu_flush = ar8327_vtu_flush,
 	.vtu_load_vlan = ar8327_vtu_load_vlan,
+	.phy_fixup = ar8327_phy_fixup,
 	.set_mirror_regs = ar8327_set_mirror_regs,
-#if 0
 	.get_arl_entry = ar8327_get_arl_entry,
-#endif
 	.sw_hw_apply = ar8327_sw_hw_apply,
 
 	.num_mibs = ARRAY_SIZE(ar8236_mibs),
@@ -1503,7 +1505,7 @@
 };
 
 const struct ar8xxx_chip ar8337_chip = {
-	.caps = AR8XXX_CAP_GIGE, // | AR8XXX_CAP_MIB_COUNTERS,
+	.caps = AR8XXX_CAP_GIGE | AR8XXX_CAP_MIB_COUNTERS,
 	.config_at_probe = true,
 	.mii_lo_first = true,
 
@@ -1529,10 +1531,9 @@
 	.vtu_load_vlan = ar8327_vtu_load_vlan,
 	.phy_fixup = ar8327_phy_fixup,
 	.set_mirror_regs = ar8327_set_mirror_regs,
-#if 0
 	.get_arl_entry = ar8327_get_arl_entry,
-#endif
 	.sw_hw_apply = ar8327_sw_hw_apply,
+	.phy_rgmii_set = ar8327_phy_rgmii_set,
 
 	.num_mibs = ARRAY_SIZE(ar8236_mibs),
 	.mib_decs = ar8236_mibs,
Index: ar8327.h
===================================================================
--- ar8327.h	(revision 37981)
+++ ar8327.h	(working copy)
@@ -199,6 +199,7 @@
 #define   AR8327_ATU_ADDR5			BITS(8, 8)
 #define   AR8327_ATU_ADDR5_S			8
 #define   AR8327_ATU_PORTS			BITS(16, 7)
+#define   AR8327_ATU_PORTS_S			16
 #define   AR8327_ATU_PORT0			BIT(16)
 #define   AR8327_ATU_PORT1			BIT(17)
 #define   AR8327_ATU_PORT2			BIT(18)
@@ -278,32 +279,18 @@
 
 #define AR8327_REG_PORT_PRIO(_i)		(0x664 + (_i) * 0xc)
 
-#define AR8327_REG_PORT_HOL_CTRL0(_i)		(0x970 + (_i) * 0x8)
-#define   AR8327_PORT_HOL_CTRL0_EG_PRI0_BUF	BITS(0, 4)
-#define   AR8327_PORT_HOL_CTRL0_EG_PRI0_BUF_S	0
-#define   AR8327_PORT_HOL_CTRL0_EG_PRI1_BUF	BITS(4, 4)
-#define   AR8327_PORT_HOL_CTRL0_EG_PRI1_BUF_S	4
-#define   AR8327_PORT_HOL_CTRL0_EG_PRI2_BUF	BITS(8, 4)
-#define   AR8327_PORT_HOL_CTRL0_EG_PRI2_BUF_S	8
-#define   AR8327_PORT_HOL_CTRL0_EG_PRI3_BUF	BITS(12, 4)
-#define   AR8327_PORT_HOL_CTRL0_EG_PRI3_BUF_S	12
-#define   AR8327_PORT_HOL_CTRL0_EG_PRI4_BUF	BITS(16, 4)
-#define   AR8327_PORT_HOL_CTRL0_EG_PRI4_BUF_S	16
-#define   AR8327_PORT_HOL_CTRL0_EG_PRI5_BUF	BITS(20, 4)
-#define   AR8327_PORT_HOL_CTRL0_EG_PRI5_BUF_S	20
-#define   AR8327_PORT_HOL_CTRL0_EG_PORT_BUF	BITS(24, 6)
-#define   AR8327_PORT_HOL_CTRL0_EG_PORT_BUF_S	24
-
 #define AR8327_REG_PORT_HOL_CTRL1(_i)		(0x974 + (_i) * 0x8)
-#define   AR8327_PORT_HOL_CTRL1_ING_BUF		BITS(0, 4)
-#define   AR8327_PORT_HOL_CTRL1_ING_BUF_S	0
-#define   AR8327_PORT_HOL_CTRL1_EG_PRI_BUF_EN	BIT(6)
-#define   AR8327_PORT_HOL_CTRL1_EG_PORT_BUF_EN	BIT(7)
-#define   AR8327_PORT_HOL_CTRL1_WRED_EN		BIT(8)
 #define   AR8327_PORT_HOL_CTRL1_EG_MIRROR_EN	BIT(16)
 
 #define AR8337_PAD_MAC06_EXCHANGE_EN		BIT(31)
 
+#define AR8327_PHY_MODE_SEL			0x12
+#define   AR8327_PHY_MODE_SEL_RGMII		BIT(3)
+#define AR8327_PHY_TEST_CTRL			0x0
+#define   AR8327_PHY_TEST_CTRL_RGMII_RX_DELAY	BIT(15)
+#define AR8327_PHY_SYS_CTRL			0x5
+#define   AR8327_PHY_SYS_CTRL_RGMII_TX_DELAY	BIT(8)
+
 enum ar8327_led_pattern {
 	AR8327_LED_PATTERN_OFF = 0,
 	AR8327_LED_PATTERN_BLINK,
