Index: hndnand.c
===================================================================
--- hndnand.c	(revision 1717)
+++ hndnand.c	(working copy)
@@ -142,8 +142,7 @@
 {
 	ASSERT(nfl);
 	ASSERT(nfl->select_chip);
-	if (!nfl->select_chip)
-		return 0;
+
 	return (nfl->select_chip)(nfl, chip);
 }
 
Index: nandcore.c
===================================================================
--- nandcore.c	(revision 1717)
+++ nandcore.c	(working copy)
@@ -54,12 +54,12 @@
 static int nandcore_checkbadb(hndnand_t *nfl, uint64 offset);
 static int nandcore_mark_badb(hndnand_t *nfl, uint64 offset);
 
+static int nandcore_read_oob(hndnand_t *nfl, uint64 addr, uint8 *oob);
 #ifndef _CFE_
 static int nandcore_dev_ready(hndnand_t *nfl);
 static int nandcore_select_chip(hndnand_t *nfl, int chip);
 static int nandcore_cmdfunc(hndnand_t *nfl, uint64 addr, int cmd);
 static int nandcore_waitfunc(hndnand_t *nfl, int *status);
-static int nandcore_read_oob(hndnand_t *nfl, uint64 addr, uint8 *oob);
 static int nandcore_write_oob(hndnand_t *nfl, uint64 addr, uint8 *oob);
 static int nandcore_read_page(hndnand_t *nfl, uint64 addr, uint8 *buf, uint8 *oob, bool ecc,
 	uint32 *herr, uint32 *serr);
@@ -405,12 +405,12 @@
 	nandcore.checkbadb = nandcore_checkbadb;
 	nandcore.markbadb = nandcore_mark_badb;
 
+	nandcore.read_oob = nandcore_read_oob;
 #ifndef _CFE_
 	nandcore.dev_ready = nandcore_dev_ready;
 	nandcore.select_chip = nandcore_select_chip;
 	nandcore.cmdfunc = nandcore_cmdfunc;
 	nandcore.waitfunc = nandcore_waitfunc;
-	nandcore.read_oob = nandcore_read_oob;
 	nandcore.write_oob = nandcore_write_oob;
 	nandcore.read_page = nandcore_read_page;
 	nandcore.write_page = nandcore_write_page;
@@ -977,7 +977,23 @@
 	return ret;
 }
 
+#endif
+
+#ifdef _CFE_
 static int
+ffs(int i)
+{       
+	int j;
+
+	if (i != 0)
+		for (j = 0; j < 32; j++)
+			if (i & (1 << j))
+				return j + 1;
+	return 0;
+}       
+#endif
+
+static int
 nandcore_read_oob(hndnand_t *nfl, uint64 addr, uint8 *oob)
 {
 	osl_t *osh;
@@ -1039,6 +1055,7 @@
 	return 0;
 }
 
+#ifndef _CFE_
 static int
 nandcore_write_oob(hndnand_t *nfl, uint64 addr, uint8 *oob)
 {
Index: nflash.c
===================================================================
--- nflash.c	(revision 1717)
+++ nflash.c	(working copy)
@@ -15,7 +15,7 @@
  * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
  * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  *
- * $Id: nflash.c 365592 2012-10-30 07:06:10Z $
+ * $Id: nflash.c 376441 2012-12-27 00:45:42Z $
  */
 
 #include <typedefs.h>
@@ -47,11 +47,89 @@
 static uint32 nflash_col_mask;
 static uint32 nflash_row_shift;
 
+
+#undef DEBUG_GEN_1BIT_ERR
+/* 256 bytes for 3 bytes ecc. */
+#define SOFT_HAMMING_SECTOR_SIZE (256)
+#define SOFT_HAMMING_ECC_BYTES (3)
+
+#define MAX_SOFTECC_OOB_SZ (64)
+static uint8 tmp_page_oob[MAX_SOFTECC_OOB_SZ];
+
+#define SAME_ECC(recc, cecc) \
+				((recc[0] == cecc[0]) && \
+				(recc[1] == cecc[1]) && \
+				(recc[2] == cecc[2]))
+
+#if defined(_CFE_) || defined(CFE_FLASH_ERASE_FLASH_ENABLED)
+extern void hamming_compute_256(const uint8 *data, uint8 *code);
+extern int8 hamming_correct_256(uint8 *data, const uint8 *original_code,
+    const uint8 *computed_code);
+
+#define nand_calculate_ecc(mtd, data, ecc)\
+	hamming_compute_256(data, ecc)
+#define nand_correct_data(mtd, data, read_ecc, calc_ecc)\
+	hamming_correct_256(data, read_ecc, calc_ecc)
+
+int enable_ecc_correct = 1;
+#else
+extern int nand_calculate_ecc(struct mtd_info *mtd, const u_char *dat, u_char *ecc_code);
+extern int nand_correct_data(struct mtd_info *mtd, u_char *dat, u_char *read_ecc, u_char *calc_ecc);
+int enable_ecc_correct = 0;
+#endif
+
+/* Redefine nand_ecclayout to same as mtd-abi.h */
+#ifdef CONFIG_BCM47XX
+#define MTD_MAX_OOBFREE_ENTRIES	16
+#else
+#define MTD_MAX_OOBFREE_ENTRIES	8
+#endif
+struct nand_oobfree {
+	uint32 offset;
+	uint32 length;
+};
+
+struct nand_ecclayout {
+	uint32 eccbytes;
+#ifdef CONFIG_BCM47XX
+	uint32 eccpos[128];
+#else
+	uint32 eccpos[64];
+#endif /* CONFIG_BCM47XX */
+	uint32 oobavail;
+	struct nand_oobfree oobfree[MTD_MAX_OOBFREE_ENTRIES];
+};
+
+/* Define default oob placement schemes for large and small page devices */
+static struct nand_ecclayout brcmnand_swecc_nand_oob_8 = {
+	.eccbytes = 3,
+	.eccpos = {0, 1, 2},
+};
+
+static struct nand_ecclayout brcmnand_swecc_nand_oob_16 = {
+	.eccbytes = 6,
+	.eccpos = {0, 1, 2, 3, 6, 7},
+};
+
+static struct nand_ecclayout brcmnand_swecc_oob_64 = {
+	.eccbytes = 24,
+	.eccpos = {
+		   40, 41, 42, 43, 44, 45, 46, 47,
+		   48, 49, 50, 51, 52, 53, 54, 55,
+		   56, 57, 58, 59, 60, 61, 62, 63},
+};
+
+/* For softare ecc reference current layout. */
+static struct nand_ecclayout *curr_ecclayout = NULL;
+#ifdef DEBUG_GEN_1BIT_ERR
+int enable_inject_err_on_write = 1;
+#endif
+
 /* Prototype */
 static int nflash_poll(si_t *sih, chipcregs_t *cc);
 static int nflash_readst(si_t *sih, chipcregs_t *cc, uint8 *status);
-static int nflash_readoob(hndnand_t *nfl, uint64 offset, uint len, uchar *buf);
-static int nflash_writeoob(hndnand_t *nfl, uint64 offset, uint len, uchar *buf);
+static int nflash_readoob(si_t *sih, chipcregs_t *cc, uint64 offset, uint len, uchar *buf);
+static int nflash_writeoob(si_t *sih, chipcregs_t *cc, uint64 offset, uint len, uchar *buf);
 
 hndnand_t *nflash_init(si_t *sih);
 static void nflash_enable(hndnand_t *nfl, int enable);
@@ -186,16 +264,6 @@
 	nflash.checkbadb = nflash_checkbadb;
 	nflash.markbadb = nflash_mark_badb;
 
-//	nandcore.dev_ready = nandcore_dev_ready;
-//	nandcore.select_chip = nandcore_select_chip;
-//	nandcore.cmdfunc = nandcore_cmdfunc;
-//	nandcore.waitfunc = nandcore_waitfunc;
-//	nflash.read_oob = nflash_readoob;
-//	nflash.write_oob = nflash_writeoob;
-//	nandcore.read_page = nandcore_read_page;
-//	nandcore.write_page = nandcore_write_page;
-//	nandcore.cmd_read_byte = nandcore_cmd_read_byte;
-
 	if (CHIPID(sih->chip) == BCM4706_CHIP_ID) {
 	    uint32 cpu_freq, clk;
 		uint32 w0, w1, w2, w3, w4;
@@ -319,6 +387,21 @@
 				| NFCF_DS_8 | NFCF_WE;
 
 		W_REG(osh, &cc->nflashconf, val);
+
+		switch (nflash.oobsize) {
+		case 64:
+			curr_ecclayout = &brcmnand_swecc_oob_64;
+			break;
+		case 16:
+			curr_ecclayout = &brcmnand_swecc_nand_oob_16;
+			break;
+		case 8:
+			curr_ecclayout = &brcmnand_swecc_nand_oob_8;
+			break;
+		default:
+			printf("unsupported oob size %d.\n", nflash.oobsize);
+			return NULL;
+		}
 	} else {
 		nflash_enable(&nflash, 1);
 		nflash_cmd(osh, cc, NCMD_ID_RD);
@@ -426,6 +509,7 @@
 	uint res;
 
 	ASSERT(sih);
+
 	mask = NFL_SECTOR_SIZE - 1;
 	if ((offset & mask) != 0 || (len & mask) != 0)
 		return 0;
@@ -440,12 +524,27 @@
 	if (CHIPID(sih->chip) == BCM4706_CHIP_ID) {
 		uint32 page_addr, page_offset;
 		uint32 ctrlcode;
+		int prev_page_start_offset = -1;
+		uint page_start_offset;
+		int sector_idx = 0, eccpos;
+		uint8 *pdata;
+		uint8 read_ecc[SOFT_HAMMING_ECC_BYTES];
+		uint8 calc_ecc[SOFT_HAMMING_ECC_BYTES];
 
+		/* 4706 only support SW 1-bit hamming ECC */
+		pdata = (uint8*)buf;
 		while (res > 0) {
 			page_offset = offset & (nflash.pagesize - 1);
 			page_addr = (offset & ~(nflash.pagesize - 1)) * 2;
 			page_addr += page_offset;
 
+			page_start_offset = (offset & ~(uint32)((uint32)nflash.pagesize-1));
+			if (page_start_offset != prev_page_start_offset) {
+				/* read oob only on new page to read. */
+				nflash_readoob(sih, cc, page_start_offset,
+					nflash.oobsize, tmp_page_oob);
+				prev_page_start_offset = page_start_offset;
+			}
 			W_REG(osh, &cc->nflashcoladdr, page_addr & nflash_col_mask);
 			W_REG(osh, &cc->nflashrowaddr, page_addr >> nflash_row_shift);
 
@@ -469,6 +568,27 @@
 				*to = R_REG(osh, &cc->nflashdata);
 			}
 
+			for (i = 0, sector_idx = (page_offset / SOFT_HAMMING_SECTOR_SIZE);
+				 i < (NFL_SECTOR_SIZE / SOFT_HAMMING_SECTOR_SIZE);
+				 i++, sector_idx++) {
+
+				/* find correct ecc position on page oob. */
+				eccpos = sector_idx * SOFT_HAMMING_ECC_BYTES;
+
+				read_ecc[0] = tmp_page_oob[curr_ecclayout->eccpos[eccpos + 0]];
+				read_ecc[1] = tmp_page_oob[curr_ecclayout->eccpos[eccpos + 1]];
+				read_ecc[2] = tmp_page_oob[curr_ecclayout->eccpos[eccpos + 2]];
+
+				nand_calculate_ecc(NULL, pdata, calc_ecc);
+
+				if (enable_ecc_correct && !SAME_ECC(read_ecc, calc_ecc) &&
+					nand_correct_data(NULL, pdata, read_ecc, calc_ecc) < 0) {
+						printf("nflash_read: cannot correct data !!\n");
+					}
+
+				pdata += SOFT_HAMMING_SECTOR_SIZE;
+			}
+
 			res -= NFL_SECTOR_SIZE;
 			offset += NFL_SECTOR_SIZE;
 		}
@@ -564,8 +684,43 @@
 	if (CHIPID(sih->chip) == BCM4706_CHIP_ID) {
 		uint32 page_addr;
 		uint32 ctrlcode;
+		uint8 *pdata;
+		int sector_idx, eccpos;
+		uint8 calc_ecc[SOFT_HAMMING_ECC_BYTES];
 
+		/* 4706 only support SW 1-bit hamming ECC */
+		pdata = (uint8 *)buf;
+
 		while (res > 0) {
+			nflash_readoob(sih, cc, offset, nflash.oobsize, tmp_page_oob);
+
+			for (i = 0, sector_idx = 0;
+				  i < (nflash.pagesize / SOFT_HAMMING_SECTOR_SIZE);
+				  i++, sector_idx++) {
+				eccpos = sector_idx * SOFT_HAMMING_ECC_BYTES;
+				nand_calculate_ecc(NULL, pdata, calc_ecc);
+
+				tmp_page_oob[curr_ecclayout->eccpos[eccpos + 0]] = calc_ecc[0];
+				tmp_page_oob[curr_ecclayout->eccpos[eccpos + 1]] = calc_ecc[1];
+				tmp_page_oob[curr_ecclayout->eccpos[eccpos + 2]] = calc_ecc[2];
+				pdata += SOFT_HAMMING_SECTOR_SIZE;
+			}
+
+			/* written a sector */
+			if (nflash_writeoob(sih, cc, offset,
+				nflash.oobsize, tmp_page_oob) < 0) {
+				printf("\nflash_write write oob fail, offset 0x%08x\n",
+					(uint32)offset);
+				return -1;
+			}
+
+#ifdef DEBUG_GEN_1BIT_ERR
+			for (i = 0; i < enable_inject_err_on_write; i++) {
+				int min_range = (res < nflash.pagesize)? res: nflash.pagesize;
+				min_range /= sizeof(uint32);
+				from[(from[i]%min_range)] ^= 0x04;
+			}
+#endif
 			page_addr = (offset & ~(nflash.pagesize - 1)) * 2;
 
 			W_REG(osh, &cc->nflashcoladdr, page_addr & nflash_col_mask);
@@ -738,10 +893,10 @@
 		uint sec_page_offset;
 		int status1, status2, badblk_pos;
 
-		status1 = nflash_readoob(nfl, offset, sizeof(oob_buf1), oob_buf1);
+		status1 = nflash_readoob(sih, cc, offset, sizeof(oob_buf1), oob_buf1);
 
 		sec_page_offset = offset + nflash.pagesize;
-		status2 = nflash_readoob(nfl, sec_page_offset, sizeof(oob_buf2), oob_buf2);
+		status2 = nflash_readoob(sih, cc, sec_page_offset, sizeof(oob_buf2), oob_buf2);
 
 		if (status1 <= 0 || status2 <= 0)
 			return -1;
@@ -809,10 +964,10 @@
 
 		memset((void *)oob_buf, 0, nflash.oobsize);
 
-		if (nflash_writeoob(nfl, offset, nflash.oobsize, oob_buf) < 0)
+		if (nflash_writeoob(sih, cc, offset, nflash.oobsize, oob_buf) < 0)
 			return -1;
 
-		if (nflash_writeoob(nfl, offset + nflash.pagesize, nflash.oobsize, oob_buf) < 0)
+		if (nflash_writeoob(sih, cc, offset + nflash.pagesize, nflash.oobsize, oob_buf) < 0)
 			return -1;
 	} else {
 		nflash_enable(nfl, 1);
@@ -912,10 +1067,8 @@
 
 /* To read len bytes of oob data in the page specified in the page address offset */
 static int
-nflash_readoob(hndnand_t *nfl, uint64 offset, uint len, uchar *buf)
+nflash_readoob(si_t *sih, chipcregs_t *cc, uint64 offset, uint len, uchar *buf)
 {
-	si_t *sih = nfl->sih;
-	chipcregs_t *cc = (chipcregs_t *)nfl->core;
 	uint32 mask;
 	osl_t *osh;
 	int i;
@@ -972,10 +1125,8 @@
 
 /* To write len bytes of oob data in the page specified in the page address offset */
 static int
-nflash_writeoob(hndnand_t *nfl, uint64 offset, uint len, uchar *buf)
+nflash_writeoob(si_t *sih, chipcregs_t *cc, uint64 offset, uint len, uchar *buf)
 {
-	si_t *sih = nfl->sih;
-	chipcregs_t *cc = (chipcregs_t *)nfl->core;
 	uint32 mask;
 	osl_t *osh;
 	int i;
