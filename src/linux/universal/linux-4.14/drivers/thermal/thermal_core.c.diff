--- linux-4.9.70/drivers/thermal/thermal_core.c	2017-12-16 16:26:04.000000000 +0100
+++ linux-4.9/drivers/thermal/thermal_core.c	2017-12-17 14:54:47.000000000 +0100
@@ -206,6 +206,49 @@ exit:
 	return;
 }
 
+/**
+ * thermal_update_governor() - update the thermal zone device's governor
+ * to a new one.
+ * @tzd: pointer of thermal zone device, which need to update governor.
+ * @name: thermal zone name to fetch the temperature
+ *
+ * Return: On success returns 0, an error code otherwise
+ */
+int thermal_update_governor(struct thermal_zone_device *tzd,
+			    const char *name)
+{
+	struct thermal_governor *old_gov, *new_gov;
+	int ret = 0;
+
+	mutex_lock(&thermal_governor_lock);
+
+	new_gov = __find_governor(name);
+	if (!new_gov) {
+		ret = -EINVAL;
+		goto exit;
+	}
+
+	old_gov = tzd->governor;
+
+	if (old_gov && old_gov->stop)
+		old_gov->stop(tzd);
+
+	if (new_gov->start) {
+		ret = new_gov->start(tzd);
+		if (ret < 0) {
+			if (old_gov && old_gov->start)
+				old_gov->start(tzd);
+			goto exit;
+		}
+	}
+
+	tzd->governor = new_gov;
+
+exit:
+	mutex_unlock(&thermal_governor_lock);
+	return ret;
+}
+
 static int get_idr(struct idr *idr, struct mutex *lock, int *id)
 {
 	int ret;
@@ -732,12 +775,49 @@ trip_point_type_show(struct device *dev,
 		return sprintf(buf, "passive\n");
 	case THERMAL_TRIP_ACTIVE:
 		return sprintf(buf, "active\n");
+	case THERMAL_TRIP_CONFIGURABLE_HI:
+		return sprintf(buf, "configurable_hi\n");
+	case THERMAL_TRIP_CONFIGURABLE_LOW:
+		return sprintf(buf, "configurable_low\n");
+	case THERMAL_TRIP_CRITICAL_LOW:
+		return sprintf(buf, "critical_low\n");
+
 	default:
 		return sprintf(buf, "unknown\n");
 	}
 }
 
 static ssize_t
+trip_point_type_activate(struct device *dev, struct device_attribute *attr,
+				const char *buf, size_t count)
+{
+	struct thermal_zone_device *tz = to_thermal_zone(dev);
+	int trip, result;
+	char *enabled = "enabled";
+	char *disabled = "disabled";
+
+	if (!tz->ops->activate_trip_type)
+		return -EPERM;
+
+	if (!sscanf(attr->attr.name, "trip_point_%d_type", &trip))
+		return -EINVAL;
+
+	if (!strncmp(buf, enabled, sizeof(enabled)))
+		result = tz->ops->activate_trip_type(tz, trip,
+					THERMAL_TRIP_ACTIVATION_ENABLED);
+	else if (!strncmp(buf, disabled, sizeof(disabled)))
+		result = tz->ops->activate_trip_type(tz, trip,
+					THERMAL_TRIP_ACTIVATION_DISABLED);
+	else
+		result = -EINVAL;
+
+	if (result)
+		return result;
+
+	return count;
+}
+
+static ssize_t
 trip_point_temp_store(struct device *dev, struct device_attribute *attr,
 		     const char *buf, size_t count)
 {
@@ -1321,7 +1401,7 @@ thermal_cooling_device_weight_store(stru
  */
 int thermal_zone_bind_cooling_device(struct thermal_zone_device *tz,
 				     int trip,
-				     struct thermal_cooling_device *cdev,
+					struct thermal_cooling_device *cdev,
 				     unsigned long upper, unsigned long lower,
 				     unsigned int weight)
 {
@@ -1769,8 +1849,15 @@ static int create_trip_attrs(struct ther
 		sysfs_attr_init(&tz->trip_type_attrs[indx].attr.attr);
 		tz->trip_type_attrs[indx].attr.attr.name =
 						tz->trip_type_attrs[indx].name;
-		tz->trip_type_attrs[indx].attr.attr.mode = S_IRUGO;
+		tz->trip_type_attrs[indx].attr.attr.mode = S_IRUGO | S_IWUSR;
 		tz->trip_type_attrs[indx].attr.show = trip_point_type_show;
+		tz->trip_type_attrs[indx].attr.store = trip_point_type_activate;
+
+		if (IS_ENABLED(CONFIG_THERMAL_WRITABLE_TRIPS)) {
+			tz->trip_type_attrs[indx].attr.store
+						= trip_point_type_activate;
+			tz->trip_type_attrs[indx].attr.attr.mode |= S_IWUSR;
+		}
 
 		device_create_file(&tz->device,
 				   &tz->trip_type_attrs[indx].attr);
@@ -1874,16 +1961,28 @@ struct thermal_zone_device *thermal_zone
 	struct thermal_governor *governor;
 
 	if (type && strlen(type) >= THERMAL_NAME_LENGTH)
+	{
+	printk(KERN_EMERG "type invalid\n");
 		return ERR_PTR(-EINVAL);
+	}
 
 	if (trips > THERMAL_MAX_TRIPS || trips < 0 || mask >> trips)
+	{
+	printk(KERN_EMERG "trips invalid\n");
 		return ERR_PTR(-EINVAL);
+	}
 
 	if (!ops)
+	{
+	printk(KERN_EMERG "ops invalid\n");
 		return ERR_PTR(-EINVAL);
+	}
 
 	if (trips > 0 && (!ops->get_trip_type || !ops->get_trip_temp))
+	{
+	printk(KERN_EMERG "trip type bad\n");
 		return ERR_PTR(-EINVAL);
+	}
 
 	tz = kzalloc(sizeof(struct thermal_zone_device), GFP_KERNEL);
 	if (!tz)
@@ -1912,6 +2011,7 @@ struct thermal_zone_device *thermal_zone
 	dev_set_name(&tz->device, "thermal_zone%d", tz->id);
 	result = device_register(&tz->device);
 	if (result) {
+	printk(KERN_EMERG "device register fail\n");
 		release_idr(&thermal_tz_idr, &thermal_idr_lock, tz->id);
 		kfree(tz);
 		return ERR_PTR(result);
@@ -1920,24 +2020,30 @@ struct thermal_zone_device *thermal_zone
 	/* sys I/F */
 	if (type) {
 		result = device_create_file(&tz->device, &dev_attr_type);
-		if (result)
+		if (result) {
+	printk(KERN_EMERG "device register fail %d\n",__LINE__);
 			goto unregister;
+		}
 	}
 
 	result = device_create_file(&tz->device, &dev_attr_temp);
-	if (result)
+	if (result) {
+	printk(KERN_EMERG "device register fail %d\n",__LINE__);
 		goto unregister;
-
+}
 	if (ops->get_mode) {
 		result = device_create_file(&tz->device, &dev_attr_mode);
-		if (result)
+		if (result) {
+	printk(KERN_EMERG "device register fail %d\n",__LINE__);
 			goto unregister;
+}
 	}
 
 	result = create_trip_attrs(tz, mask);
-	if (result)
+	if (result) {
+	printk(KERN_EMERG "device register fail %d\n",__LINE__);
 		goto unregister;
-
+}
 	for (count = 0; count < trips; count++) {
 		if (tz->ops->get_trip_type(tz, count, &trip_type))
 			set_bit(count, &tz->trips_disabled);
@@ -1952,31 +2058,38 @@ struct thermal_zone_device *thermal_zone
 
 	if (!passive) {
 		result = device_create_file(&tz->device, &dev_attr_passive);
-		if (result)
+		if (result) {
+	printk(KERN_EMERG "device register fail %d\n",__LINE__);
 			goto unregister;
+}
 	}
 
 	if (IS_ENABLED(CONFIG_THERMAL_EMULATION)) {
 		result = device_create_file(&tz->device, &dev_attr_emul_temp);
-		if (result)
+		if (result) {
+	printk(KERN_EMERG "device register fail %d\n",__LINE__);
 			goto unregister;
+}
 	}
 
 	/* Create policy attribute */
 	result = device_create_file(&tz->device, &dev_attr_policy);
-	if (result)
+	if (result) {
+	printk(KERN_EMERG "device register fail %d\n",__LINE__);
 		goto unregister;
-
+}
 	/* Add thermal zone params */
 	result = create_tzp_attrs(&tz->device);
-	if (result)
+	if (result) {
+	printk(KERN_EMERG "device register fail %d\n",__LINE__);
 		goto unregister;
-
+}
 	/* Create available_policies attribute */
 	result = device_create_file(&tz->device, &dev_attr_available_policies);
-	if (result)
+	if (result) {
+	printk(KERN_EMERG "device register fail %d\n",__LINE__);
 		goto unregister;
-
+}
 	/* Update 'this' zone's governor information */
 	mutex_lock(&thermal_governor_lock);
 
@@ -1988,15 +2101,24 @@ struct thermal_zone_device *thermal_zone
 	result = thermal_set_governor(tz, governor);
 	if (result) {
 		mutex_unlock(&thermal_governor_lock);
+	printk(KERN_EMERG "device register fail %d\n",__LINE__);
 		goto unregister;
 	}
 
+	if (tz->governor && tz->governor->start) {
+		result = tz->governor->start(tz);
+		if (result < 0)
+			tz->governor = NULL;
+	}
+
 	mutex_unlock(&thermal_governor_lock);
 
 	if (!tz->tzp || !tz->tzp->no_hwmon) {
 		result = thermal_add_hwmon_sysfs(tz);
-		if (result)
+		if (result) {
+	printk(KERN_EMERG "device register fail %d\n",__LINE__);
 			goto unregister;
+		}
 	}
 
 	mutex_lock(&thermal_list_lock);
@@ -2016,6 +2138,9 @@ struct thermal_zone_device *thermal_zone
 	return tz;
 
 unregister:
+	if (tz->governor && tz->governor->stop)
+		tz->governor->stop(tz);
+	tz->governor = NULL;
 	release_idr(&thermal_tz_idr, &thermal_idr_lock, tz->id);
 	device_unregister(&tz->device);
 	return ERR_PTR(result);
@@ -2158,6 +2283,39 @@ int thermal_zone_get_offset(struct therm
 }
 EXPORT_SYMBOL_GPL(thermal_zone_get_offset);
 
+/**
+* thermal_zone_get_zone_by_node() - search for a zone and returns its ref
+* @node: device node of the thermal zone
+*
+* When thermal zone is found with the passed device node, returns a reference
+* to it.
+*
+* Return: On success returns a reference to an unique thermal zone with
+* matching device node, an ERR_PTR otherwise (-EINVAL for invalid
+* paramenters, -ENODEV for not found).
+*/
+struct thermal_zone_device *
+thermal_zone_get_zone_by_node(struct device_node *node)
+{
+	struct thermal_zone_device *pos = NULL, *ref = ERR_PTR(-ENODEV);
+	bool found = false;
+
+	if (!node)
+		return ERR_PTR(-EINVAL);
+
+	mutex_lock(&thermal_list_lock);
+	list_for_each_entry(pos, &thermal_tz_list, node)
+		if (node == pos->np) {
+			ref = pos;
+			found = true;
+			break;
+		}
+	mutex_unlock(&thermal_list_lock);
+
+	return ref;
+}
+EXPORT_SYMBOL_GPL(thermal_zone_get_zone_by_node);
+
 #ifdef CONFIG_NET
 static const struct genl_multicast_group thermal_event_mcgrps[] = {
 	{ .name = THERMAL_GENL_MCAST_GROUP_NAME, },
@@ -2328,9 +2486,11 @@ static int __init thermal_init(void)
 	if (result)
 		goto unregister_class;
 
+#ifndef THERMAL_QCOMTSENS	
 	result = of_parse_thermal_zones();
 	if (result)
 		goto exit_netlink;
+#endif
 
 	result = register_pm_notifier(&thermal_pm_nb);
 	if (result)
@@ -2357,7 +2517,9 @@ error:
 static void __exit thermal_exit(void)
 {
 	unregister_pm_notifier(&thermal_pm_nb);
+#ifndef THERMAL_QCOMTSENS	
 	of_thermal_destroy_zones();
+#endif
 	genetlink_exit();
 	class_unregister(&thermal_class);
 	thermal_unregister_governors();
