/******************************************************************************
 *
 *  Copyright (c) 2008 Cavium Networks
 *
 *  This file is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License, Version 2, as
 *  published by the Free Software Foundation.
 *
 *  This file is distributed in the hope that it will be useful,
 *  but AS-IS and WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE, TITLE, or
 *  NONINFRINGEMENT.  See the GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this file; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA or
 *  visit http://www.gnu.org/licenses/.
 *
 *  This file may also be available under a different license from Cavium.
 *  Contact Cavium Networks for more information
 *
 ******************************************************************************/
#include <linux/io.h>
#include <linux/pm.h>
#include <linux/interrupt.h>
#include <mach/pm.h>
#include <linux/init.h> 
#include <linux/module.h> 
#include <linux/proc_fs.h> 
#include <linux/delay.h>
#include <mach/cns3xxx.h>

#include <linux/suspend.h>
extern struct proc_dir_entry *cns3xxx_proc_dir;

#ifdef CONFIG_CPU_FREQ
#include <linux/cpufreq.h>
struct cpufreq_driver cns_cpu_freq_driver;
#endif

//#define CNS_PMU_DEBUG
//#undef CNS_PMU_DEBUG
//#define CNS_PMU_VALIDATION	/* this option will disable all interrupt in LP state */

#define NUM_PWR_CLK_EN			32

unsigned short gwPwrClkEnCntA[NUM_PWR_CLK_EN];

static int cns3xxx_find_index(unsigned int block)
{
	switch(block) {
	case 0x1:
		return 0;
	case 0x2:
		return 1;
	case 0x4:
		return 2;
	case 0x8:
		return 3;
	case 0x10:
		return 4;
	case 0x20:
		return 5;
	case 0x40:
		return 6;
	case 0x80:
		return 7;
	case 0x100:
		return 8;
	case 0x200:
		return 9;
	case 0x400:
		return 10;
	case 0x800:
		return 11;
	case 0x1000:
		return 12;
	case 0x2000:
		return 13;
	case 0x4000:
		return 14;
	case 0x8000:
		return 15;
	case 0x10000:
		return 16;
	case 0x20000:
		return 17;
	case 0x40000:
		return 18;
	case 0x80000:
		return 19;
	case 0x100000:
		return 20;
	case 0x200000:
		return 21;
	case 0x400000:
		return 22;
	case 0x800000:
		return 23;
	case 0x1000000:
		return 24;
	case 0x2000000:
		return 25;
	case 0x4000000:
		return 26;
	case 0x8000000:
		return 27;
	case 0x10000000:
		return 28;
	case 0x20000000:
		return 29;
	case 0x40000000:
		return 30;
	case 0x80000000:
		return 31;
	default:
		return -1;
	}
	
	return -1;
}

/*
 * cns3xxx_pwr_clk_en - clock enable 
 * @block: bitmap for peripheral
 */
void cns3xxx_pwr_clk_en(unsigned int block)
{
	int index;
	u32 reg = __raw_readl(PM_CLK_GATE_REG);
	
	index = cns3xxx_find_index(block&PM_CLK_GATE_REG_MASK);
	if(index < 0) {
		printk("%s,%d=>parameter error!!!\n", __FUNCTION__, __LINE__);
		return;
	}
		
	reg |= (block&PM_CLK_GATE_REG_MASK);
	__raw_writel(reg, PM_CLK_GATE_REG);
	gwPwrClkEnCntA[index]++;
}

/*
 * cns3xxx_pwr_clk_disable - clock disable 
 * @block: bitmap for peripheral
 */
void cns3xxx_pwr_clk_disable(unsigned int block)
{
	int index;
	
	index = cns3xxx_find_index(block&PM_CLK_GATE_REG_MASK);
	if(index < 0) {
		printk("%s,%d=>parameter error!!!\n", __FUNCTION__, __LINE__);
		return;
	}
		
	if(gwPwrClkEnCntA[index] <= 1) {
		gwPwrClkEnCntA[index] = 0;
		u32 reg = __raw_readl(PM_CLK_GATE_REG);
		reg &= & ~(block&PM_CLK_GATE_REG_MASK);
		__raw_writel(reg, PM_CLK_GATE_REG);
		}
	else {
		gwPwrClkEnCntA[index]--;
	}	
}

/*
 * void cns3xxx_pwr_lp_hs - enable lower power handshake
 * @dev: bitmap for device 
 * 	
 */
static void cns3xxx_lp_hs(unsigned int dev)
{
	if (PM_HS_CFG_REG_MASK_SUPPORT & dev) { /* only enable supportted peripheral */
		u32 hs_cfg = __raw_readl(PM_HS_CFG_REG);
		hs_cfg |= (PM_HS_CFG_REG_MASK_SUPPORT & dev);
		__raw_writel(hs_cfg,PM_HS_CFG_REG);
	}
}

/*
 * cns3xxx_pwr_soft_rst - software reset
 * @block: bitmap for peripheral
 */
void cns3xxx_pwr_soft_rst_force(unsigned int block)
{
	/* bit 0, 28, 29 => program low to reset, 
	 * the other else program low and then high
	 */
	if (block & 0x30000001) {
		u32 reg = __raw_readl(PM_SOFT_RST_REG);
		PM_SOFT_RST_REG &= ~(block&PM_SOFT_RST_REG_MASK);
		__raw_writel
	} else {
		PM_SOFT_RST_REG &= ~(block&PM_SOFT_RST_REG_MASK);
		PM_SOFT_RST_REG |= (block&PM_SOFT_RST_REG_MASK);
	}

	/* enable low power handshake after reset */
	cns3xxx_lp_hs(block);
}

void cns3xxx_pwr_soft_rst(unsigned int block)
{
	static unsigned int soft_reset = 0;

	if(soft_reset & block) {
		//Because SPI/I2C/GPIO use the same block, just only reset once...
		return;
	}
	else {
		soft_reset |= block;
	}
	cns3xxx_pwr_soft_rst_force(block);
}	
	
/*
 * cns3xxx_pwr_mode - change CPU power mode
 * @pwr_mode: CPU power mode
 * CNS3XXX_PWR_CPU_MODE_DFS, CNS3XXX_PWR_CPU_MODE_IDLE
 * CNS3XXX_PWR_CPU_MODE_HALT, CNS3XXX_PWR_CPU_MODE_DOZE
 * CNS3XXX_PWR_CPU_MODE_SLEEP, CNS3XXX_PWR_CPU_MODE_HIBERNATE
 */
void cns3xxx_pwr_mode(unsigned int pwr_mode)
{
	if (CNS3XXX_PWR_CPU_MODE_HIBERNATE < pwr_mode) {
		return;
	}

	PM_CLK_CTRL_REG &= 
			~(0x7<<PM_CLK_CTRL_REG_OFFSET_CPU_PWR_MODE);
	PM_CLK_CTRL_REG |= 
			((pwr_mode&0x7)<<PM_CLK_CTRL_REG_OFFSET_CPU_PWR_MODE);
};

/* cns3xxx_pwr_power_up - 
 * cns3xxx_pwr_power_down - 
 * @dev_num: bitmap for functional block
 * 	CNS3XXX_PWR_PLL_PCIE_PHY1, CNS3XXX_PWR_PLL_PCIE_PHY0
 *	CNS3XXX_PWR_PLL_SATA_PHY1, CNS3XXX_PWR_PLL_SATA_PHY0
 * 	CNS3XXX_PWR_PLL_USB_PHY1, CNS3XXX_PWR_PLL_USB_PHY0
 * 	CNS3XXX_PWR_PLL_I2SCD, CNS3XXX_PWR_PLL_I2S
 * 	CNS3XXX_PWR_PLL_LCD, CNS3XXX_PWR_PLL_USB
 * 	CNS3XXX_PWR_PLL_RGMII, CNS3XXX_PWR_PLL_ALL
 */
void cns3xxx_pwr_power_up(unsigned int dev_num) 
{
	PM_PLL_HM_PD_CTRL_REG &= ~(dev_num & CNS3XXX_PWR_PLL_ALL);

	/* TODO: wait for 300us for the PLL output clock locked */
};

void cns3xxx_pwr_power_down(unsigned int dev_num)
{
	/* write '1' to power down */
	PM_PLL_HM_PD_CTRL_REG |= (dev_num & CNS3XXX_PWR_PLL_ALL);
};

#if defined(CNS_PMU_DEBUG) || defined(CNS_PMU_VALIDATION) || defined(CONFIG_CNS3XXX_PSE_WOL)
static void clean_wakeup_intr(void)
{
	PM_WU_CTRL0_REG = 0;
	PM_WU_CTRL1_REG = 0;
}

static void set_wakeup_intr(unsigned int irq)
{
	int offset;

	if ((IRQ_CNS3XXX_PMU>irq) 
		|| (IRQ_CNS3XXX_EXTERNAL_PIN2<irq)) {
		printk("%s: incorrect interrupt ID (%d)\n", __FUNCTION__, irq);
		return;	
	}

	offset = irq - IRQ_TC11MP_GIC_START;

	if (31<offset) {
		offset &= 0x1f;
		PM_WU_CTRL1_REG |= (0x1<<offset);
	} else {
		PM_WU_CTRL0_REG |= (0x1<<offset);
	}
}
#endif



#define GIC_REG_VALUE(offset) (*((volatile unsigned int *)(CNS3XXX_TC11MP_GIC_DIST_BASE_VIRT+offset)))

extern void cns3xxx_timer1_change_clock(void);
/*
 * cns3xxx_pwr_change_pll_cpu - change PLL CPU frequency
 * @cpu_sel: PLL CPU frequency
 * @div_sel: divider
 *
 * This feature requires that 2nd core is in WFI mode and L2 cache is disabled
 * Before calling this function, please make sure that L2 cache is not in use.
 *
 * Procedure:
 * 		1. Set PLL_CPU_SEL
 * 		2. Set in DFS mode
 * 		3. disable all interrupt except interrupt ID-32 (clkscale_intr)
 * 		4. Let CPU enter into WFI state
 * 		5. Wait PMU to change PLL_CPU and divider and wake up CPU 
 */
void enter_wfi(void)
{

	mb();
	/* 4. Let CPU enter into WFI state */
	    asm volatile(
            "mov r0, #0\n"
            "mcr p15, 0, r0, c7, c10, 5\n"
            "mcr p15, 0, r0, c7, c10, 4\n"
            "mcr p15, 0, r0, c7, c0, 4\n" ::: "r0"
            );

}
void cns3xxx_pwr_change_cpu_clock(unsigned int cpu_sel, unsigned int div_sel)
{
	int old_cpu, old_div;

	/* sanity check */
	if ((CNS3XXX_PWR_PLL_CPU_700MHZ < cpu_sel) 
			|| (CNS3XXX_PWR_CPU_CLK_DIV_BY4 < div_sel)) {
		printk("%s: incorrect parameter, cpu_sel:%d, div_sel:%d \n", 
			__FUNCTION__, cpu_sel, div_sel);
		return;
	}

	old_cpu = (PM_CLK_CTRL_REG >> PM_CLK_CTRL_REG_OFFSET_PLL_CPU_SEL) &0xf;
	old_div = (PM_CLK_CTRL_REG >> PM_CLK_CTRL_REG_OFFSET_CPU_CLK_DIV) & 0x3;

	if ((cpu_sel == old_cpu) 
			&& (div_sel == old_div)) {
		return;
	}
		
	/* 1. Set PLL_CPU_SEL */
	PM_PLL_CPU_SEL(cpu_sel);
	PM_CPU_CLK_DIV(div_sel);

	/* 2. Set in DFS mode */
	cns3xxx_pwr_mode(CNS3XXX_PWR_CPU_MODE_DFS);

	//PM_HS_CFG_REG |= ((0x1<<2) | (0x1<<11));

	/* 3. disable all interrupt except interrupt ID-32 (clkscale_intr) */
	GIC_REG_VALUE(0x184) = 0xffffffff; 
	GIC_REG_VALUE(0x188) = 0xffffffff;
	GIC_REG_VALUE(0x104) = 0x00000001; 
	GIC_REG_VALUE(0x108) = 0x80000000;
#if defined (CNS_PMU_DEBUG)
	clean_wakeup_intr();
	set_wakeup_intr(IRQ_CNS3XXX_EXTERNAL_PIN2);
	MISC_GPIOB_PIN_ENABLE_REG |= (0x1 << 27); /* ext intr2 share with GPIOB28*/
#endif
	enter_wfi();
	/* enable interrupts (we disabled before WFI) */
	GIC_REG_VALUE(0x104) = 0xffffffff; 
	GIC_REG_VALUE(0x108) = 0xffffffff;

#if 1
	/* FIXME: this section should be move to cpufreq notifier of timer */
	cns3xxx_timer1_change_clock();
#endif

}

/*
 * clock_out_sel - select clock source to ClkOut pin
 *
 */
void clock_out_sel(int sel, int div) 
{
	int temp = PM_CLK_CTRL_REG;

	MISC_GPIOB_PIN_ENABLE_REG |= (0x1 << 26); /* Set GPIOB26 to ClkOut*/
	/* select ClkOut source as pll_cpu_clk and ClkOut divider is by 16 */
	temp &=~(0x3f << PM_CLK_CTRL_REG_OFFSET_CLKOUT_SEL);
	temp |= ((div&0x3) << PM_CLK_CTRL_REG_OFFSET_CLKOUT_DIV); 
	temp |= ((sel&0xF) << PM_CLK_CTRL_REG_OFFSET_CLKOUT_SEL);
	PM_CLK_CTRL_REG = temp;
}

#ifdef CONFIG_CACHE_L2CC /* dynamic change DDR2 clock need lockdown instruction to L2 */
#define DMC_REG_VALUE(offset) (*((volatile unsigned int *)(CNS3XXX_DMC_BASE_VIRT+offset)))
#define L2CC_LOCKDOWN_BY_LINE_ENABLE_REG (*((volatile unsigned int *)(CNS3XXX_L2C_BASE_VIRT+0x950)))

static void dmc_cfg_in_cache(unsigned int clk)
{
	int val = 0;
	
	/* 2. Issue pause command */
	DMC_REG_VALUE(0x4) = 0x3;

	/* 3. Issue sleep command */
	DMC_REG_VALUE(0x4) = 0x1;

	while(0x3 != val) {
		val = DMC_REG_VALUE(0x0);
		val &= 0x3;
	}

	/* 4. Chnage DDR2 */
	val = PM_CLK_CTRL_REG;

	val &= ~(0x3 << PM_CLK_CTRL_REG_OFFSET_PLL_DDR2_SEL);
	val |= (clk << PM_CLK_CTRL_REG_OFFSET_PLL_DDR2_SEL);
	PM_CLK_CTRL_REG = val;

	/* 5. enable change enable bit */
	val |= (0x1 << PM_CLK_CTRL_REG_OFFSET_DDR2_CHG_EN);

	PM_CLK_CTRL_REG = val;
	
	/* 6. update DMC parameter */
	switch (clk) {
	case 0:
		writel(0x00000009, CNS3XXX_DMC_BASE_VIRT + 0x20);
		writel(0x0000000D, CNS3XXX_DMC_BASE_VIRT + 0x24);
		writel(0x00000204, CNS3XXX_DMC_BASE_VIRT + 0x28);
		writel(0x00000204, CNS3XXX_DMC_BASE_VIRT + 0x30);
		writel(0x00000002, CNS3XXX_DMC_BASE_VIRT + 0x34);
		writel(0x00000003, CNS3XXX_DMC_BASE_VIRT + 0x38);
		writel(0x00000002, CNS3XXX_DMC_BASE_VIRT + 0x3C);
		writel(0x00000618, CNS3XXX_DMC_BASE_VIRT + 0x10);
		break;
	case 1:
		writel(0x0000000C, CNS3XXX_DMC_BASE_VIRT + 0x20);
		writel(0x00000010, CNS3XXX_DMC_BASE_VIRT + 0x24);
		writel(0x00000204, CNS3XXX_DMC_BASE_VIRT + 0x28);
		writel(0x00000204, CNS3XXX_DMC_BASE_VIRT + 0x30);
		writel(0x00000003, CNS3XXX_DMC_BASE_VIRT + 0x34);
		writel(0x00000004, CNS3XXX_DMC_BASE_VIRT + 0x38);
		writel(0x00000002, CNS3XXX_DMC_BASE_VIRT + 0x3C);
		writel(0x0000081B, CNS3XXX_DMC_BASE_VIRT + 0x10);
		break;
	case 2:
		writel(0x0000000E, CNS3XXX_DMC_BASE_VIRT + 0x20);
		writel(0x00000013, CNS3XXX_DMC_BASE_VIRT + 0x24);
		writel(0x00000305, CNS3XXX_DMC_BASE_VIRT + 0x28);
		writel(0x00000305, CNS3XXX_DMC_BASE_VIRT + 0x30);
		writel(0x00000004, CNS3XXX_DMC_BASE_VIRT + 0x34);
		writel(0x00000005, CNS3XXX_DMC_BASE_VIRT + 0x38);
		writel(0x00000003, CNS3XXX_DMC_BASE_VIRT + 0x3C);
		writel(0x00000926, CNS3XXX_DMC_BASE_VIRT + 0x10);
		break;
	case 3:
		writel(0x00000012, CNS3XXX_DMC_BASE_VIRT + 0x20);
		writel(0x00000018, CNS3XXX_DMC_BASE_VIRT + 0x24);
		writel(0x00000406, CNS3XXX_DMC_BASE_VIRT + 0x28);
		writel(0x00000406, CNS3XXX_DMC_BASE_VIRT + 0x30);
		writel(0x00000004, CNS3XXX_DMC_BASE_VIRT + 0x34);
		writel(0x00000006, CNS3XXX_DMC_BASE_VIRT + 0x38);
		writel(0x00000003, CNS3XXX_DMC_BASE_VIRT + 0x3C);
		writel(0x00000C30, CNS3XXX_DMC_BASE_VIRT + 0x10);
		break;
	default:
        break;
    }
	/* 7. polling change enable bit */
	val = 0;
	while (0x40000000 != val) { /* */
		val = PM_CLK_CTRL_REG;
		val &= 0x40000000;
	}
	
	/* 8. Issue wakeup command */
	DMC_REG_VALUE(0x4) = 0x2;
	val = 0;
	while(0x2 != val) {
		val = readl(CNS3XXX_DMC_BASE_VIRT);
		val &= 0x3;
	}
	/* 9. Issue go command */
	DMC_REG_VALUE(0x4) = 0x0;
	val = 0;
	while(0x1 != val) {
		val = readl(CNS3XXX_DMC_BASE_VIRT);
		val &= 0x3;
	}
}

/* cns3xxx_pwr_change_pll_ddr - change DDR2 frequency
 * @ddr_sel: DDR2 clock select
 * 	CNS3XXX_PWR_PLL_DDR2_200MHZ
 * 	CNS3XXX_PWR_PLL_DDR2_266MHZ
 * 	CNS3XXX_PWR_PLL_DDR2_333MHZ
 * 	CNS3XXX_PWR_PLL_DDR2_400MHZ
 */
void cns3xxx_pwr_change_pll_ddr(unsigned int ddr_sel)
{
	unsigned int volatile i=0, j;
	unsigned int volatile dmc_cfg_in_cache_addr;
	unsigned int volatile tmp;

	clock_out_sel(CNS3XXX_PMU_CLKOUT_PLL_DDR2, CNS3XXX_PMU_CLKOUT_DIV_16);

	if (CNS3XXX_PWR_PLL_DDR2_400MHZ < ddr_sel) {
		return;
	}

	/* lockdown instruction*/
	dmc_cfg_in_cache_addr = (unsigned long) dmc_cfg_in_cache;
	L2CC_LOCKDOWN_BY_LINE_ENABLE_REG = 1;

	j = dmc_cfg_in_cache_addr;

	for (i = j; i<=(j+0x1000); i+=4) {
		tmp = *(unsigned int *)i;
	}

	L2CC_LOCKDOWN_BY_LINE_ENABLE_REG = 0;

	dmc_cfg_in_cache(ddr_sel);
}
#endif

void cns3xxx_wfi(void)
{
	mb();
	asm volatile(
			"mov r0, #0\n"
			"mcr p15, 0, r0, c7, c10, 4\n"
			"mcr p15, 0, r0, c7, c0, 4\n" ::: "r0"
			);
}

/*
 * cns3xxx_pwr_sleep - 
 */
void cns3xxx_pwr_sleep(void)
{
	/* 1. Set in sleep mode
	 * 2. disable all functional block
	 * 3. make sure that all function block are in power off state
	 * 4. power down all PLL 
	 * 5. Let CPU enter into WFI state
	 * 6. Wait PMU to change PLL_CPU and divider and wake up CPU 
 	 */	
	int i, j, count = 0;
	/* 1. Set in SLEEP mode */
	cns3xxx_pwr_mode(CNS3XXX_PWR_CPU_MODE_SLEEP);

	/* 2. disable all functional block */
	i = PM_CLK_GATE_REG;
	PM_CLK_GATE_REG = 0x0;

	/* 3. make sure that all function block are in power off state */
	while (0x4 != PM_PWR_STA_REG) {
		count++;
		if (1000 == count) {
			count = PM_PWR_STA_REG;
			break;
		}
	};

	/* 4. power down all PLL */
	j = PM_PLL_HM_PD_CTRL_REG;
	PM_PLL_HM_PD_CTRL_REG = 0x00003FFC;

#if	0
    /* set DMC to low power hand shake */
    PM_HS_CFG_REG |= (0x1 << 2);
    /* disable DMC */
    PM_CLK_GATE_REG &= ~(0x1<<2);
#endif

	/* set wake up interrupt source, use ext_intr1 to wake up*/
	PM_WU_CTRL0_REG = 0x0; PM_WU_CTRL1_REG = 0x40000000;
	MISC_GPIOB_PIN_ENABLE_REG |= (0x1 << 27);

	/* 5. Let CPU enter into WFI state */
	GIC_REG_VALUE(0x104) = 0x1; /* enable clock scaling interrupt */
//	printk("<0>enter WFI\n");
	cns3xxx_wfi();
	PM_CLK_GATE_REG = i;
	PM_PLL_HM_PD_CTRL_REG = j;
//	printk("<0>leave WFI\n");
	GIC_REG_VALUE(0x104) = 0xffffffff;
	GIC_REG_VALUE(0x108) = 0xffffffff;
	cns3xxx_pwr_mode(CNS3XXX_PWR_CPU_MODE_DFS);
}

/*
 * cns3xxx_pwr_sleep_test - enter into sleep and won't be wake up
 */
void cns3xxx_pwr_sleep_test(void)
{
	int i, j, count = 0;
	/* 1. Set in SLEEP mode */
	cns3xxx_pwr_mode(CNS3XXX_PWR_CPU_MODE_SLEEP);

	/* 2. disable all functional block */
	i = PM_CLK_GATE_REG;
	PM_CLK_GATE_REG = 0x0;

	/* 3. make sure that all function block are in power off state */
	while (0x4 != PM_PWR_STA_REG) {
		count++;
		if (1000 == count) {
			count = PM_PWR_STA_REG;
			break;
		}
	};
	/* 4. power down all PLL */
	j = PM_PLL_HM_PD_CTRL_REG;
	PM_PLL_HM_PD_CTRL_REG = 0x00003FFC;

	/* set wake up interrupt source, do nothing */
	PM_WU_CTRL0_REG = 0x0; PM_WU_CTRL1_REG = 0x00000000;

	/* 5. Let CPU enter into WFI state */
	GIC_REG_VALUE(0x104) = 0x1; /* enable clock scaling interrupt */
	printk("<0>enter WFI\n");
	cns3xxx_wfi();
	PM_CLK_GATE_REG = i;
	PM_PLL_HM_PD_CTRL_REG = j;
	printk("<0>leave WFI, count 0x%.8x\n", count);
	GIC_REG_VALUE(0x104) = 0xffffffff;
	GIC_REG_VALUE(0x108) = 0xffffffff;
	cns3xxx_pwr_mode(CNS3XXX_PWR_CPU_MODE_DFS);
}

/*
 * cns3xxx_pwr_hibernate - enter into hibernate
 */
void cns3xxx_pwr_hibernate(void)
{
	int i, j, count = 0;
	/* 1. Set in SLEEP mode */
	cns3xxx_pwr_mode(CNS3XXX_PWR_CPU_MODE_HIBERNATE);

	/* 2. disable all functional block */
	i = PM_CLK_GATE_REG;
	PM_CLK_GATE_REG = 0x0;

	/* 3. make sure that all function block are in power off state */
	while (0x4 != PM_PWR_STA_REG) {
		count++;
		if (1000 == count) {
			count = PM_PWR_STA_REG;
			break;
		}
	};
	/* 4. power down all PLL */
	j = PM_PLL_HM_PD_CTRL_REG;
	PM_PLL_HM_PD_CTRL_REG = 0x00003FFC;

	/* set wake up interrupt source, do nothing */
	PM_WU_CTRL0_REG = 0x0; PM_WU_CTRL1_REG = 0x00000000;

	/* 5. Let CPU enter into WFI state */
	GIC_REG_VALUE(0x104) = 0x1; /* enable clock scaling interrupt */
	printk("<0>enter WFI\n");
	cns3xxx_wfi();
	PM_CLK_GATE_REG = i;
	PM_PLL_HM_PD_CTRL_REG = j;
	printk("<0>leave WFI, count 0x%.8x\n", count);
	GIC_REG_VALUE(0x104) = 0xffffffff;
	GIC_REG_VALUE(0x108) = 0xffffffff;
	cns3xxx_pwr_mode(CNS3XXX_PWR_CPU_MODE_DFS);
}

/*
 * cns3xxx_pwr_doze - 
 */
void cns3xxx_pwr_doze(void)
{
	/* 1. Set in doze mode */
	cns3xxx_pwr_mode(CNS3XXX_PWR_CPU_MODE_DOZE);


	/* set wake up interrupt source*/
	PM_WU_CTRL0_REG = 0x0; PM_WU_CTRL1_REG = 0x40000000;
	MISC_GPIOB_PIN_ENABLE_REG |= (0x1 << 27);

	/* 5. Let CPU enter into WFI state */
	GIC_REG_VALUE(0x104) = 0x1; /* enable clock scaling interrupt */
	printk("<0>enter WFI\n");
	cns3xxx_wfi();
	printk("<0>leave WFI\n");
	cns3xxx_pwr_mode(CNS3XXX_PWR_CPU_MODE_DFS);
}
#if 0 /* remove idle mode support */
/*
 * cns3xxx_pwr_idle -
 * IDLE mode just turn off CPU clock. 
 * L2 cache, peripheral, PLL, external DRAM and chip power are still on 
 */
void cns3xxx_pwr_idle(void)
{
	/* 1. Set in IDLE mode */
	cns3xxx_pwr_mode(CNS3XXX_PWR_CPU_MODE_IDLE);

#ifdef CNS_PMU_VALIDATION
	/* 
 	 * CPU can be wake up by any interrupt here, 
 	 * we disable all interrupt is just for testing 
	 */

	/* disable all interrupt except interrupt ID-32 (clkscale_intr) */
	GIC_REG_VALUE(0x184) = 0xfffffffe; GIC_REG_VALUE(0x188) = 0xffffffff;
	clean_wakeup_intr();
	set_wakeup_intr(IRQ_CNS3XXX_EXTERNAL_PIN1);
	MISC_GPIOB_PIN_ENABLE_REG |= (0x1 << 28); /* ext intr1 share with GPIOB28*/
#else
	/* disable timer interrupt */
	GIC_REG_VALUE(0x188) = 0x02000000;
#endif

	/* 5. Let CPU enter into WFI state */
	cns3xxx_wfi();
	cns3xxx_pwr_mode(CNS3XXX_PWR_CPU_MODE_DFS);

#ifdef CNS_PMU_VALIDATION
	GIC_REG_VALUE(0x104) = 0xfffffffe;
	GIC_REG_VALUE(0x108) = 0xffffffff;
#else
	GIC_REG_VALUE(0x108) = 0x02000000;
#endif
}
#endif
/*
 * cns3xxx_pwr_halt - 
 * HALT mode just turn off CPU and L2 cache clock. 
 * peripheral, PLL, external DRAM and chip power are still on 
 */

void cns3xxx_pwr_halt(void)
{
	/* 1. Set in HALT mode */
	cns3xxx_pwr_mode(CNS3XXX_PWR_CPU_MODE_HALT);

#ifdef CNS_PMU_VALIDATION
	/* 
 	 * CPU can be wake up by any interrupt here, 
 	 * we disable all interrupt is just for testing 
	 */

	/* disable all interrupt except interrupt ID-32 (clkscale_intr) */
	GIC_REG_VALUE(0x184) = 0xfffffffe; GIC_REG_VALUE(0x188) = 0xffffffff;
	clean_wakeup_intr();
	set_wakeup_intr(IRQ_CNS3XXX_EXTERNAL_PIN1);
	MISC_GPIOB_PIN_ENABLE_REG |= (0x1 << 28); /* ext intr1 share with GPIOB28*/
#else
	/* disable timer interrupt */
	GIC_REG_VALUE(0x188) = 0x02000000;
#endif

	/* 5. Let CPU enter into WFI state */
	cns3xxx_wfi();
	cns3xxx_pwr_mode(CNS3XXX_PWR_CPU_MODE_DFS);

#ifdef CNS_PMU_VALIDATION
	GIC_REG_VALUE(0x104) = 0xfffffffe;
	GIC_REG_VALUE(0x108) = 0xffffffff;
#else
	GIC_REG_VALUE(0x108) = 0x02000000;
#endif
}

/*
 * cns3xxx_cpu_clock - return CPU/L2 clock
 *  aclk: cpu clock/2
 *  hclk: cpu clock/4
 *  pclk: cpu clock/8
 */
int cns3xxx_cpu_clock(void)
{
#define CPU_BASE 300
	int cpu, cpu_sel, div_sel;
	
	cpu_sel = (PM_CLK_CTRL_REG >> PM_CLK_CTRL_REG_OFFSET_PLL_CPU_SEL) & 0xf;
	div_sel = (PM_CLK_CTRL_REG >> PM_CLK_CTRL_REG_OFFSET_CPU_CLK_DIV) & 0x3;

	cpu = (CPU_BASE + ((cpu_sel/3) * 100) + ((cpu_sel %3) *33)) >> div_sel;
	return cpu;
}

int get_cns3xxx_cpu_clock(void)
{
#define CPU_BASE 300
    int cpu, pll_cpu, cpu_sel, div_sel, cpu_grade;
    unsigned int mem_reg;

    cpu_sel = (PM_CLK_CTRL_REG >> PM_CLK_CTRL_REG_OFFSET_PLL_CPU_SEL) & 0xf;
    div_sel = (PM_CLK_CTRL_REG >> PM_CLK_CTRL_REG_OFFSET_CPU_CLK_DIV) & 0x3;
	cpu_grade = (MISC_CHIP_CONFIG_REG >> 11) & 0x1;

	pll_cpu = CPU_BASE + ((cpu_sel/3) * 100) + ((cpu_sel %3) *33);
    cpu = (pll_cpu >> div_sel) >> cpu_grade;
	return cpu;
}

const int ddr_speed_str[]={200,266,333,400};
static int cns3xxx_read_proc(char *page, char **start, off_t off, int count, int *eof, void *data)
{
    int num = 0;

    num += sprintf(page + num, "CLK_GATE_REG         0x%.8x\n", PM_CLK_GATE_REG);
    num += sprintf(page + num, "SOFT_RST_REG         0x%.8x\n", PM_SOFT_RST_REG);
    num += sprintf(page + num, "HS_CFG_REG           0x%.8x\n", PM_HS_CFG_REG);
    num += sprintf(page + num, "CACTIVE_STA_REG      0x%.8x\n", PM_CACTIVE_STA_REG);
    num += sprintf(page + num, "PWR_STA_REG          0x%.8x\n", PM_PWR_STA_REG);
    num += sprintf(page + num, "CLK_CTRL_REG         0x%.8x\n", PM_CLK_CTRL_REG);
    num += sprintf(page + num, "PLL_LCD_I2S_CTRL_REG 0x%.8x\n", PM_PLL_LCD_I2S_CTRL_REG);
    num += sprintf(page + num, "PLL_HM_PD_CTRL_REG   0x%.8x\n", PM_PLL_HM_PD_CTRL_REG);
    num += sprintf(page + num, "REGULAT_CTRL_REG     0x%.8x\n", PM_REGULAT_CTRL_REG);
    num += sprintf(page + num, "WDT_CTRL_REG         0x%.8x\n", PM_WDT_CTRL_REG);
    num += sprintf(page + num, "WU_CTRL0_REG         0x%.8x\n", PM_WU_CTRL0_REG);
    num += sprintf(page + num, "WU_CTRL1_REG         0x%.8x\n", PM_WU_CTRL1_REG);
    num += sprintf(page + num, "CSR_REG 0x%.8x\n", PM_CSR_REG);

    num += sprintf(page + num, "PLL CPU Frequency: ");
	switch (PM_CLK_CTRL_REG&0xf) {
	case 0: num += sprintf(page + num, "300MHz\n"); break;
	case 1: num += sprintf(page + num, "333MHz\n"); break;
	case 2: num += sprintf(page + num, "366MHz\n"); break;
	case 3: num += sprintf(page + num, "400MHz\n"); break;
	case 4: num += sprintf(page + num, "433MHz\n"); break;
	case 5: num += sprintf(page + num, "466MHz\n"); break;
	case 6: num += sprintf(page + num, "500MHz\n"); break;
	case 7: num += sprintf(page + num, "533MHz\n"); break;
	case 8: num += sprintf(page + num, "566MHz\n"); break;
	case 9: num += sprintf(page + num, "600MHz\n"); break;
	default:
    	num += sprintf(page + num, "!!!!!\n");
	}
    
	num += sprintf(page + num, "CPU clock divider: %d\n", 0x1 << ((PM_CLK_CTRL_REG>>4)&0x3));
	num += sprintf(page + num, "CPU clock: %d MHz\n", cns3xxx_cpu_clock());
	num += sprintf(page + num, "DDR2 clock %d MHz\n", ddr_speed_str[(PM_CLK_CTRL_REG>>7)&0x3]);

    return num;
}

static int cns3xxx_write_proc(struct file *file, const char *buffer, unsigned long count, void *data)
{
    if (count) {
        if (buffer[0] == '4') {
			cns3xxx_pwr_change_cpu_clock(CNS3XXX_PWR_PLL_CPU_400MHZ, CNS3XXX_PWR_CPU_CLK_DIV_BY1);
			printk("<0>CPU 400MHz Test OK\n");
		} else if (buffer[0] == '5') {
			cns3xxx_pwr_change_cpu_clock(CNS3XXX_PWR_PLL_CPU_500MHZ, CNS3XXX_PWR_CPU_CLK_DIV_BY1);
			printk("<0>CPU 500MHz Test OK\n");
		} else if (buffer[0] == '6') {
			cns3xxx_pwr_change_cpu_clock(CNS3XXX_PWR_PLL_CPU_600MHZ, CNS3XXX_PWR_CPU_CLK_DIV_BY1);
			printk("<0>CPU 600MHz Test OK\n");
#if 0
		} else if (buffer[0] == 'i') {
			cns3xxx_pwr_idle();
			printk("<0>IDLE Mode Test OK\n");
#endif
		} else if (buffer[0] == 'h') {
			cns3xxx_pwr_halt();
			printk("<0>HALT Mode Test OK\n");
		} else if (buffer[0] == 'd') {
			cns3xxx_pwr_doze();
			printk("<0>DOZE Mode Test OK\n");
		} else if (buffer[0] == 's') {
			cns3xxx_pwr_sleep();
			printk("<0>SLEEP Mode Test OK\n");
		} else if (buffer[0] == 'z') {
			printk("<0>Start to enter into sleep test mode\n");
			cns3xxx_pwr_sleep_test();
			printk("<0>SLEEP Mode Test OK\n");
		} else if (buffer[0] == 'x') {
			printk("<0>Start to enter into hibernate\n");
			cns3xxx_pwr_hibernate();
#ifdef CONFIG_CACHE_L2CC	/* dynamic change DDR2 clock need lockdown instruction to L2 */
		} else if (buffer[0] == 'r') {
			static int increase = 0;
			int ddr,new;
			ddr = ((PM_CLK_CTRL_REG>>7) & 0x3);
			if (0x3 == ddr) { increase = 0; }
			if (0x0 == ddr) { increase = 1; }
			if (increase) {
				new = ddr + 1;
			} else {
				new = ddr - 1;
			}
			printk("DDR2 test: %d => %d\n", ddr, new);
			cns3xxx_pwr_change_pll_ddr(new);
#endif
		}
	}
    return count;
}

struct proc_dir_entry *pmu_proc_entry;
struct proc_dir_entry *pm_clk_proc_entry;
struct proc_dir_entry *pm_pll_pd_proc_entry;

static int pm_clk_write_proc(struct file *file, const char *buffer, unsigned long count, void *data)
{
	if (count) {
		unsigned int index = PM_CLK_GATE_REG_OFFSET_SDIO+1, val = 2;
		sscanf(buffer, "%u %u", &index, &val);
		if (1 < val) {
			goto clk_debug_exit;
		}

		if ((0x1 << index) & PM_CLK_GATE_REG_MASK) {
			if (val) {
				PM_CLK_GATE_REG |= (0x1 << index);
			} else {
				PM_CLK_GATE_REG &= ~(0x1 << index);
			}
		}
	}
clk_debug_exit:
	return count;
}

static int pm_clk_read_proc(char *page, char **start, off_t off, int count, int *eof, void *data)
{
#define CLK_STRING(DEV) \
	"(%.2d): %s\n", PM_CLK_GATE_REG_OFFSET_##DEV, (0x1 & (reg>>PM_CLK_GATE_REG_OFFSET_##DEV))?"On":"Off"
    
	int num = 0, reg = PM_CLK_GATE_REG;

	num += sprintf(page + num, "PM_CLK_GATE_REG 0x%.8x\n", reg);
	num += sprintf(page + num, "SMC     "CLK_STRING(SMC_NFI));
	num += sprintf(page + num, "SPI/I2C "CLK_STRING(SPI_PCM_I2C));
	num += sprintf(page + num, "GDMA    "CLK_STRING(GDMA));
	num += sprintf(page + num, "RTC     "CLK_STRING(RTC));
	num += sprintf(page + num, "UART0   "CLK_STRING(UART0));
	num += sprintf(page + num, "UART1   "CLK_STRING(UART1));
	num += sprintf(page + num, "UART2   "CLK_STRING(UART2));
	num += sprintf(page + num, "GPIO    "CLK_STRING(GPIO));
	num += sprintf(page + num, "SWITCH  "CLK_STRING(SWITCH));
	num += sprintf(page + num, "HCIE    "CLK_STRING(HCIE));
	num += sprintf(page + num, "CRYPTO  "CLK_STRING(CRYPTO));
	num += sprintf(page + num, "TIMER   "CLK_STRING(TIMER));
	num += sprintf(page + num, "USB_OTG "CLK_STRING(USB_OTG));
	num += sprintf(page + num, "USB_HOST"CLK_STRING(USB_HOST));
	num += sprintf(page + num, "PCIE1   "CLK_STRING(PCIE1));
	num += sprintf(page + num, "PCIE0   "CLK_STRING(PCIE0));
	num += sprintf(page + num, "SATA    "CLK_STRING(SATA));
	num += sprintf(page + num, "RAID    "CLK_STRING(RAID));
	num += sprintf(page + num, "I2S     "CLK_STRING(I2S));
	num += sprintf(page + num, "LCDC    "CLK_STRING(LCDC));
	num += sprintf(page + num, "CIM     "CLK_STRING(CIM));
	num += sprintf(page + num, "GPU     "CLK_STRING(GPU));
	num += sprintf(page + num, "SDIO    "CLK_STRING(SDIO));

	return num;
}

static int pm_pll_pd_write_proc(struct file *file, const char *buffer, unsigned long count, void *data)
{
	if (count) {
		unsigned int index = PM_PLL_HM_PD_CTRL_REG_OFFSET_SATA_PHY1+1, val = 2;
		sscanf(buffer, "%u %u", &index, &val);
		if (1< val) {
			goto clk_debug_exit;
		}

		if ((0x1 << index) & PM_PLL_HM_PD_CTRL_REG_MASK) {
			if (val) {
				PM_PLL_HM_PD_CTRL_REG |= (0x1 << index);
			} else {
				PM_PLL_HM_PD_CTRL_REG &= ~(0x1 << index);
			}
		}
	}
clk_debug_exit:
	return count;
}

static int pm_pll_pd_read_proc(char *page, char **start, off_t off, int count, int *eof, void *data)
{
#define PLL_PD_STRING(DEV) \
	"(%.2d): %s\n", \
	PM_PLL_HM_PD_CTRL_REG_OFFSET_PLL_##DEV, \
	(0x1 & (reg>>PM_PLL_HM_PD_CTRL_REG_OFFSET_PLL_##DEV))?"Power Down":"Powe Up"

#define PHY_PD_STRING(DEV) \
	"(%.2d): %s\n", \
	PM_PLL_HM_PD_CTRL_REG_OFFSET_##DEV, \
	(0x1 & (reg>>PM_PLL_HM_PD_CTRL_REG_OFFSET_##DEV))?"Power Down":"Powe Up"

	int num = 0, reg = PM_PLL_HM_PD_CTRL_REG;

	num += sprintf(page + num, "PM_PLL_HM_PD_CTRL_REG 0x%.8x\n", reg);
	num += sprintf(page + num, "RGMII     "PLL_PD_STRING(RGMII));
	num += sprintf(page + num, "USB       "PLL_PD_STRING(USB));
	num += sprintf(page + num, "LCD       "PLL_PD_STRING(LCD));
	num += sprintf(page + num, "I2S       "PLL_PD_STRING(I2S));
	num += sprintf(page + num, "I2SCD     "PLL_PD_STRING(I2SCD));
	num += sprintf(page + num, "SATA_PHY0 "PHY_PD_STRING(SATA_PHY0));
	num += sprintf(page + num, "SATA_PHY1 "PHY_PD_STRING(SATA_PHY1));

	return num;
}

static int __init cns3xxx_pmu_proc_init(void)
{
	pmu_proc_entry = create_proc_entry("pmu", S_IFREG | S_IRUGO, cns3xxx_proc_dir);
	if (pmu_proc_entry) {
		pmu_proc_entry->read_proc = cns3xxx_read_proc;
		pmu_proc_entry->write_proc = cns3xxx_write_proc;
	}

	pm_clk_proc_entry = create_proc_entry("pm_clk", S_IFREG | S_IRUGO, cns3xxx_proc_dir);
	if (pm_clk_proc_entry) {
		pm_clk_proc_entry->read_proc = pm_clk_read_proc;
		pm_clk_proc_entry->write_proc = pm_clk_write_proc;
	}

	pm_pll_pd_proc_entry = create_proc_entry("pm_pll_pd", S_IFREG | S_IRUGO, cns3xxx_proc_dir);
	if (pm_pll_pd_proc_entry) {
		pm_pll_pd_proc_entry->read_proc = pm_pll_pd_read_proc;
		pm_pll_pd_proc_entry->write_proc = pm_pll_pd_write_proc;
	}
	return 1;
}

#ifdef CNS_PMU_DEBUG
static struct net_device *intr_ext0;
static struct net_device *intr_ext1;
static struct net_device *intr_ext2;
#endif

static struct net_device *intr_pmu;
irqreturn_t cns3xxx_pmu(int irq, void *dev_id)
{
	#if 0
	printk("<0><%s>\n", __FUNCTION__);
	#endif
	return IRQ_HANDLED;
}
 
#ifdef CNS_PMU_DEBUG
static struct net_device *intr_ext0;
static struct net_device *intr_ext1;
static struct net_device *intr_ext2;

irqreturn_t cns3xxx_ext2(int irq, void *dev_id)
{
	printk("<0><%s>\n", __FUNCTION__);
	return IRQ_HANDLED;
}


irqreturn_t cns3xxx_ext1(int irq, void *dev_id)
{
	return IRQ_HANDLED;
}

irqreturn_t cns3xxx_ext0(int irq, void *dev_id)
{
	static int i = 0;
	if (i) {
		printk("<0>external interrupt 0!!\n");
		cns3xxx_pwr_hibernate();
	}
	i++;
	return IRQ_HANDLED;
}
#endif

static int __init cns3xxx_pmu_init(void)
{
	int ret;
#ifdef CNS_PMU_DEBUG
	void set_interrupt_type(u32 id, u32 type);
	void set_interrupt_pri(u32 id, u32 pri);
	set_interrupt_type(IRQ_CNS3XXX_EXTERNAL_PIN0, 0);
	set_interrupt_pri(IRQ_CNS3XXX_EXTERNAL_PIN0, 0);
	set_interrupt_type(IRQ_CNS3XXX_EXTERNAL_PIN1, 1);
	set_interrupt_pri(IRQ_CNS3XXX_EXTERNAL_PIN1, 0);
	set_interrupt_type(IRQ_CNS3XXX_EXTERNAL_PIN2, 1);
	set_interrupt_pri(IRQ_CNS3XXX_EXTERNAL_PIN2, 0);
	set_interrupt_type(IRQ_CNS3XXX_PMU, 1);
#if 0
	ret = request_irq(IRQ_CNS3XXX_EXTERNAL_PIN0, cns3xxx_ext0, IRQF_SHARED, "EXT0", &intr_ext0);
	if (ret) { printk("<0> 0: ret %d\n", ret); }
#endif
	ret = request_irq(IRQ_CNS3XXX_EXTERNAL_PIN1, cns3xxx_ext1, IRQF_SHARED, "EXT1", &intr_ext1);
	if (ret) { printk("<0> 1: ret %d\n", ret); }
	ret = request_irq(IRQ_CNS3XXX_EXTERNAL_PIN2, cns3xxx_ext2, IRQF_SHARED, "EXT2", &intr_ext2);
	if (ret) { printk("<0> 2: ret %d\n", ret); }
#endif
	ret = request_irq(IRQ_CNS3XXX_PMU, cns3xxx_pmu, IRQF_SHARED, "PMU", &intr_pmu);
	if (ret) { 
		printk("%s: Unable to request IRQ %d (ret = %d). \n", __FUNCTION__, IRQ_CNS3XXX_PMU, ret);
		return (-1); 
	}

	memset(gwPwrClkEnCntA, 0, sizeof(unsigned short)*NUM_PWR_CLK_EN);

	clock_out_sel(CNS3XXX_PMU_CLKOUT_PLL_CPU, CNS3XXX_PMU_CLKOUT_DIV_16);
	cns3xxx_pmu_proc_init();
	/* 
 	 * Enable all LPI (only SMC, DMC, PSE, RAID, and GPU support LPI) 
 	 * DMC LPI enable is necessary for that DRAM in self-refresh mode.
 	 */
	cns3xxx_lp_hs(PM_CLK_GATE_REG);

	return 0;
}

#ifdef CONFIG_CNS3XXX_PSE_WOL
/*
 * DOZE mode is the lowest power available for Wake-On-LAN power management.
 * In DOZE mode, DDR2 will enter into self-refresh mode and PLL will be alive.
 *
 * All function modules can be turn off as many as possible by PM_CLK_GATE_REG except PSE
 */
void cns_pse_wol_prepare(void)
{
	int clk;

	/* !!! TODO: make sure that PSE is enabled before enter into lowper state */
	cns3xxx_pwr_mode(CNS3XXX_PWR_CPU_MODE_DOZE); /* PSE Wol works at DOZE mode */

	clk = PM_CLK_GATE_REG;
	PM_CLK_GATE_REG = (0x1 << PM_CLK_GATE_REG_OFFSET_SWITCH);

	/* set wake up interrupt source*/
	clean_wakeup_intr(); set_wakeup_intr(IRQ_CNS3XXX_SW_STATUS); /* only PSE status interrupt */
	set_wakeup_intr(IRQ_CNS3XXX_EXTERNAL_PIN1); /* backup wake up interrupt */

	GIC_REG_VALUE(0x104) = 0x1; /* enable clock scaling interrupt */
	cns3xxx_wfi();
	PM_CLK_GATE_REG = clk;
	cns3xxx_pwr_mode(CNS3XXX_PWR_CPU_MODE_DFS);
	clean_wakeup_intr();
}
#endif

static int cns_suspend_enter(suspend_state_t state)
{
#ifdef CONFIG_CNS3XXX_PSE_WOL
	cns_pse_wol_prepare();
#else
	cns3xxx_pwr_sleep();
#endif
	return 0;
}

static struct platform_suspend_ops cns_suspend_ops = {
	.enter = cns_suspend_enter, 
	.valid = suspend_valid_only_mem,
};

#if 0
#ifdef CONFIG_HIBERNATION
static int cns_hibernation_begin(suspend_state_t state)
{
	return 0;
}

static void cns_hibernation_end(void)
{
}

static int cns_hibernation_pre_snapshot(void)
{
	return 0;
}
static void cns_hibernation_finish(void)
{
}

static int cns_hibernation_prepare(void)
{
	return 0;
}

static int cns_hibernation_enter(suspend_state_t state)
{
	return 0;
}

static int cns_hibernation_pre_restore(void)
{
	return 0;
}

static void cns_hibernatio_restore_cleanup(void)
{
}

static struct platform_hibernation_ops cns_hibernation_ops = {
	.begin = cns_hibernation_begin,
	.end = cns_hibernation_end,
	.pre_snapshot = cns_hibernation_pre_snapshot,
	.finish = cns_hibernation_finish,
	.prepare = cns_hibernation_prepare,
	.enter = cns_hibernation_enter,
	.pre_restore = cns_hibernation_pre_restore,
	.restore_cleanup = cns_hibernatio_restore_cleanup,
};
#endif
#endif
static int __init cns_pm_init(void)
{
	suspend_set_ops(&cns_suspend_ops);
#if 0
#ifdef CONFIG_HIBERNATION
	hibernation_set_ops(&cns_hibernation_ops);
#endif
#endif
	return 0;
}

#ifdef CONFIG_CPU_FREQ

static struct cpufreq_frequency_table *cns_freqs_table;
static int cns_cpufreq_verify(struct cpufreq_policy *policy)
{
	return cpufreq_frequency_table_verify(policy, cns_freqs_table);
}

static unsigned int cns_cpufreq_get(unsigned int cpu)
{
	/* return CPU frequency in KHz*/
	return cns3xxx_cpu_clock()*1000;;
}

static spinlock_t cpufreq_lock;
static int cns_cpufreq_target(struct cpufreq_policy *policy,
                  unsigned int target_freq,
                  unsigned int relation)
{
    struct cpufreq_freqs freqs;
    unsigned long flags;
    int idx;

    if (policy->cpu != 0)
        return -EINVAL;

    /* Lookup the next frequency */
    if (cpufreq_frequency_table_target(policy, cns_freqs_table,
                target_freq, relation, &idx))
        return -EINVAL;

    freqs.old = policy->cur;
    freqs.new = cns_freqs_table[idx].frequency;
    freqs.cpu = policy->cpu;

    pr_debug("CPU frequency from %d MHz to %d MHz%s\n",
            freqs.old / 1000, freqs.new / 1000,
            (freqs.old == freqs.new) ? " (skipped)" : "");

    if (freqs.old == target_freq)
        return 0;
    if (freqs.old == freqs.new)
        return 0;

    cpufreq_notify_transition(&freqs, CPUFREQ_PRECHANGE);

	spin_lock_irqsave(&cpufreq_lock, flags);
//	spin_lock_irq(&cpufreq_lock);
	cns3xxx_pwr_change_cpu_clock(idx, CNS3XXX_PWR_CPU_CLK_DIV_BY1);
#if 0
	/* XXX: this is for debug */
	{
	#define MAX_NOP 100
		int i, cnt = 0;
		for (i=0; i<MAX_NOP; i++)
			asm volatile("nop\n");

		/* wait for DMC ready */
#define DMC_REG_VALUE(offset) (*((volatile unsigned int *)(CNS3XXX_DMC_BASE_VIRT+offset)))
		while (0x1 != (DMC_REG_VALUE(0x0) & 0x3)) {
			cnt++;
			if (cnt > 1024) {
				printk("%s: cnt is %d\n", __FUNCTION__, cnt);
				BUG();
			}
		};
	}
#endif

	spin_unlock_irqrestore(&cpufreq_lock, flags);
//	spin_unlock_irq(&cpufreq_lock);

    cpufreq_notify_transition(&freqs, CPUFREQ_POSTCHANGE);
    return 0;
}

static struct cpufreq_frequency_table cns_frequency_table[] = {
	{0, CPUFREQ_ENTRY_INVALID},
	{1, CPUFREQ_ENTRY_INVALID},
	{2, CPUFREQ_ENTRY_INVALID},
	{3, 400000},
	{4, CPUFREQ_ENTRY_INVALID},
	{6, CPUFREQ_ENTRY_INVALID},
	{6, 500000},
	{7, CPUFREQ_ENTRY_INVALID},
	{8, CPUFREQ_ENTRY_INVALID},
	{9, 600000},
	{10, CPUFREQ_TABLE_END},
};

static __init int cns_cpufreq_init(struct cpufreq_policy *policy)
{
	if (0 != policy->cpu)
		return -EINVAL;

	cns_freqs_table	= cns_frequency_table;
	/* what is the actual transition time ?*/
    policy->cpuinfo.transition_latency = 10*1000*1000;
    policy->cur = policy->min = policy->max = cns3xxx_cpu_clock()*1000; /* unit: kHz */
	cpufreq_frequency_table_cpuinfo(policy, cns_freqs_table);
	spin_lock_init(&cpufreq_lock);
    return 0;
};

struct cpufreq_driver cns_cpu_freq_driver = {
	.verify     = cns_cpufreq_verify,
	.target     = cns_cpufreq_target,
	.init       = cns_cpufreq_init,
	.get        = cns_cpufreq_get,
	.name       = "cns-cpufreq",
};
#endif

EXPORT_SYMBOL(cns3xxx_pwr_power_up);
EXPORT_SYMBOL(cns3xxx_pwr_power_down);
EXPORT_SYMBOL(cns3xxx_pwr_clk_en);
EXPORT_SYMBOL(cns3xxx_pwr_clk_disable);
EXPORT_SYMBOL(cns3xxx_pwr_soft_rst);
EXPORT_SYMBOL(cns3xxx_pwr_soft_rst_force);
EXPORT_SYMBOL(cns3xxx_cpu_clock);
EXPORT_SYMBOL(cns3xxx_pwr_mode);
EXPORT_SYMBOL(cns3xxx_wfi);
#ifdef CONFIG_CACHE_L2CC
EXPORT_SYMBOL(cns3xxx_pwr_change_pll_ddr);
#endif

module_init(cns3xxx_pmu_init);
late_initcall(cns_pm_init);
